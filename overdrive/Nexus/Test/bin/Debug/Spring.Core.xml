<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spring.Core</name>
    </assembly>
    <members>
        <member name="T:Spring.Collections.DictionarySet">
            <summary>
            <see cref="T:Spring.Collections.DictionarySet"/> is an <see langword="abstract"/> class
            that supports the creation of new
            <see cref="T:Spring.Collections.ISet"/> types where the underlying data
            store is an <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            <p>You can use any object that implements the <see cref="T:System.Collections.IDictionary"/>
            interface to hold set data. You can define your own, or you can use one of the objects
            provided in the framework. The type of <see cref="T:System.Collections.IDictionary"/> you
            choose will affect both the performance and the behavior of the
            <see cref="T:Spring.Collections.ISet"/> using it.</p>
            
            <p>This object overrides the <see cref="M:System.Object.Equals(System.Object)"/> method, but not the
            <see cref="M:System.Object.GetHashCode"/> method, because the
            <see cref="T:Spring.Collections.DictionarySet"/> class is mutable. Therefore, it is not
            safe to use as a key value in a hash table.</p>
            
            <p>To make a <see cref="T:Spring.Collections.ISet"/> typed based on your own
            <see cref="T:System.Collections.IDictionary"/>, simply derive a new class with a
            constructor that takes no parameters. Some <see cref="T:Spring.Collections.ISet"/>
            implmentations cannot be defined with a default constructor. If this is the case for
            your class, you will need to override <b>clone</b> as well.</p>
            
            <p>It is also standard practice that at least one of your constructors takes an
            <see cref="T:System.Collections.ICollection"/> or an <see cref="T:Spring.Collections.ISet"/>
            as an argument.</p>
            </remarks> 
        </member>
        <member name="T:Spring.Collections.Set">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <remarks>
            <p>
            This interface models the mathematical
            <see cref="T:Spring.Collections.ISet"/> abstraction.    
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <see cref="T:Spring.Collections.ISet"/> methods, and thus is not guaranteed.</p>
            
            <p><see cref="T:Spring.Collections.ISet"/> overrides the <see cref="M:System.Object.Equals(System.Object)"/> method to test for "equivalency": whether the 
            two sets contain the same elements.  The "==" and "!=" operators are not overridden by 
            design, since it is often desirable to compare object references for equality.</p>
            
            <p>Also, the <see cref="M:System.Object.GetHashCode"/> method is not implemented on any of the set implementations, since none
            of them are truely immutable.  This is by design, and it is the way almost all collections in 
            the .NET framework function.  So as a general rule, don't store collection objects inside <see cref="T:Spring.Collections.ISet"/>
            instances.  You would typically want to use a keyed <see cref="T:System.Collections.IDictionary"/> instead.</p>
            
            <p>None of the <see cref="T:Spring.Collections.ISet"/> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <see cref="T:Spring.Collections.SynchronizedSet"/>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <see cref="T:Spring.Collections.ISet"/> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="T:Spring.Collections.ISet">
            <summary>
            A collection that contains no duplicate elements.
            </summary>
            <remarks>
            <p>
            This interface models the mathematical
            <see cref="T:Spring.Collections.ISet"/> abstraction.    
            The order of elements in a set is dependant on (a)the data-structure implementation, and 
            (b)the implementation of the various <see cref="T:Spring.Collections.ISet"/> methods, and thus is not guaranteed.</p>
            
            <p><see cref="T:Spring.Collections.ISet"/> overrides the <see cref="M:System.Object.Equals(System.Object)"/> method to test for "equivalency": whether the 
            two sets contain the same elements.  The "==" and "!=" operators are not overridden by 
            design, since it is often desirable to compare object references for equality.</p>
            
            <p>Also, the <see cref="M:System.Object.GetHashCode"/> method is not implemented on any of the set implementations, since none
            of them are truely immutable.  This is by design, and it is the way almost all collections in 
            the .NET framework function.  So as a general rule, don't store collection objects inside <see cref="T:Spring.Collections.ISet"/>
            instances.  You would typically want to use a keyed <see cref="T:System.Collections.IDictionary"/> instead.</p>
            
            <p>None of the <see cref="T:Spring.Collections.ISet"/> implementations in this library are guranteed to be thread-safe
            in any way unless wrapped in a <see cref="T:Spring.Collections.SynchronizedSet"/>.</p>
            
            <p>The following table summarizes the binary operators that are supported by the <see cref="T:Spring.Collections.ISet"/> class.</p>
            <list type="table">
            	<listheader>
            		<term>Operation</term>
            		<term>Description</term>
            		<term>Method</term>
            	</listheader>
            	<item>
            		<term>Union (OR)</term>
            		<term>Element included in result if it exists in either <c>A</c> OR <c>B</c>.</term>
            		<term><c>Union()</c></term>
            	</item>
            	<item>
            		<term>Intersection (AND)</term>
            		<term>Element included in result if it exists in both <c>A</c> AND <c>B</c>.</term>
            		<term><c>InterSect()</c></term>
            	</item>
            	<item>
            		<term>Exclusive Or (XOR)</term>
            		<term>Element included in result if it exists in one, but not both, of <c>A</c> and <c>B</c>.</term>
            		<term><c>ExclusiveOr()</c></term>
            	</item>
            	<item>
            		<term>Minus (n/a)</term>
            		<term>Take all the elements in <c>A</c>.  Now, if any of them exist in <c>B</c>, remove
            		them.  Note that unlike the other operators, <c>A - B</c> is not the same as <c>B - A</c>.</term>
            		<term><c>Minus()</c></term>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ISet.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <b>clone</b> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <see cref="T:Spring.Collections.ISet"/> containing the union of this <see cref="T:Spring.Collections.ISet"/> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <b>clone</b> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <b>clone</b>
            of this <see cref="T:Spring.Collections.ISet"/> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <b>clone</b> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.ISet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="P:Spring.Collections.ISet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="M:Spring.Collections.Set.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <b>clone</b> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <see cref="T:Spring.Collections.ISet"/> containing the union of this <see cref="T:Spring.Collections.ISet"/> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Union(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <b>clone</b> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.op_BitwiseOr(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs a "union" of two sets, where all the elements
            in both are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            The return value is a <b>clone</b> of one of the sets (<c>a</c> if it is not <c>null</c>) with elements of the other set
            added in.  Neither of the input sets is modified by the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the union of the input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <b>clone</b> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Intersect(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <b>clone</b> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.op_BitwiseAnd(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included only if it exists in
            both <c>a</c> and <c>b</c>.  Neither input object is modified by the operation.
            The result object is a <b>clone</b> of one of the input objects (<c>a</c> if it is not <c>null</c>) containing the
            elements from the intersect operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>The intersection of the two input sets.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <b>clone</b>
            of this <see cref="T:Spring.Collections.ISet"/> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Minus(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <b>clone</b>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.op_Subtraction(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <b>clone</b>
            of set <c>a</c> containing the elements from the operation. 
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing <c>A - B</c> elements.  <c>null</c> if <c>a</c> is <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <b>clone</b> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.ExclusiveOr(Spring.Collections.ISet,Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <b>clone</b> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.op_ExclusiveOr(Spring.Collections.Set,Spring.Collections.Set)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <b>clone</b> of one of the sets
            (<c>a</c> if it is not <c>null</c>) containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <param name="b">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.  <c>null</c> if both sets are <c>null</c>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.Set.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.Set.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Set.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.Set.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Set.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/> instance.  This will work for derived <see cref="T:Spring.Collections.ISet"/>
            classes if the derived class implements a constructor that takes no arguments.
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to an array.  The type of array needs
            to be compatible with the objects in the <see cref="T:Spring.Collections.ISet"/>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.Set.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <see cref="T:Spring.Collections.ISet"/>.</returns>
        </member>
        <member name="M:Spring.Collections.Set.Equals(System.Object)">
            <summary>
            This method will test the <see cref="T:Spring.Collections.ISet"/> against another <see cref="T:Spring.Collections.ISet"/> for "equality".
            In this case, "equality" means that the two sets contain the same elements.
            The "==" and "!=" operators are not overridden by design.  If you wish to check
            for "equivalent" <see cref="T:Spring.Collections.ISet"/> instances, use <c>Equals()</c>.  If you wish to check
            to see if two references are actually the same object, use "==" and "!=".  
            </summary>
            <param name="o">A <see cref="T:Spring.Collections.ISet"/> object to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.Set.GetHashCode">
            <summary>
            Gets the hashcode for the object.  Not implemented.
            </summary>
            <returns>An exception.</returns>
            <exception cref="T:System.NotImplementedException">This feature is not implemented.</exception>
        </member>
        <member name="P:Spring.Collections.Set.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.Count">
            <summary>
            The number of elements currently contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.IsSynchronized">
            <summary>
            Returns <c>true</c> if the <see cref="T:Spring.Collections.ISet"/> is synchronized across threads.  Note that
            enumeration is inherently not thread-safe.  Use the <c>SyncRoot</c> to lock the
            object during enumeration.
            </summary>
        </member>
        <member name="P:Spring.Collections.Set.SyncRoot">
            <summary>
            An object that can be used to synchronize this collection to make it thread-safe.
            When implementing this, if your object uses a base object, like an <see cref="T:System.Collections.IDictionary"/>,
            or anything that has a <c>SyncRoot</c>, return that object instead of "<c>this</c>".
            </summary>
        </member>
        <member name="F:Spring.Collections.DictionarySet.InternalDictionary">
            <summary>
            Provides the storage for elements in the <see cref="T:Spring.Collections.ISet"/>, stored as the key-set
            of the <see cref="T:System.Collections.IDictionary"/> object.  Set this object in the constructor
            if you create your own <see cref="T:Spring.Collections.ISet"/> class.  
            </summary>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to an array.  The type of array needs
            to be compatible with the objects in the <see cref="T:Spring.Collections.ISet"/>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.DictionarySet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <see cref="T:Spring.Collections.ISet"/>.</returns>
        </member>
        <member name="P:Spring.Collections.DictionarySet.Placeholder">
            <summary>
            The placeholder object used as the value for the <see cref="T:System.Collections.IDictionary"/> instance.
            </summary>
            <remarks>
            There is a single instance of this object globally, used for all <c>Sets</c>.
            </remarks>
        </member>
        <member name="P:Spring.Collections.DictionarySet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.DictionarySet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.DictionarySet.IsSynchronized">
            <summary>
            None of the objects based on <see cref="T:Spring.Collections.DictionarySet"/> are synchronized.  Use the
            <c>SyncRoot</c> property instead.
            </summary>
        </member>
        <member name="P:Spring.Collections.DictionarySet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <see cref="T:Spring.Collections.ISet"/> between threads.
            </summary>
        </member>
        <member name="T:Spring.Collections.HashedSet">
            <summary>
            Implements a <see cref="T:Spring.Collections.ISet"/> based on a hash table.
            </summary>
            <remarks>
            <p>
            This will give the best lookup, add, and remove performance for very large data-sets,
            but iteration will occur in no particular order.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.HashedSet.#ctor">
            <summary>
            Creates a new set instance based on a hash table.
            </summary>
        </member>
        <member name="M:Spring.Collections.HashedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a hash table and initializes it based on a
            collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.HybridSet">
            <summary>
            Implements a <see cref="T:Spring.Collections.ISet"/> that automatically changes from a
            list based implementation to a hashtable based implementation when the size reaches a
            certain threshold.
            </summary>
            <remarks>
            <p>
            This is good if you are unsure about whether you data-set will be tiny or huge.
            Because this uses a dual implementation, iteration order is not guaranteed!
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.HybridSet.#ctor">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size.
            </summary>
        </member>
        <member name="M:Spring.Collections.HybridSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on either a list or a hash table, depending on which 
            will be more efficient based on the data-set size, and
            initializes it based on a collection of elements.
            </summary>
            <param name="initialValues">A collection of elements that defines the initial set contents.</param>
        </member>
        <member name="T:Spring.Collections.ImmutableSet">
            <summary>
            Implements an immutable (read-only) <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>Although this is advertised as immutable, it really isn't. Anyone with access to the
            <c>basisSet</c> can still change the data-set. So <see cref="M:System.Object.GetHashCode"/> is not implemented
            for this <see cref="T:Spring.Collections.ISet"/>, as is the case for all
            <see cref="T:Spring.Collections.ISet"/> implementations in this library.
            This design decision was based on the efficiency of not having to <b>clone</b> the 
            <c>basisSet</c> every time you wrap a mutable <see cref="T:Spring.Collections.ISet"/>.</p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.#ctor(Spring.Collections.ISet)">
            <summary>
            Constructs an immutable (read-only) <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <param name="basisSet">The <see cref="T:Spring.Collections.ISet"/> that is wrapped.</param>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns><c>true</c> is the object was added, <c>false</c> if it was already present.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to an array.  The type of array needs
            to be compatible with the objects in the <see cref="T:Spring.Collections.ISet"/>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <returns>An <c>IEnumerator</c> over the elements in the <see cref="T:Spring.Collections.ISet"/>.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Union(Spring.Collections.ISet)">
            <summary>
            Performs a "union" of the two sets, where all the elements
            in both sets are present.  That is, the element is included if it is in either <c>a</c> or <c>b</c>.
            Neither this set nor the input set are modified during the operation.  The return value
            is a <b>clone</b> of this set with the extra elements added in.
            </summary>
            <param name="a">A collection of elements.</param>
            <returns>A new <see cref="T:Spring.Collections.ISet"/> containing the union of this <see cref="T:Spring.Collections.ISet"/> with the specified collection.
            Neither of the input objects is modified by the union.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Intersect(Spring.Collections.ISet)">
            <summary>
            Performs an "intersection" of the two sets, where only the elements
            that are present in both sets remain.  That is, the element is included if it exists in
            both sets.  The <c>Intersect()</c> operation does not modify the input sets.  It returns
            a <b>clone</b> of this set with the appropriate elements removed.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>The intersection of this set with <c>a</c>.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.Minus(Spring.Collections.ISet)">
            <summary>
            Performs a "minus" of set <c>b</c> from set <c>a</c>.  This returns a set of all
            the elements in set <c>a</c>, removing the elements that are also in set <c>b</c>.
            The original sets are not modified during this operation.  The result set is a <b>clone</b>
            of this <see cref="T:Spring.Collections.ISet"/> containing the elements from the operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the elements from this set with the elements in <c>a</c> removed.</returns>
        </member>
        <member name="M:Spring.Collections.ImmutableSet.ExclusiveOr(Spring.Collections.ISet)">
            <summary>
            Performs an "exclusive-or" of the two sets, keeping only the elements that
            are in one of the sets, but not in both.  The original sets are not modified
            during this operation.  The result set is a <b>clone</b> of this set containing
            the elements from the exclusive-or operation.
            </summary>
            <param name="a">A set of elements.</param>
            <returns>A set containing the result of <c>a ^ b</c>.</returns>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.IsSynchronized">
            <summary>
            Returns an object that can be used to synchronize use of the <see cref="T:Spring.Collections.ISet"/> across threads.
            </summary>
        </member>
        <member name="P:Spring.Collections.ImmutableSet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <see cref="T:Spring.Collections.ISet"/> between threads.
            </summary>
        </member>
        <member name="T:Spring.Collections.LinkedList">
            <summary>
            Simple linked list implementation.
            </summary>
            <author>Simon White</author>
        </member>
        <member name="M:Spring.Collections.LinkedList.#ctor">
            <summary>
            Constructs a new <code>LinkedList</code>.
            </summary>
        </member>
        <member name="M:Spring.Collections.LinkedList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a new <code>LinkedList</code> that contains all elements
            of the specified list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Spring.Collections.LinkedList.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index.
            </summary>
            <param name="index">the index</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the specified index is greater than
            the number of objects within the list</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">the index</param>
            <param name="value">the object to be inserted</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the specified index is greater than
            the number of objects within the list</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.Remove(System.Object)">
            <summary>
            Removes the first instance of the specified object found.
            </summary>
            <param name="value">the object to remove</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.Contains(System.Object)">
            <summary>
            Tests whether at least one instance of the specified object is
            contained within the list.
            </summary>
            <param name="value">the object to search for</param>
            <returns>true if an instance was found, otherwise false</returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.Clear">
            <summary>
            Removes all objects from the list.
            </summary>
        </member>
        <member name="M:Spring.Collections.LinkedList.IndexOf(System.Object)">
            <summary>
            Returns the index of the first instance of the specified object found.
            </summary>
            <param name="value">the object to search for</param>
            <returns>the index of the first instance found, or -1</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if the specified index is greater than
            the number of objects within the list</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.Add(System.Object)">
            <summary>
            Adds the specified object to the end of the list.
            </summary>
            <param name="value">the object to add</param>
            <returns>the index the object was added at</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if the specified index is greater than
            the number of objects within the list</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.AddAll(System.Collections.IList)">
            <summary>
            Adds all objects to the end of the list.
            </summary>
            <param name="list">the list of objects to add</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the specified index is greater than
            the number of objects within the list</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.CheckUpdateState">
            <summary>
            Checks whether the list can be modified.
            </summary>
            <exception cref="T:System.NotSupportedException">if the list
            cannot be modified</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.ValidateIndex(System.Int32)">
            <summary>
            Validates the specified index.
            </summary>
            <param name="index">the index</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the index
            is invalid</exception>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetNode(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <param name="index">the index</param>
            <returns>the node</returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetNode(System.Object)">
            <summary>
            Returns the node (and index) and the first node that contains
            the specified value.
            </summary>
            <param name="value">the value to search for</param>
            <returns>the node, or null</returns>
        </member>
        <member name="M:Spring.Collections.LinkedList.RemoveNode(Spring.Collections.LinkedList.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies this list to the specified array starting from the specified index.
            </summary>
            <param name="array">The array to be copied to.</param>
            <param name="index">The start index.</param>
        </member>
        <member name="M:Spring.Collections.LinkedList.GetEnumerator">
            <summary>
            Returns an enumerator for this list. Note enumerators are fail fast.
            </summary>
            <returns>the enumerator</returns>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsReadOnly">
            <summary>
            Is list read only?
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.Item(System.Int32)">
            <summary>
            Indexerer.
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsFixedSize">
            <summary>
            Is the list a fixed size?
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.IsSynchronized">
            <summary>
            Is the list synchronized?
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.Count">
            <summary>
            The number of objects within the list.
            </summary>
        </member>
        <member name="P:Spring.Collections.LinkedList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:Spring.Collections.LinkedList"/>.
            </summary>
        </member>
        <member name="T:Spring.Collections.ListSet">
            <summary>
            Implements a <see cref="T:Spring.Collections.ISet"/> based on a list.
            </summary>
            <remarks>
            <p>
            Performance is much better for very small lists than either
            <see cref="T:Spring.Collections.HashedSet"/> or <see cref="T:Spring.Collections.SortedSet"/>.
            However, performance degrades rapidly as the data-set gets bigger. Use a
            <see cref="T:Spring.Collections.HybridSet"/> instead if you are not sure your data-set
            will always remain very small. Iteration produces elements in the order they were added.
            However, element order is not guaranteed to be maintained by the various
            <see cref="T:Spring.Collections.ISet"/> mathematical operators.  
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.ListSet.#ctor">
            <summary>
            Creates a new set instance based on a list.
            </summary>
        </member>
        <member name="M:Spring.Collections.ListSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a list and initializes it based on a
            collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.SortedSet">
            <summary>
            Implements an <see cref="T:Spring.Collections.ISet"/> based on a sorted tree.
            </summary>
            <remarks>
            <p>
            This gives good performance for operations on very large data-sets, though not as good
            - asymptotically - as a <see cref="T:Spring.Collections.HashedSet"/>. However, iteration
            occurs in order.
            </p>
            <p>
            Elements that you put into this type of collection must implement
            <see cref="T:System.IComparable"/>, and they must actually be comparable. You can't mix
            <see cref="T:System.String"/> and <see cref="T:System.Int32">int</see> values, for example.
            </p>
            <p>
            This <see cref="T:Spring.Collections.ISet"/> implementation does <b>not</b> support
            the null value.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.SortedSet.#ctor">
            <summary>
            Creates a new set instance based on a sorted tree.
            </summary>
        </member>
        <member name="M:Spring.Collections.SortedSet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set instance based on a sorted tree and initializes it based on a
            collection of elements.
            </summary>
            <param name="initialValues">
            A collection of elements that defines the initial set contents.
            </param>
        </member>
        <member name="T:Spring.Collections.SynchronizedSet">
            <summary>
            Implements a thread-safe <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <remarks>
            <p>
            The implementation is extremely conservative, 
            serializing critical sections to prevent possible deadlocks, and locking on everything.
            The one exception is for enumeration, which is inherently not thread-safe.  For this, you
            have to <c>lock</c> the <c>SyncRoot</c> object for the duration of the enumeration.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.#ctor(Spring.Collections.ISet)">
            <summary>
            Constructs a thread-safe <see cref="T:Spring.Collections.ISet"/> wrapper.
            </summary>
            <param name="basisSet">
            The <see cref="T:Spring.Collections.ISet"/> object that this object will wrap.
            </param>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="o">The object to add to the set.</param>
            <returns>
            <c>true</c> is the object was added, <c>false</c> if it was already present.
            </returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements in the specified collection to the set if they are not already present.
            </summary>
            <param name="c">A collection of objects to add to the set.</param>
            <returns><c>true</c> is the set changed as a result of this operation, <c>false</c> if not.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains the specified element.
            </summary>
            <param name="o">The element to look for.</param>
            <returns><c>true</c> if this set contains the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            Returns <c>true</c> if the set contains all the elements in the specified collection.
            </summary>
            <param name="c">A collection of objects.</param>
            <returns><c>true</c> if the set contains all the elements in the specified collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Remove(System.Object)">
            <summary>
            Removes the specified element from the set.
            </summary>
            <param name="o">The element to be removed.</param>
            <returns><c>true</c> if the set contained the specified element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove all the specified elements from this set, if they exist in this set.
            </summary>
            <param name="c">A collection of elements to remove.</param>
            <returns><c>true</c> if the set was modified as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.RetainAll(System.Collections.ICollection)">
            <summary>
            Retains only the elements in this set that are contained in the specified collection.
            </summary>
            <param name="c">Collection that defines the set of elements to be retained.</param>
            <returns><c>true</c> if this set changed as a result of this operation.</returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in the <see cref="T:Spring.Collections.ISet"/> to an array.  The type of array needs
            to be compatible with the objects in the <see cref="T:Spring.Collections.ISet"/>, obviously.
            </summary>
            <param name="array">An array that will be the target of the copy operation.</param>
            <param name="index">The zero-based index where copying will start.</param>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.GetEnumerator">
            <summary>
            Enumeration is, by definition, not thread-safe.  Use a <c>lock</c> on the <c>SyncRoot</c> 
            to synchronize the entire enumeration process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spring.Collections.SynchronizedSet.Clone">
            <summary>
            Returns a clone of the <see cref="T:Spring.Collections.ISet"/> instance.  
            </summary>
            <returns>A clone of this object.</returns>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.IsEmpty">
            <summary>
            Returns <c>true</c> if this set contains no elements.
            </summary>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.Count">
            <summary>
            The number of elements contained in this collection.
            </summary>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.IsSynchronized">
            <summary>
            Returns <c>true</c>, indicating that this object is thread-safe.  The exception to this
            is enumeration, which is inherently not thread-safe.  Use the <c>SyncRoot</c> object to
            lock this object for the entire duration of the enumeration.
            </summary>
        </member>
        <member name="P:Spring.Collections.SynchronizedSet.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize the <see cref="T:Spring.Collections.ISet"/> between threads.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ApplicationEventMulticaster">
            <summary>
            Provides central place to handle registration / unregistration of application events.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ApplicationEventMulticaster.cs,v 1.3 2005/02/17 23:02:11 springboy Exp $</version>
        </member>
        <member name="T:Spring.Context.Events.IApplicationEventMulticaster">
            <summary>
            Subinterface of <see cref="T:Spring.Context.Events.IApplicationEventMulticaster"/>
            to be implemented by listeners that can broadcast events to other listeners.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio ( .NET )</author>
            <version>$Id: IApplicationEventMulticaster.cs,v 1.3 2005/02/17 23:02:12 springboy Exp $</version>
        </member>
        <member name="T:Spring.Context.IApplicationListener">
            <summary>
            Interface to be implemented by listeners that want to be notified
            of application events.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: IApplicationListener.cs,v 1.3 2005/02/17 23:02:11 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.IApplicationListener.OnApplicationEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handle an application event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="applicationEventArgs">The event to respond to.</param>
        </member>
        <member name="M:Spring.Context.Events.IApplicationEventMulticaster.AddApplicationListener(Spring.Context.IApplicationListener)">
            <summary>
            Add a listener to be notified of all events.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:Spring.Context.Events.IApplicationEventMulticaster.RemoveApplicationListener(Spring.Context.IApplicationListener)">
            <summary>
            Remove a listener in the notification list.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Spring.Context.Events.IApplicationEventMulticaster.RemoveAllListeners">
            <summary>
            Remove all listeners registered with this multicaster.
            </summary>
            <remarks>
            <p>
            It will perform no action on event notification until 
            more listeners are registered.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Events.ApplicationEventMulticaster.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Events.ApplicationEventMulticaster"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Events.ApplicationEventMulticaster.AddApplicationListener(Spring.Context.IApplicationListener)">
            <summary>
            Add a listener to be notified of all events.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:Spring.Context.Events.ApplicationEventMulticaster.RemoveApplicationListener(Spring.Context.IApplicationListener)">
            <summary>
            Remove a listener in the notification list.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:Spring.Context.Events.ApplicationEventMulticaster.RemoveAllListeners">
            <summary>
            Remove all listeners registered with this multicaster.
            </summary>
            <remarks>
            <p>
            It will perform no action on event notification until 
            more listeners are registered.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Events.ApplicationEventMulticaster.OnApplicationEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handle an application event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="applicationEventArgs">The event to respond to.</param>
        </member>
        <member name="E:Spring.Context.Events.ApplicationEventMulticaster.NotifyListeners">
            <summary>
            Event to notify all listeners for this
            <see cref="T:Spring.Context.Events.IApplicationEventMulticaster"/>.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ConsoleListener">
            <summary>
            Simple listener for debug use only that logs messages to the console.
            </summary>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ConsoleListener.cs,v 1.3 2005/03/30 16:59:38 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Context.Events.ConsoleListener.#ctor">
            <summary>
            Event to notify all listeners for this
            <see cref="T:Spring.Context.Events.ConsoleListener"/>.
            </summary>
        </member>
        <member name="M:Spring.Context.Events.ConsoleListener.OnApplicationEvent(System.Object,Spring.Context.ApplicationEventArgs)">
            <summary>
            Handle an application event.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="applicationEventArgs">The event to respond to.</param>
        </member>
        <member name="T:Spring.Context.Events.ContextEventArgs">
            <summary>
            Application event object sent to listeners registered with a
            <see cref="T:Spring.Context.IApplicationContext"/> to inform
            them of context lifecycle events.
            </summary>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ContextEventArgs.cs,v 1.4 2005/02/17 23:02:12 springboy Exp $</version>
        </member>
        <member name="T:Spring.Context.ApplicationEventArgs">
            <summary>
            Instances of this class are to be passed as the second argument to all
            application event handlers.
            </summary>
            <remarks>
            Abstract as it doesn't make sense for generic events to be published directly.
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ApplicationEventArgs.cs,v 1.2 2005/02/17 23:02:09 springboy Exp $</version>
        </member>
        <member name="F:Spring.Context.ApplicationEventArgs._timestamp">
            <summary>System time when the event happened </summary>
        </member>
        <member name="M:Spring.Context.ApplicationEventArgs.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Spring.Context.ApplicationEventArgs.TimeStamp">
            <summary> Returns the the date and time when the event occured.</summary>
        </member>
        <member name="P:Spring.Context.ApplicationEventArgs.EventTimeMilliseconds">
            <summary>The system time in milliseconds when the event happened.</summary>
            <returns>
            The system time in milliseconds when the event happened.
            </returns>
        </member>
        <member name="M:Spring.Context.Events.ContextEventArgs.#ctor(Spring.Context.Events.ContextEventArgs.ContextEvent)">
            <summary>
            Creates a new instance of the ContextEventArgs class to represent the
            supplied context event.
            </summary>
            <param name="e">The type of context event.</param>
        </member>
        <member name="P:Spring.Context.Events.ContextEventArgs.Event">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="T:Spring.Context.Events.ContextEventArgs.ContextEvent">
            <summary>
            The various context event types.
            </summary>
        </member>
        <member name="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Refreshed">
            <summary>
            The event type when the context is refreshed or created.
            </summary>
        </member>
        <member name="F:Spring.Context.Events.ContextEventArgs.ContextEvent.Closed">
            <summary>
            The event type when the context is closed.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.AbstractApplicationContext">
            <summary>
            Partial implementation of the <see cref="T:Spring.Context.IApplicationContext"/>
            interface.
            </summary>
            <remarks>
            <p>
            Doesn't mandate the type of storage used for configuration, but implements common
            functionality.
            </p>
            <p>
            Uses the Template Method design pattern, requiring concrete subclasses
            to implement abstract methods.
            </p>
            <p>
            In contrast to a plain object factory, an
            <see cref="T:Spring.Context.IApplicationContext"/> is supposed
            to detect special objects defined in its object factory: therefore, this class
            automatically registers
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s,
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            and <see cref="T:Spring.Context.IApplicationListener"/>s that are defined as objects
            in the context.
            </p>
            <p>
            An <see cref="T:Spring.Context.IMessageSource"/> may be also supplied as a object in
            the context, with the name "messageSource". Else, message resolution is delegated to the
            parent context.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergan Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: AbstractApplicationContext.cs,v 1.24 2005/03/30 16:59:38 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Core.IO.ConfigurableResourceLoader">
            <summary>
            Configurable implementation of the <see cref="T:Spring.Core.IO.IResourceLoader"/> interface.
            </summary>
            <remarks>
            <p>
            This <see cref="T:Spring.Core.IO.IResourceLoader"/> implementation supports configuration
            of resource access protocols and corresponding .NET types that know how to handle them.
            </p>
            <p>
            Basic protocol-to-resource type mappings are also defined by this class, while others can be added
            either internally, by application contexts extending this class, or externally, 
            by the end user configuring the context.
            </p>
            <p>
            Only one resource type can be defined for each protocol, but multiple protocols can map to the 
            same resource type (for example, "http" and "ftp" protocols both map to <see cref="T:Spring.Core.IO.UrlResource"/> type. 
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: ConfigurableResourceLoader.cs,v 1.10 2005/02/17 23:02:32 springboy Exp $</version>
        </member>
        <member name="T:Spring.Core.IO.IResourceLoader">
            <summary>
            Interface to be implemented by objects that can load resources.
            </summary>
            <remarks>
            <p>
            An <c>IApplicationContext</c> implementation is generally required to provide this
            functionality.
            </p>
            <p>
            <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> is a standalone implementation that
            is usable outside an <c>IApplicationContext</c>, also used by
            <see cref="T:Spring.Core.IO.ResourceConverter"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.IResourceLoader.GetResource(System.String)">
            <summary>
            Return an <see cref="T:Spring.Core.IO.IResource"/> handle for the specified resource.
            </summary>
            <remarks>
            <p>
            The handle should always be a reusable resource descriptor, allowing for multiple
            <see cref="P:Spring.Core.IO.IInputStreamSource.InputStream"/> calls.
            </p>
            <p>
            <ul>
            <li>Must support fully qualified URLs, e.g. "file:C:/test.dat".</li>
            <li>Should support relative file paths, e.g. "test.dat" (this will be
            implementation-specific, typically provided by an <c>IApplicationContext</c>
            implementation).</li>
            </ul>
            </p>
            <p>Note that an <see cref="T:Spring.Core.IO.IResource"/> handle does not imply an
            existing resource; you need to invoke an <see cref="T:Spring.Core.IO.IResource"/>'s
            <see cref="P:Spring.Core.IO.IResource.Exists"/> property to check for existence.
            </p>
            </remarks>
            <param name="location">The resource location.</param>
            <returns> An appropriate <see cref="T:Spring.Core.IO.IResource"/> handle.</returns>
        </member>
        <member name="F:Spring.Core.IO.ConfigurableResourceLoader.PROTOCOL_SEPARATOR">
            <summary>
            String that separates protocol name from the resource name
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.AddProtocolMapping(System.String,System.Type)">
            <summary>
            Adds new protocol mapping if it doesn't already exist or overrides 
            existing one for the specified protocol name
            </summary>
            <param name="protocolName">protocol to define or override mapping for</param>
            <param name="resourceType">
            implementation of <see cref="T:Spring.Core.IO.IResource"/> that should handle specified protocol
            </param>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.GetResource(System.String)">
            <summary>
            Returns a <see cref="T:Spring.Core.IO.IResource"/> given the name of the resource.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <returns>The <see cref="T:Spring.Core.IO.IResource"/> for the specified name.</returns>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.HasProtocol(System.String)">
            <summary>
            Checks that a resource name starts with one of the protocol names
            known by this <see cref="T:Spring.Core.IO.ConfigurableResourceLoader"/>
            </summary>
            <param name="resourceName">Name of the resource</param>
            <returns><c>true</c> if the name of the resource starts with one of the known protocol</returns>
        </member>
        <member name="M:Spring.Core.IO.ConfigurableResourceLoader.GetProtocol(System.String)">
            <summary>
            Extracts protocol name from resource name.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <returns>extracted protocol name or null if resource is unqualified</returns>        </member>
        <member name="P:Spring.Core.IO.ConfigurableResourceLoader.DefaultResourceProtocol">
            <summary>
            Defines default protocol to use for unqualified resources
            </summary>
        </member>
        <member name="T:Spring.Context.IConfigurableApplicationContext">
            <summary>
            Provides means to configure an application context in addition to the
            application context client methods in the
            <see cref="T:Spring.Context.IApplicationContext"/> interface.
            </summary>
            <remarks>
            <p>
            This interface is to be implemented by most (if not all)
            <see cref="T:Spring.Context.IApplicationContext"/> implementations.
            </p>
            <p>
            Configuration and lifecycle methods are encapsulated here to avoid
            making them obvious to <see cref="T:Spring.Context.IApplicationContext"/> client code.
            </p>
            <p>
            Calling <see cref="M:System.IDisposable.Dispose"/> will close this
            application context, releasing all resources and locks that the implementation
            might hold. This includes disposing all cached singleton objects.
            </p>
            <note type="caution">
            <see cref="M:System.IDisposable.Dispose"/> does <i>not</i> invoke the
            attendant <see cref="M:System.IDisposable.Dispose"/> on any parent context.
            </note>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IConfigurableApplicationContext.cs,v 1.4 2005/03/30 16:59:36 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Context.IApplicationContext">
            <summary>
            Central interface to provide configuration for an application.
            </summary>
            <remarks>
            <p>IApplicationContext implementations provide:
            <ul>
            <li>Object factory functionality inherited from 
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>
            and <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>
            </li>
            <li>The ability to resolve messages, supporting internationalization.
            Inherited from the <see cref="T:Spring.Context.IMessageSource"/> interface.
            </li>
            <li>The ability to load file resources in a generic fashion.
            Inherited from the <see cref="T:Spring.Core.IO.IResourceLoader"/> interface.
            </li>
            <li>Acts an an event registry for supporting loosely coupled
            eventing between objecs. Inherited from the
            <see cref="T:Spring.Objects.Events.IEventRegistry"/> interface.
            </li>
            <li>The ability to publish events related to context lifecycle.
            </li>
            <li>Inheritance from a parent context. Definitions in a descendant context
            will always take priority. 
            </li>
            </ul>
            </p>
            <p>
            In addition to standard object factory lifecycle capabilities,
            IApplicationContext implementations need to detect
            <see cref="T:Spring.Context.IApplicationContextAware"/>
            objects and set their
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
            property accordingly.
            </p>
            <p>
            This is read-only while the application is running, but may be
            reloaded if the implementation supports this.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IApplicationContext.cs,v 1.6 2005/03/30 16:59:36 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IListableObjectFactory">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface
            to be implemented by object factories that can enumerate all their object instances,
            rather than attempting object lookup by name one by one as requested by clients.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> implementations that preload
            all their objects (for example, DOM-based XML factories) may implement this
            interface. This interface is discussed in
            "Expert One-on-One J2EE Design and Development", by Rod Johnson.
            </p>
            <p>
            If this is an <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>,
            the return values will not take any
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> hierarchy into account, but
            will relate only to the objects defined in the current factory.
            Use the <see cref="T:Spring.Objects.Factory.ObjectFactoryUtils"/> helper class to
            get all objects.
            </p>
            <p>
            With the exception of
            <see cref="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount"/>,
            the methods and properties in this interface are not designed for frequent
            invocation. Implementations may be slow.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: IListableObjectFactory.cs,v 1.3 2005/02/17 23:02:35 springboy Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectFactory">
            <summary>
            Interface to be implemented by objects that hold a number of object definitions,
            each uniquely identified by a <see cref="T:System.String"/> name.
            </summary>
            <remarks>
            <p>
            An independent instance of any of these objects can be obtained
            (the Prototype design pattern), or a single shared instance can be obtained
            (a superior alternative to the Singleton design pattern). Which type of instance
            will be returned depends on the object factory configuration - the API is the same.
            The Singleton approach is much more useful and more common in practice.
            </p>
            <p>
            The point of this approach is that the IObjectFactory is a central registry of
            application components, and centralizes the configuring of application components
            (no more do individual objects need to read properties files, for example).
            See chapters 4 and 11 of "Expert One-on-One J2EE Design and Development" for a
            discussion of the benefits of this approach.
            </p>
            <p>
            Normally an IObjectFactory will load object definitions stored in a configuration
            source (such as an XML document), and use the <see cref="N:Spring.Objects"/>
            namespace to configure the objects. However, an implementation could simply return
            .NET objects it creates as necessary directly in .NET code. There are no
            constraints on how the definitions could be stored: LDAP, RDBMS, XML, properties
            file etc. Implementations are encouraged to support references amongst objects,
            to either Singletons or Prototypes.
            </p>
            <p>
            In contrast to the methods in
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>, all of the methods
            in this interface will also check parent factories if this is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>. If an object is
            not found in this factory instance, the immediate parent is asked. Objects in
            this factory instance are supposed to override objects of the same name in any
            parent factory.
            </p>
            <p>
            Object factories are supposed to support the standard object lifecycle interfaces
            as far as possible. The maximum set of initialization methods and their standard
            order is:
            </p>
            <p>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IObjectNameAware"/>'s
            <see cref="P:Spring.Objects.Factory.IObjectNameAware.ObjectName"/> property.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>'s
            <see cref="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory"/> property.
            </description>
            </item>
            <item>
            <description>
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/>
            (only applicable if running in an application context).
            </description>
            </item>
            <item>
            <description>
            The
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            method of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/> method.
            </description>
            </item>
            <item>
            <description>
            A custom init-method definition.
            </description>
            </item>
            <item>
            <description>
            The
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            method of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s.
            </description>
            </item>
            </list>
            </p>
            <p/>
            <p>
            On shutdown of an object factory, the following lifecycle methods apply:
            </p>
            <p>
            <list type="bullet">
            <item>
            <description>
            <see cref="T:System.IDisposable"/>'s
            <see cref="M:System.IDisposable.Dispose"/> method.
            </description>
            </item>
            <item>
            <description>
            A custom destroy-method definition.
            </description>
            </item>
            </list>
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: IObjectFactory.cs,v 1.7 2005/02/24 16:41:40 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <p>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            always return the same object?
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            Provides a measure of type safety by throwing an exception if the object is
            not of the required <see cref="T:System.Type"/>.
            </p>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            </summary>
            <remarks>
            <p>
            More specifically, checks the type of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the type
            of object that the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>The type of the object or null if not determinable.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance.
            </summary>
            <remarks>
            <p>
            In addition to being generally useful, typically this method is used to provide
            dependency injection functionality for objects that are instantiated outwith the
            control of a developer. A case in point is the way that the current (1.1)
            ASP.NET classes instantiate web controls... the instantiation takes place within
            a private method of a compiled page, and thus cannot be hooked into the
            typical Spring.NET IOC container lifecycle for dependency injection.
            </p>
            <note type="implementnotes">
            <p>
            Implementors should note that the behaviour expected of this method must be the same
            as the behaviour resulting from a call to the
            <see cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
            method using the <see cref="P:System.Type.FullName"/> of the <see cref="T:System.Type"/>
            of the supplied <paramref name="target"/> as the name of the object definition to
            look up.
            </p>
            <p>
            This allows developers to supply an object definition that has a <i>name</i> that
            is the same as the <see cref="P:System.Type.FullName"/> property of the object
            instances that are passed to this method (see example below).
            </p>
            </note>
            </remarks>
            <example>
            The following code snippet assumes that the instantiated factory instance
            has been configured with an object definition named
            '<i>ExampleNamespace.BusinessObject</i>' that has been configured to set the
            <c>Dao</c> property of any <c>ExampleNamespace.BusinessObject</c> instance
            to an instance of an appropriate implementation...
            <code language="C#">
            namespace ExampleNamespace
            {
                public class BusinessObject
                {
                    private IDao _dao;
            		
                    public BusinessObject() {}
            
                    public IDao Dao
                    {
            		    get { return _dao;	}
                        set { _dao = value; }
                    }
                }
            }
            </code>
            with the corresponding driver code looking like so...
            <code language="C#">
            IObjectFactory factory = GetAnIObjectFactoryImplementation();
            BusinessObject instance = new BusinessObject();
            factory.ConfigureObject(instance);
            // at this point the dependencies for the 'instance' object will have been resolved...
            </code>
            </example>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object definition for the <see cref="P:System.Type.FullName"/>
            property of the supplied <paramref name="target"/> instance.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the target object's dependencies could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <remarks>
            <p>
            In addition to being generally useful, typically this method is used to provide
            dependency injection functionality for objects that are instantiated outwith the
            control of a developer. A case in point is the way that the current (1.1)
            ASP.NET classes instantiate web controls... the instantiation takes place within
            a private method of a compiled page, and thus cannot be hooked into the
            typical Spring.NET IOC container lifecycle for dependency injection.
            </p>
            </remarks>
            <example>
            The following code snippet assumes that the instantiated factory instance
            has been configured with an object definition named
            '<i>ExampleNamespace.BusinessObject</i>' that has been configured to set the
            <c>Dao</c> property of any <c>ExampleNamespace.BusinessObject</c> instance
            to an instance of an appropriate implementation...
            <code language="C#">
            namespace ExampleNamespace
            {
                public class BusinessObject
                {
                    private IDao _dao;
            		
                    public BusinessObject() {}
            
                    public IDao Dao
                    {
            		    get { return _dao;	}
                        set { _dao = value; }
                    }
                }
            }
            </code>
            with the corresponding driver code looking like so...
            <code language="C#">
            IObjectFactory factory = GetAnIObjectFactoryImplementation();
            BusinessObject instance = new BusinessObject();
            factory.ConfigureObject(instance, "object_definition_name");
            // at this point the dependencies for the 'instance' object will have been resolved...
            </code>
            </example>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object definition for the supplied <paramref name="name"/>.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the target object's dependencies could not be created.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectFactory.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            <p>
            This is the indexer for the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this object factory contains an object definition with the given name.
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            <note>
            Ignores any singleton objects that have been registered by other means
            than object definitions.
            </note>
            </remarks>
            <param name="name">The name of the object to look for.</param>
            <returns>
            True if this object factory contains an object definition with the given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or null
            for all object names.
            </param>
            <remarks>
            <p>
            Will not consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            as the type of their created objects is not known before instantiation.
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. Typically, the results
            of this method call will be the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.IListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.IHierarchicalObjectFactory">
            <summary>
            Sub-interface implemented by object factories that can be part of a hierarchy.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.IHierarchicalObjectFactory.ParentObjectFactory">
            <summary>
            Return the parent object factory, or null if there is none.
            </summary>
            <value>
            The parent object factory, or null if there is none.
            </value>
        </member>
        <member name="T:Spring.Context.IMessageSource">
            <summary>
            Interface to be implemented by objects that can resolve messages.
            </summary>
            <remarks>
            <p> 
            This enables parameterization and internationalization of messages.
            </p>
            <p>
            Spring.NET provides one out-of-the-box implementation for production use:
            <ul>
            <li><see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.</li>
            </ul>
            </p>
            <p>
            The lookup name that is passed as a parameter to many of the methods declared on this interface
            is typically a sort of "fully qualified name" meaning projectname.namespace.resourcefile-basename
            For example a project name "MyApp" with a resource files named res.resx in the
            MyWinforms namespace would be "MyApp.MyWinforms.res" 
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: IMessageSource.cs,v 1.6 2005/02/20 11:57:05 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns the resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> object that represents the
            culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>Try to resolve the message using all the attributes contained within the
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> argument that was passed in.
            </summary>
            <remarks>
            <note type="caution">
            We must throw a <see cref="T:Spring.Context.NoSuchMessageException"/> on this method
            since at the time of calling this method we aren't able to determine if the
            <see cref="P:Spring.Context.IMessageSourceResolvable.DefaultMessage"/> property of
            the supplied resolvable is null or not.
            </note>
            </remarks>
            <param name="resolvable">
            The value object storing attributes required to properly resolve a message.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message wasn't found.
            </exception>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetResourceObject(System.String)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            value to obtain a resource.
            </remarks>
            <param name="name">The name (index) of the resource object to return.</param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <param name="name">The name (index) of the resource object to return.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.IMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied</param>
            <param name="objectName">The base name of the object to use for key lookup</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
        </member>
        <member name="T:Spring.Objects.Events.IEventRegistry">
            <summary>
            Interface to be implemented by all event repositories.
            </summary>
            <author>Griffin Caprio</author>
            <version>$Id: IEventRegistry.cs,v 1.2 2005/02/17 23:02:34 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.PublishEvents(System.Object)">
            <summary>
            Publishes <b>all</b> events of the source object.
            </summary>
            <param name="sourceObject">
            The source object containing events to publish.
            </param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
        </member>
        <member name="M:Spring.Objects.Events.IEventRegistry.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to published events of a all objects of a given type, if the subscriber
            implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
        </member>
        <member name="M:Spring.Context.IApplicationContext.PublishEvent(Spring.Context.ApplicationEventArgs)">
            <summary>
            Notify all listeners registered with this application of an 
            application event.
            </summary>
            <remarks>
            <note>
            You may publish application-specific
            <see cref="T:Spring.Context.ApplicationEventArgs"/>.
            </note>
            </remarks>
            <param name="eventArgs">The event to publish.</param>
        </member>
        <member name="E:Spring.Context.IApplicationContext.ContextRefreshed">
            <summary>
            Occurs when the context is refreshed.
            </summary>
        </member>
        <member name="E:Spring.Context.IApplicationContext.ContextClosed">
            <summary>
            Occurs when the context is (about to be) closed.
            </summary>
        </member>
        <member name="P:Spring.Context.IApplicationContext.StartupDateMilliseconds">
            <summary>
            Return the timestamp when this context was first loaded.
            </summary>
            <returns>
            The timestamp (milliseconds) when this context was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.IApplicationContext.StartupDate">
            <summary>
            Returns the date and time this context was first loaded.
            </summary>
            <returns>
            The <see cref="T:System.DateTime"/> representing when this context was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.IApplicationContext.ParentApplicationContext">
            <summary>
            Gets and sets the parent context, or null if there is no parent,
            and this is the root of the context hierarchy.
            </summary>
            <returns>The parent context, or null if there is no parent.</returns>
        </member>
        <member name="P:Spring.Context.IApplicationContext.DisplayName">
            <summary>
            Gets and sets a friendly name for this context.
            </summary>
            <returns>
            A display name for this context.
            </returns>
        </member>
        <member name="M:Spring.Context.IConfigurableApplicationContext.AddObjectFactoryPostProcessor(Spring.Objects.Factory.Config.IObjectFactoryPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            that will get applied to the internal object factory of this application context
            on refresh, before any of the object definitions are evaluated.
            </summary>
            <remarks>
            <p>
            To be invoked during context configuration.
            </p>
            </remarks>
            <param name="objectFactoryPostProcessor">
            The factory processor to register.
            </param>
        </member>
        <member name="M:Spring.Context.IConfigurableApplicationContext.Refresh">
            <summary>
            Load or refresh the persistent representation of the configuration,
            which might an XML file, properties file, or relational database schema.
            </summary>
            <exception cref="T:Spring.Context.ApplicationContextException">
            If the configuration cannot be loaded.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object factory could not be initialized.
            </exception>
        </member>
        <member name="P:Spring.Context.IConfigurableApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
            <remarks>
            Can be used to access specific functionality of the factory.
            <note type="caution">
            This is just guaranteed to return a non-null instance
            <i>after</i> the context has been refreshed at least once.
            </note>
            <note type="caution">
            Do not use this to post-process the object factory; singletons
            will already have been instantiated before. Use a
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            to intercept the object factory setup process before objects get touched.
            </note>
            </remarks>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.MessageSourceObjectName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext.log">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext._messageSource">
            <summary>
            Message source we delegate our implementation of this interface to.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.AbstractApplicationContext._eventRegistry">
            <summary>
            Event registry we delegate our implementation of this interface to.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.#ctor">
            <summary>
            Creates a new AbstractApplicationContext with no parent.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Create a new AbstractApplicationContext with the given parent context.
            </summary>
            <param name="parentApplicationContext">
            The parent application context.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.RefreshObjectFactory">
            <summary>
            Subclasses must implement this method to performa the actual configuration loading.
            </summary>
            <remarks>
            <p>
            This method is invoked by
            <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/>, before
            any other initialization occurs.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered while refreshing the object factory.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetInternalParentObjectFactory">
            <summary>
            Return the internal object factory of the parent context if it implements
            <see cref="T:Spring.Context.IConfigurableApplicationContext"/>; else, return the
            parent context itself.
            </summary>
            <returns>The parent context's object factory, or the parent itself.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its standard
            initialization.
            </summary>
            <remarks>
            <p>
            All object definitions will have been loaded, but no objects
            will have been instantiated yet. This allows for registering special
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s etc in certain
            <see cref="T:Spring.Context.IApplicationContext"/> implementations.
            </p>
            </remarks>
            <param name="objectFactory">
            The object factory used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">In the case of errors.</exception>.
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.OnRefresh">
            <summary>
            Template method which can be overridden to add context-specific refresh work.
            Called on initialization of special objects, before instantiation of singletons.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.invokeObjectFactoryPostProcessors">
            <summary>
            Instantiate and invoke all registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/> objects,
            respecting explicit order if given.
            </summary>
            <remarks>
            <note type="caution">
            Must be called before singleton instantiation.
            </note>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">In the case of errors.</exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.InitMessageSource">
            <summary>
            Initializes the main message source for this context.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.AddListener(Spring.Context.IApplicationListener)">
            <summary>
            Adds a listener to the multicaster.
            </summary>
            <param name="applicationListener">The listener to add.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PublishEvent(Spring.Context.ApplicationEventArgs)">
            <summary>
            Publish the given event to all listeners.
            </summary>
            <remarks>
            <note>
            Listeners get initialized after the message source, to be able
            to access it within listener implementations. Thus, message source
            implementations cannot publish events.
            </note>
            </remarks>
            <param name="eventArgs">
            The event arguments to publish. The event may be application-specific,
            or a standard framework event.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.AddObjectFactoryPostProcessor(Spring.Objects.Factory.Config.IObjectFactoryPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            that will get applied to the internal object factory of this application context
            on refresh, before any of the object definitions are evaluated.
            </summary>
            <remarks>
            <p>
            To be invoked during context configuration.
            </p>
            </remarks>
            <param name="objectFactoryPostProcessor">
            The factory processor to register.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Refresh">
            <summary>
            Load or refresh the persistent representation of the configuration,
            which might an XML file, properties file, or relational database schema.
            </summary>
            <exception cref="T:Spring.Context.ApplicationContextException">
            If the configuration cannot be loaded.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object factory could not be initialized.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Dispose">
            <summary>
            Closes this context.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or null
            for all object names.
            </param>
            <remarks>
            <p>
            Will not consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            as the type of their created objects is not known before instantiation.
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. Typically, the results
            of this method call will be the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this object factory contains an object definition with the given name.
            </summary>
            <remarks>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            <note>
            Ignores any singleton objects that have been registered by other means
            than object definitions.
            </note>
            </remarks>
            <param name="name">The name of the object to look for.</param>
            <returns>
            True if this object factory contains an object definition with the given name.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            Provides a measure of type safety by throwing an exception if the object is
            not of the required <see cref="T:System.Type"/>.
            </p>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <p>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            always return the same object?
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            More specifically, checks the type of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the type
            of object that the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>The type of the object or null if not determinable.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ConfigureObject(System.Object)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns the resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> object that represents the
            culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary> Try to resolve the message using all the attributes contained within the
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> argument that was passed in.
            </summary>
            <remarks>
            <note type="caution">
            We must throw a <see cref="T:Spring.Context.NoSuchMessageException"/> on this method
            since at the time of calling this method we aren't able to determine if the
            <see cref="P:Spring.Context.IMessageSourceResolvable.DefaultMessage"/> property of
            the supplied resolvable is null or not.
            </note>
            </remarks>
            <param name="resolvable">
            The value object storing attributes required to properly resolve a message.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            if the message wasn't found
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Spring#Context#IMessageSource#GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <param name="name">The name (index) of the resource object to return.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Spring#Context#IMessageSource#GetResourceObject(System.String)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            value to obtain a resource.
            </remarks>
            <param name="name">The name (index) of the resource object to return.</param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <param name="name">The name (index) of the resource object to return.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.GetResourceObject(System.String)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            value to obtain a resource.
            </remarks>
            <param name="name">The name (index) of the resource object to return.</param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied</param>
            <param name="objectName">The base name of the object to use for key lookup</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.PublishEvents(System.Object)">
            <summary>
            Publishes <b>all</b> events of the source object.
            </summary>
            <param name="sourceObject">
            The source object containing events to publish.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractApplicationContext.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to published events of a all objects of a given type, if the subscriber
            implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
        </member>
        <member name="E:Spring.Context.Support.AbstractApplicationContext.NotifyListeners">
            <summary>
            Occurs when listeners need to be notified of an application event.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.MessageSource">
            <summary>
            The <see cref="T:Spring.Context.IMessageSource"/> property for this context.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectFactoryPostProcessors">
            <summary>
            Returns the list of the object postprocessors that will get applied to the 
            objects created with this factory.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
            <remarks>
            Can be used to access specific functionality of the factory.
            <note type="caution">
            This is just guaranteed to return a non-null instance
            <i>after</i> the context has been refreshed at least once. Do not use this to post-process the object factory; singletons
            will already have been instantiated before. Use an
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            to intercept the object factory setup process before objects get touched.
            </note>
            </remarks>
        </member>
        <member name="E:Spring.Context.Support.AbstractApplicationContext.ContextRefreshed">
            <summary>
            Occurs when the context is refreshed.
            </summary>
        </member>
        <member name="E:Spring.Context.Support.AbstractApplicationContext.ContextClosed">
            <summary>
            Occurs when the context is (about to be) closed.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.StartupDateMilliseconds">
            <summary>
            Return the timestamp when this context was first loaded.
            </summary>
            <returns>
            The timestamp (milliseconds) when this context was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.StartupDate">
            <summary>
            Returns the date and time this context was first loaded.
            </summary>
            <returns>
            The <see cref="T:System.DateTime"/> representing when this context was first loaded.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ParentApplicationContext">
            <summary>
            Gets and sets the parent context, or null if there is no parent,
            and this is the root of the context hierarchy.
            </summary>
            <returns>The parent context, or null if there is no parent.</returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.DisplayName">
            <summary>
            Gets and sets a friendly name for this context.
            </summary>
            <returns>
            A display name for this context.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            <p>
            This is the indexer for the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.AbstractApplicationContext.ParentObjectFactory">
            <summary>
            Return the parent object factory, or null if there is none.
            </summary>
            <value>
            The parent object factory, or null if there is none.
            </value>
        </member>
        <member name="T:Spring.Context.Support.AbstractMessageSource">
            <summary>
            Abstract implementation of the <see cref="T:Spring.Context.IHierarchicalMessageSource"/>
            interface, making it easy to implement a custom <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <remarks>
            <p>
            Subclasses must implement the abstract
            <see cref="M:Spring.Context.Support.AbstractMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)"/>
            method.
            </p>
            <p>
            Supports not only <see cref="T:Spring.Context.IMessageSourceResolvable"/> as primary messages
            but also resolution of message arguments that are in turn
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> instances themselves.
            </p>
            <p>
            This class does not implement caching, thus subclasses can dynamically change
            messages over time.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: AbstractMessageSource.cs,v 1.9 2005/03/30 16:59:41 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Context.IHierarchicalMessageSource">
            <summary>
            Sub-interface of <see cref="T:Spring.Context.IMessageSource"/> to be implemented by
            objects that can resolve messages hierarchically.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IHierarchicalMessageSource.cs,v 1.3 2005/02/17 23:02:11 springboy Exp $</version>
        </member>
        <member name="P:Spring.Context.IHierarchicalMessageSource.ParentMessageSource">
            <summary>
            The parent message source used to try and resolve  messages that this
            object can't resolve.
            </summary>
            <remarks>
            <p>
             If null no further resolution is possible.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Subclasses must implement this method to resolve a message.
            Returns a string format.
            </summary>
            <param name="code">The code of the message to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
            <returns>A string format or null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Subclasses must implement this method to resolve an object. Returns
            an object.
            </summary>
            <param name="code">The code of the object to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
            <returns>The resolved object or null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied.</param>
            <param name="objectName">The base name of the object to use for key lookup.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for the object.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.AbstractMessageSource"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws an
            exception or returns the resource name, depending on the value of the
            <see cref="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage"/> property.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws an
            exception or returns the resource name, depending on the value of the
            <see cref="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage"/> property.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> object that represents the
            culture for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws an
            exception or returns the resource name, depending on the value of the
            <see cref="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage"/> property.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>Try to resolve the message.</summary>
            <param name="name">The name of the resource to get.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <param name="args">
            The array of arguments that will be filled in for params within the message, or null if none.
            Params within a message should be referenced using the same syntax as for
            the <see cref="M:System.String.Format(System.String,System.Object[])"/> method.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws an
            exception or returns the resource name, depending on the value of the
            <see cref="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage"/> property.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>Try to resolve the message using all the attributes contained within the
            <see cref="T:Spring.Context.IMessageSourceResolvable"/> argument that was passed in.
            </summary>
            <param name="resolvable">
            The value object storing attributes required to properly resolve a message.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that represents the culture
            for which the resource is localized.
            </param>
            <returns>
            The resolved message if the lookup was successful. Otherwise, it either throws
            an exception or returns resource name, depending on the implementation.
            </returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">
            If the message wasn't found.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetResourceObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <remarks>
            This method uses <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            value to obtain a resource.
            </remarks>
            <param name="name">The name (index) of the resource object to return.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetResourceObject(System.String)">
            <summary>
            Get a localized resource object, i.e. Icon, Image, etc. given the
            resource name.
            </summary>
            <param name="name">The name (index) of the resource object to return.</param>
            <returns>The resolved object, null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied</param>
            <param name="objectName">The base name of the object to use for key lookup</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for object.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.GetInternalMessage(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Resolves message for name and arguments
            </summary>
            <param name="name">name of message to use</param>
            <param name="args">formatting arguments for message</param>
            <param name="cultureInfo">Culture to search for message</param>
            <returns>message</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.ResolveArguments(System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Resolves arguments.
            </summary>
            <param name="arguments">Arguments to resolve</param>
            <param name="cultureInfo">Culture Info to use to resolve arguments</param>
            <returns>Resolved arguments</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractMessageSource.CodeAsMessage(System.String)">
            <summary>
            Wraps code with markers to make it easier to notice missing messages.
            </summary>
            <param name="code">Code to return as message</param>
            <returns>Code wrapped with markers to make it more visible.</returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractMessageSource.UseCodeAsDefaultMessage">
            <summary>
            Set whether to use the message code as default message
            instead of throwing a <see cref="T:Spring.Context.NoSuchMessageException"/>.
            </summary>
            <remarks>
            <p>
            Useful for development and debugging. Default is false.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Context.Support.AbstractMessageSource.ParentMessageSource">
            <summary>
            The parent message source used to try and resolve  messages that this
            object can't resolve.
            </summary>
            <remarks>
            <p>
             If null no further resolution is possible.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Context.Support.AbstractXmlApplicationContext">
            <summary>
            Convenient abstract superclass for <see cref="T:Spring.Context.IApplicationContext"/>
            implementations drawing their configuration from XML documents containing object
            definitions as understood by an 
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: AbstractXmlApplicationContext.cs,v 1.5 2005/02/27 14:49:08 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.AbstractXmlApplicationContext"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.AbstractXmlApplicationContext"/> class
            with the given parent context.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="parentContext">The parent context.</param>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.GetConfigurationLocations">
            <summary>
            Return an array of resource locations, referring to the XML object
            definition files that this context should be built with.
            </summary>
            <returns>An array of resource locations, or null if none.</returns>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory">
            <summary>
            Subclasses must implement this method to performa the actual configuration loading.
            </summary>
            <remarks>
            <p>
            This method is invoked by
            <see cref="M:Spring.Context.Support.AbstractApplicationContext.Refresh"/>, before
            any other initialization occurs.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors encountered while refreshing the object factory.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.InitObjectDefinitionReader(Spring.Objects.Factory.Xml.XmlObjectDefinitionReader)">
            <summary>
            Initialize the object definition reader used for loading the object
            definitions of this context.
            </summary>
            <remarks>
            <p>
            The default implementation is null. Can be overridden in subclasses, e.g. for
            turning off XML validation or using a different
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> implementation.
            </p>
            </remarks>
            <param name="objectDefinitionReader">
            The object definition reader used by this context.
            </param>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.LoadObjectDefinitions(Spring.Objects.Factory.Xml.XmlObjectDefinitionReader)">
            <summary>
            Load the object definitions with the given 
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>.
            </summary>
            <remarks>
            <p>
            The lifecycle of the object factory is handled by
            <see cref="M:Spring.Context.Support.AbstractXmlApplicationContext.RefreshObjectFactory"/>;
            therefore this method is just supposed to load and/or register object definitions.
            </p>
            </remarks>
            <param name="objectDefinitionReader">The reader containing object definitions.</param>
            <exception cref="T:Spring.Objects.ObjectsException">In case of object registration errors.</exception>
            <exception cref="T:System.IO.IOException">If the required XML document isn't found</exception>
        </member>
        <member name="M:Spring.Context.Support.AbstractXmlApplicationContext.CreateObjectFactory">
            <summary>
            Create the object factory for this context.
            </summary>
            <remarks>
            <p>
            Default implementation creates a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> with the
            internal object factory of this context's parent as parent object factory.
            </p>
            </remarks>
            <returns>The object factory for this context.</returns>
        </member>
        <member name="P:Spring.Context.Support.AbstractXmlApplicationContext.ObjectFactory">
            <summary>
            Subclasses must return their internal object factory here.
            </summary>
            <remarks>
            <p>		
            They should implement the lookup efficiently, so that it can be called 
            repeatedly without a performance penalty.
            </p>
            </remarks>
            <returns>The internal object factory for the application context.</returns> 
        </member>
        <member name="T:Spring.Context.Support.ApplicationContextAwareProcessor">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> implementation that
            passes the application context to object that implement the
            <see cref="T:Spring.Context.IApplicationContextAware"/> or
            <see cref="T:Spring.Context.IResourceLoaderAware"/> interfaces. 
            </summary>
            <remarks>
            <p>
            If both <see cref="T:Spring.Context.IApplicationContextAware"/> and
            <see cref="T:Spring.Context.IResourceLoaderAware"/> are implemented, 
            the latter is satisfied first.
            </p>
            <p>
            Application contexts will automatically register this with their
            underlying object factory. Applications do not use this directly.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ApplicationContextAwareProcessor.cs,v 1.4 2005/02/17 23:02:16 springboy Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectPostProcessor">
            <summary>
            Allows for custom modification of new object instances, e.g.
            checking for marker interfaces or wrapping them with proxies.
            </summary>
            <remarks>
            <p>
            Application contexts can auto-detect IObjectPostProcessor objects in their
            object definitions and apply them before any other objects get created.
            Plain object factories allow for programmatic registration of post-processors.
            </p>
            <p>
            Typically, post-processors that populate objects via marker interfaces
            or the like will implement PostProcessBeforeInitialization, and post-processors
            that wrap objects with proxies will normally implement PostProcessAfterInitialization.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: IObjectPostProcessor.cs,v 1.4 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values.
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="obj">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The the object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values. The returned object
            instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="obj">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationContextAwareProcessor"/> class.
            </summary>
            <param name="applicationContext">
            The <see cref="T:Spring.Context.IApplicationContext"/> that this instance
            will work with.
            </param>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.PostProcessAfterInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance <i>after</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values. The returned object
            instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="obj">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ApplicationContextAwareProcessor.PostProcessBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply this <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to the given new object instance <i>before</i> any object initialization callbacks.
            </summary>
            <remarks>
            <p>
            The object will already be populated with property values.
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="obj">
            The new object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The the object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Context.Support.ApplicationObjectSupport">
            <summary>
            Convenient superclass for application objects that want to be aware of
            the application context, e.g. for custom lookup of collaborating object
            or for context-specific resource access. 
            </summary>
            <remarks>
            <p>
            It saves the application context reference and provides an initialization callback method.
            Furthermore, it offers numerous convenience methods for message lookup.
            </p>
            <p>
            There is no requirement to subclass this class: It just makes things
            a little easier if you need access to the context, e.g. for access to
            file resources or to the message source. Note that many application
            objects do not need to be aware of the application context at all,
            as they can receive collaborating objects via object references.
            </p>
            <p>
            Many framework classes are derived from this class, particularly within the web support.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: ApplicationObjectSupport.cs,v 1.4 2005/02/27 15:16:36 springboy Exp $</version>
        </member>
        <member name="T:Spring.Context.IApplicationContextAware">
            <summary>
            Interface to be implemented by any object that wishes to be notified
            of the <see cref="T:Spring.Context.IApplicationContext"/> that it runs in.
            </summary>
            <remarks>
            <p>
            Implementing this interface makes sense for example when an object
            requires access to a set of collaborating objects. Note that configuration
            via object references is preferable to implementing this interface just
            for object lookup purposes.
            </p>
            <p>
            This interface can also be implemented if an object needs access to file
            resources, i.e. wants to call GetResource, or access to the
            <see cref="T:Spring.Context.IMessageSource"/>.
            However, it is preferable to implement the more specific 
            <see cref="T:Spring.Context.IResourceLoaderAware"/>
            interface respectively receive a reference to the
            <see cref="T:Spring.Context.IMessageSource"/> object in that
            scenario.
            </p>
            <p>
            Note that <see cref="T:Spring.Core.IO.IResource"/> dependencies can also be 
            exposed as object properties of the <see cref="T:Spring.Core.IO.IResource"/> type,
            populated via strings with automatic type conversion by an object factory. This
            removes the need for implementing any callback interface just for the purpose
            of accessing a specific file resource.
            </p>
            <p>
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/>
            is a convenience implementation of this interface for your application objects.
            </p>
            <p>
            For a list of all object lifecycle methods, see the 
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IApplicationContextAware.cs,v 1.3 2005/02/17 23:02:11 springboy Exp $</version>
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            <version>$Id: IApplicationContextAware.cs,v 1.3 2005/02/17 23:02:11 springboy Exp $</version>
        </member>
        <member name="P:Spring.Context.IApplicationContextAware.ApplicationContext">
            <summary>
            Set the <see cref="T:Spring.Context.IApplicationContext"/> that this object runs in.
            </summary>
            <remarks>
            Normally this call will be used to initialize the object.
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/> property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of application context initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="F:Spring.Context.Support.ApplicationObjectSupport._applicationContext">
            <summary>
            The <see cref="T:Spring.Context.IApplicationContext"/> that this object runs in.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ApplicationObjectSupport._messageSourceAccessor">
            <summary>
            A <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> for easy message access.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/> class.
            </summary>
            <remarks>
            <p>
            This is the constructor for usage as a helper to delegate to.
            </p>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="applicationContext">
            The <see cref="T:Spring.Context.IApplicationContext"/> that this object runs in.
            </param>
        </member>
        <member name="M:Spring.Context.Support.ApplicationObjectSupport.InitApplicationContext">
            <summary>
            Subclasses can override this for custom initialization behavior.
            </summary>
            <remarks>
            <p>
            Gets called by <see cref="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext"/>
            after setting the context instance.
            </p>
            <note type="caution">
            Does not get called on reinitialization of the context.
            </note>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            In the case of any initialization errors.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by application context methods.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.RequiredType">
            <summary>
            Determine the context class that any context passed to the
            <see cref="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext"/>
            must be an instance of.
            </summary>
            <returns>
            The <see cref="T:Spring.Context.IApplicationContext"/> <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.MessageSourceAccessor">
            <summary>
            Return a <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> for the
            application context used by this object, for easy message access.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ApplicationObjectSupport.ApplicationContext">
            <summary>
            Set the <see cref="T:Spring.Context.IApplicationContext"/> that this object runs in.
            </summary>
            <remarks>
            Initializes the context when set.
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked after the setting of any
            <see cref="T:Spring.Context.IResourceLoaderAware"/>'s
            <see cref="P:Spring.Context.IResourceLoaderAware.ResourceLoader"/> property.
            </p>
            </remarks>
            <exception cref="T:Spring.Context.ApplicationContextException">
            When passed an unexpected <see cref="T:Spring.Context.IApplicationContext"/> implementation
            instance that is not compatible with the <see cref="T:System.Type"/> defined by
            <see cref="P:Spring.Context.Support.ApplicationObjectSupport.RequiredType"/>. 
            Also, thrown when trying to re-initialize with a different
            <see cref="T:Spring.Context.IApplicationContext"/> than was originally
            used.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If thrown by any application context methods.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectInitializationException"/>
        </member>
        <member name="T:Spring.Context.Support.ContextHandler">
            <summary>
            Creates an <see cref="T:Spring.Context.IApplicationContext"/> instance
            using context definitions supplied in a custom configuration and
            configures the <see cref="T:Spring.Context.Support.ContextRegistry"/>
            with that instance.
            </summary>
            <remarks>
            Implementations of <see cref="T:Spring.Context.IApplicationContext"/>
            should provide the following two constructors:
            <list type="number">
            <item>
            <description>A constructor that takes a string array of resource locations.</description>
            </item>
            <item>
            <description>A constructor that takes a string array of resource locations and
            a reference to a parent application context.
            </description>
            </item>
            </list>
            </remarks>
            <author>Mark Pollack</author>
            <author>Aleksandar Seovic</author>
            <version>$Id: ContextHandler.cs,v 1.3 2005/03/30 16:59:42 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.#ctor">
            <summary>
            Creates a new instance of the ContextLocatorHandler class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ContextHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an <see cref="T:Spring.Context.IApplicationContext"/> instance
            using the context definitions supplied in a custom
            configuration section.  This instance is also used to configure
            the <see cref="T:Spring.Context.Support.ContextRegistry"/>.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is a null reference.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            An <see cref="T:Spring.Context.IApplicationContext"/> instance
            populated with the object definitions supplied in the configuration
            section.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.ContextElement">
            <summary>
            XmlElement for the current context.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.ContextType">
            <summary>
            Gets context type specified in the type attribute of the context element.
            </summary>
            <remarks>
            If attribute is not defined it defaults to <see cref="T:Spring.Context.Support.XmlApplicationContext"/>.
            </remarks>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.ContextName">
            <summary>
            Gets context name from the config element.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.IsLazy">
            <summary>
            Returns true if context should be lazily initialized.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.ContextHandler.Resources">
            <summary>
            Returns list of resources containing object definitions for this context.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.ContextElement">
            <summary>
            Defines an IApplicationContext
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.NameAttribute">
            <summary>
            Specifes a context name.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.TypeAttribute">
            <summary>
            Specifes a <see cref="T:System.Type"/>. Must be fully assembly qualified.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.LazyAttribute">
            <summary>
            Specifes whether context should be lazy initialized.
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.ResourceElement">
            <summary>
            Defines a <see cref="T:Spring.Core.IO.IResource"/>
            </summary>
        </member>
        <member name="F:Spring.Context.Support.ContextHandler.ContextSchema.URIAttribute">
            <summary>
            Specifies the URI for the IResource
            </summary>
        </member>
        <member name="T:Spring.Context.Support.ContextRegistry">
            <summary> 
            Simplifies access to application context. 
            </summary> 
            <author>Mark Pollack</author>
            <author>Aleksandar Seovic</author>
            <version>$Id: ContextRegistry.cs,v 1.3 2005/02/17 23:02:17 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.RegisterContext(System.String,Spring.Context.IApplicationContext)">
            <summary> 
            Register an instance of an <see cref="T:Spring.Context.IApplicationContext"/>. 
            </summary> 
            <remarks>
            This is usually called via a <see cref="T:Spring.Context.Support.ContextHandler"/>
            inside a .NET application configuration file. 
            </remarks>
            <param name="name">The name that will be used to look context up.</param>
            <param name="context">The application context to be registered.</param>         
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.GetContext(System.String)">
            <summary>
            Returns context based on specified name.
            </summary>
            <param name="name">The context name.</param>
            <returns>The specified context.</returns>
            <exception cref="T:System.ArgumentException">
            If no context exists for the specified name.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ContextRegistry.GetContext">
            <summary>
            Returns the root application context.
            </summary>
            <returns>The root application context.</returns>
        </member>
        <member name="T:Spring.Context.Support.DefaultMessageResolvable">
            <summary>
            Default implementation of the <see cref="T:Spring.Context.IMessageSourceResolvable"/> interface.
            </summary>
            <remarks>
            <p>
            Provides easy ways to store all the necessary values needed to resolve messages from
            an <see cref="T:Spring.Context.IMessageSource"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: DefaultMessageResolvable.cs,v 1.3 2005/02/17 23:02:18 springboy Exp $</version>
        </member>
        <member name="T:Spring.Context.IMessageSourceResolvable">
            <summary>
            Interface for objects that are suitable for message resolution in a
            <see cref="T:Spring.Context.IMessageSource"/>.
            </summary>
            <remarks>
            <p>
            <a href="http://www.springframework.net/">Spring.NET's</a> own validation error classes
            implement this interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IMessageSourceResolvable.cs,v 1.3 2005/03/30 16:59:36 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Context.IMessageSourceResolvable.GetCodes">
            <summary>
            Return the codes to be used to resolve this message, in the order that
            they should get tried. The last code will therefore be the default one.
            </summary>
            <returns>
            A <see cref="T:System.String"/> array of codes which are associated with this message.
            </returns>
        </member>
        <member name="M:Spring.Context.IMessageSourceResolvable.GetArguments">
            <summary>
            Return the array of arguments to be used to resolve this message.
            </summary>
            <returns>
            An array of objects to be used as parameters to replace placeholders within
            the message text.
            </returns>
        </member>
        <member name="P:Spring.Context.IMessageSourceResolvable.DefaultMessage">
            <summary>
            Return the default message to be used to resolve this message.
            </summary>
            <returns>
            The default message, or null if no default.
            </returns>
        </member>
        <member name="F:Spring.Context.Support.DefaultMessageResolvable._codes">
            <summary>
            Codes to associate
            </summary>
        </member>
        <member name="F:Spring.Context.Support.DefaultMessageResolvable._arguments">
            <summary>
            Arguments for the message
            </summary>
        </member>
        <member name="F:Spring.Context.Support.DefaultMessageResolvable._defaultMessage">
            <summary>
            Default Message
            </summary>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.#ctor(System.String[],System.Object[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageResolvable"/> class
            using multiple codes.
            </summary>
            <param name="codes">The message codes to be resolved.</param>
            <param name="arguments">
            The arguments used to resolve the supplied <paramref name="codes"/>.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.#ctor(System.String[],System.Object[],System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageResolvable"/> class
            using multiple codes and a default message.
            </summary>
            <param name="codes">The message codes to be resolved.</param>
            <param name="arguments">
            The arguments used to resolve the supplied <paramref name="codes"/>.
            </param>
            <param name="defaultMessage">
            The default message used if no code could be resolved.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.#ctor(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Copy constructor: creates a new instance of the
            <see cref="T:Spring.Context.Support.DefaultMessageResolvable"/> class from another
            resolvable.
            </summary>
            <param name="resolvable">
            The <see cref="T:Spring.Context.IMessageSourceResolvable"/> to be copied.
            </param>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.Accept(Spring.Context.Support.MessageSourceResolvableVisitor)">
            <summary>
            Calls the visit method on the visitor class to output a string version of this class.
            </summary>
            <param name="visitor">The visitor to use</param>
            <returns>A <see cref="T:System.String"/> representation of this
            <see cref="T:Spring.Context.IMessageSourceResolvable"/>.</returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.GetCodes">
            <summary>
            Return the codes to be used to resolve this message, in the order that
            they should get tried. The last code will therefore be the default one.
            </summary>
            <returns>
            A <see cref="T:System.String"/> array of codes which are associated with this message.
            </returns>
        </member>
        <member name="M:Spring.Context.Support.DefaultMessageResolvable.GetArguments">
            <summary>
            Return the array of arguments to be used to resolve this message.
            </summary>
            <returns>
            An array of objects to be used as parameters to replace placeholders within
            the message text.
            </returns>
        </member>
        <member name="P:Spring.Context.Support.DefaultMessageResolvable.LastCode">
            <summary>
            Return the default code of this resolvable, i.e. the last one in the 
            codes array.
            </summary>
            <returns>The default code of this resolvable, i.e. the last one in the 
            codes array.</returns>
        </member>
        <member name="P:Spring.Context.Support.DefaultMessageResolvable.DefaultMessage">
            <summary>
            Return the default message to be used to resolve this message.
            </summary>
            <returns>
            The default message, or null if no default.
            </returns>
        </member>
        <member name="T:Spring.Context.Support.DefaultSectionHandler">
            <summary>
            Default section handler that can handle any configuration section.
            </summary>
            <remarks>
            <p>
            Simply returns the configuration section as an <see cref="T:System.Xml.XmlElement"/>.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: DefaultSectionHandler.cs,v 1.2 2005/02/17 23:02:18 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.DefaultSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Returns the configuration section as an <see cref="T:System.Xml.XmlElement"/>
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is a null reference.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>Config section as XmlElement.</returns>
        </member>
        <member name="T:Spring.Context.Support.MessageSourceAccessor">
            <summary>
            Helper class for easy access to messages from an <see cref="T:Spring.Context.IMessageSource"/>,
            providing various overloaded <c>GetMessage</c> methods.
            </summary>
            <remarks> 
            Available from <see cref="T:Spring.Context.Support.ApplicationObjectSupport"/>, but also
            reusable as a standalone helper to delegate to in application objects.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: MessageSourceAccessor.cs,v 1.4 2005/02/17 23:02:18 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.#ctor(Spring.Context.IMessageSource)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> class
            that uses the current <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            for all locale specific lookups.
            </summary>
            <param name="messageSource">
            The <see cref="T:Spring.Context.IMessageSource"/> to use to locate messages.
            </param>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.#ctor(Spring.Context.IMessageSource,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceAccessor"/> class
            </summary>
            <param name="messageSource">
            The <see cref="T:Spring.Context.IMessageSource"/> to use to locate messages.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for locale specific messages.
            </param>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String)">
            <summary>
            Retrieve the message for the given code and the default Locale.
            </summary>
            <param name="code">The code of the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieve the message for the given code and the given Locale.
            </summary>
            <param name="code">The code of the message.</param>       
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The message.</returns>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Object[])">
            <summary>
            Retrieve the message for the given code and the default Locale.
            </summary>
            <param name="code">The code of the message.</param>
            <param name="args">The arguments for the message, or null if none.</param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">If the message could not be found.</exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Retrieve the message for the given code and the given locale.
            </summary>
            <param name="code">The code of the message.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <param name="args">The arguments for the message, or null if none.</param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">If the message could not be found.</exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Retrieve the given <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            (e.g. an ObjectError instance)
            </summary>
            <param name="resolvable">The <see cref="T:Spring.Context.IMessageSourceResolvable"/>.</param>
            <returns>The message.</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">If the message could not be found.</exception>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceAccessor.GetMessage(Spring.Context.IMessageSourceResolvable,System.Globalization.CultureInfo)">
            <summary>
            Retrieve the given <see cref="T:Spring.Context.IMessageSourceResolvable"/>
            (e.g. an ObjectError instance) in the given locale.
            </summary>
            <param name="resolvable">The <see cref="T:Spring.Context.IMessageSourceResolvable"/>.</param>     
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>the message</returns>
            <exception cref="T:Spring.Context.NoSuchMessageException">If the message could not be found.</exception>
        </member>
        <member name="T:Spring.Context.Support.MessageSourceResolvableVisitor">
            <summary>
            Visitor class to represent <see cref="T:Spring.Context.IMessageSourceResolvable"/> 
            instances. Other methods can be added here to return different
            representations, including XML, CSV, etc..
            </summary>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: MessageSourceResolvableVisitor.cs,v 1.3 2005/02/17 23:02:18 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceResolvableVisitor.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.MessageSourceResolvableVisitor"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.MessageSourceResolvableVisitor.VisitMessageSourceResolvableString(Spring.Context.IMessageSourceResolvable)">
            <summary>
            Outputs the <see cref="T:Spring.Context.IMessageSourceResolvable"/> in string format
            </summary>
            <param name="resolvable">The <see cref="T:Spring.Context.IMessageSourceResolvable"/> to output</param>
        </member>
        <member name="T:Spring.Context.Support.ResourceSetMessageSource">
            <summary>
            <see cref="T:Spring.Context.IMessageSource"/> that access the resources with the
            specified keys, stored in .resx/.resource files.
            </summary>
            <author>Griffin Caprio (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: ResourceSetMessageSource.cs,v 1.11 2005/03/30 16:59:42 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IInitializingObject">
            <summary>
            Interface to be implemented by objects that need to react once all their
            properties have been set by an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </summary>
            <remarks>
            An implementation would perform custom initialization, or merely to check 
            that all mandatory properties have been set.
            <p>
            Note: generally, the use of the IInitializingObject can be avoided 
            (and by some people is discouraged). The Spring.Core library provides support 
            for a generic init-method, given to the object definition in the object 
            configuration store (be it XML, or a database, etcetera).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform initialization only
            possible when all object properties have been set and to throw an
            exception in the event of misconfiguration.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a given code by searching through each assembly name in the base names array.
            </summary>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The message from the resource set.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a given code by searching through each assembly name in the array.
            </summary>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The object from the resource set.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied</param>
            <param name="objectName">The base name of the object to use for the key lookup.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups. If null, uses
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>.
            </param>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.Resolve(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a code into a message format from the given base name.
            </summary>
            <param name="manager">The <see cref="T:System.Resources.ResourceManager"/> to search.</param>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The message from the resource file.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ResolveObject(System.Resources.ResourceManager,System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves a code into an object given a base name.
            </summary>
            <param name="manager">The <see cref="T:System.Resources.ResourceManager"/> to search.</param>
            <param name="code">The code to resolve.</param>      
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to use for lookups.
            </param>
            <returns>The object from the resource file.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.GetMessageFormat(System.Resources.ResourceSet,System.String)">
            <summary>
            Gets the message from the resource set for the given code.  Caches the code / message
            for future access.
            </summary>
            <param name="resourceSet">The <see cref="T:System.Resources.ResourceSet"/> to search.</param>
            <param name="code">The code to resolve.</param>
            <returns>The message for the code key.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the
            <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.</returns>
        </member>
        <member name="M:Spring.Context.Support.ResourceSetMessageSource.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied.
            </summary>
            <remarks>
            <p>
            The list may contain objects of type <see cref="T:System.String"/> or
            <see cref="T:System.Resources.ResourceManager"/>. <see cref="T:System.String"/> types
            are converted to <see cref="T:System.Resources.ResourceManager"/> instances using the notation
            resourcename, assembly partial name.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If the conversion from a <see cref="T:System.String"/> to a
            <see cref="T:System.Resources.ResourceManager"/> can't be performed.
            </exception>
        </member>
        <member name="P:Spring.Context.Support.ResourceSetMessageSource.ResourceManagers">
            <summary>
            The collection of ResourceManagers in the <see cref="T:Spring.Context.Support.ResourceSetMessageSource"/>.
            </summary>
        </member>
        <member name="T:Spring.Context.Support.StaticApplicationContext">
            <summary>
            <see cref="T:Spring.Context.IApplicationContext"/> that allows concrete registration of
            objects and messages in code, rather than from external configuration sources.
            </summary>
            <remarks>
            <p>
            Mainly useful for testing.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: StaticApplicationContext.cs,v 1.4 2005/02/17 23:02:31 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.#ctor">
            <summary>
            Creates a new instance of the StaticApplicationContext class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.#ctor(Spring.Context.IApplicationContext)">
            <summary>
            Creates a new instance of the StaticApplicationContext class.
            </summary>
            <param name="parentContext">The parent application context.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RefreshObjectFactory">
            <summary>
            Do nothing: we rely on callers to update our public methods.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RegisterSingleton(System.String,System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Register a singleton object with the default object factory.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="classType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="propertyValues">The property values for the singleton instance.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.RegisterPrototype(System.String,System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Registers a prototype object with the default object factory.
            </summary>
            <param name="name">The name of the prototype object.</param>
            <param name="classType">The <see cref="T:System.Type"/> of the prototype object.</param>
            <param name="propertyValues">The property values for the prototype instance.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticApplicationContext.AddMessage(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Associate the given message with the given code.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> that the message should be found within.
            </param>
            <param name="defaultMessage">The message associated with the lookup code.</param>
        </member>
        <member name="P:Spring.Context.Support.StaticApplicationContext.DefaultListableObjectFactory">
            <summary>
            The default <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/> implementation.
            </summary>
        </member>
        <member name="P:Spring.Context.Support.StaticApplicationContext.ObjectFactory">
            <summary>
            Return the internal object factory of this application context.
            </summary>
            <remarks>
            Can be used to access specific functionality of the factory.
            <note type="caution">
            This is just guaranteed to return a non-null instance
            <i>after</i> the context has been refreshed at least once.
            </note>
            <note type="caution">
            Do not use this to post-process the object factory; singletons
            will already have been instantiated before. Use a
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            to intercept the object factory setup process before objects get touched.
            </note>
            </remarks>
        </member>
        <member name="T:Spring.Context.Support.StaticMessageSource">
            <summary>
            Simple implementation of <see cref="T:Spring.Context.IMessageSource"/>
            that allows messages to be held in an object and added programmatically.
            </summary>
            <remarks>
            <p>
            Mainly useful for testing.
            </p>
            <p>
            This <see cref="T:Spring.Context.IMessageSource"/> supports internationalization.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: StaticMessageSource.cs,v 1.4 2005/02/17 23:02:31 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.#ctor">
            <summary>
            Creates a new instance of the StaticMessageSource class.
            </summary>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ResolveMessage(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves the input code, returning the associated message format.
            </summary>
            <param name="code">The code of the message to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
            <returns>A string format or null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ResolveObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Resolves the input code, returning the associated object.
            </summary>
            <param name="code">The code of the object to resolve.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
            <returns>The resolved object or null if not found.</returns>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ApplyResourcesToObject(System.Object,System.String,System.Globalization.CultureInfo)">
            <summary>
            Uses a ComponentResourceManager to apply resources to object properties.
            Resource key names are of the form objectName.propertyName
            </summary>
            <param name="value">An object that contains the property values to be applied.</param>
            <param name="objectName">The base name of the object to use for key lookup.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> in which to look for the object.
            </param>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.AddMessage(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Associate the given message format with the given code.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="messageFormat">The message format associated with this lookup code.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.AddObject(System.String,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Associate the given object with the code.
            </summary>
            <param name="code">The lookup code.</param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo"/> to resolve the code for.
            </param>
            <param name="o">The object associated with this lookup code.</param>
        </member>
        <member name="M:Spring.Context.Support.StaticMessageSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this message source.
            </summary>
            <returns>A <see cref="T:System.String"/> containing all messages.</returns>
        </member>
        <member name="T:Spring.Context.Support.XmlApplicationContext">
            <summary>
            Standalone XML application context read the context definition files
            from various resoures identified using URI notation.
            </summary>
            <remarks>
            <p>
            The resources that are supported are file, http, ftp, and assembly.  
            An example of the assembly resource would be
            assembly://AssemblyName/NameSpace/ResourceName. Refer to the
            reference documentation for additional URI syntax of 
            <see cref="T:Spring.Core.IO.IResource"/> locations.
            </p>
            <p>
            You can provide custom implementations of <see cref="T:Spring.Core.IO.IResource"/>
            and register them with any
            <see cref="T:Spring.Context.IApplicationContext"/> that inherits from
            <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>.
            <p>
            </p>
            Note: In case of multiple config locations, later object definitions will
            override ones defined in earlier loaded files. This can be leveraged to
            deliberately override certain object definitions via an extra XML file.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Griffin Caprio (.NET)</author>
            <version>$Id: XmlApplicationContext.cs,v 1.6 2005/02/17 23:02:32 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Spring.Context.Support.XmlApplicationContext"/>,
            loading the definitions from the given XML input stream identified via a URL.
            </summary>
            <param name="configurationLocation">The URL location.</param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String[])">
            <summary>
            Create a new <see cref="T:Spring.Context.Support.XmlApplicationContext"/>,
            loading the definitions from the given XML input streams identified via the
            supplied URLs.
            </summary>
            <param name="configurationLocations">The array of URL locations.</param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.#ctor(System.String[],Spring.Context.IApplicationContext)">
            <summary>
            Create a new <see cref="T:Spring.Context.Support.XmlApplicationContext"/>
            with the given parent, loading the definitions from the given XML input
            stream identified via a URL.
            </summary>
            <param name="configurationLocations">The array of URL locations.</param>
            <param name="parentContext">The parent context.</param>
        </member>
        <member name="M:Spring.Context.Support.XmlApplicationContext.GetConfigurationLocations">
            <summary>
            Return an array of resource locations, referring to the XML object
            definition files that this context should be built with.
            </summary>
            <returns>An array of resource locations, or null if none.</returns>
        </member>
        <member name="T:Spring.Context.ApplicationContextException">
            <summary>Exception thrown during application context initialization.</summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: ApplicationContextException.cs,v 1.3 2005/03/30 16:59:36 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.FatalObjectException">
            <summary>
            Thrown on an unrecoverable problem encountered in the
            objects namespace or sub-namespaces, e.g. bad class or field.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: FatalObjectException.cs,v 1.5 2004/09/28 07:53:45 springboy Exp $
            </version>
        </member>
        <member name="T:Spring.Objects.ObjectsException">
            <summary>
            Superclass for all exceptions thrown in the Objects namespace and sub-namespaces.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: ObjectsException.cs,v 1.6 2004/09/28 07:53:45 springboy Exp $
            </version>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor">
            <summary>Creates a new instance of the ObjectsException class.</summary>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectsException class. with the specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectsException class with the specified message
            and root cause.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FatalObjectException class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.FatalObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FatalObjectException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Context.ApplicationContextException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.ApplicationContextException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="T:Spring.Context.EventListenerAttribute">
            <summary>
            Marks an interface as being an event listener.
            </summary>
            <author>Griffin Caprio</author>
            <version>$Id: EventListenerAttribute.cs,v 1.2 2005/02/17 23:02:10 springboy Exp $</version>
        </member>
        <member name="M:Spring.Context.EventListenerAttribute.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.EventListenerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Spring.Context.ApplicationContextEventHandler">
            <summary>
            Delegate event handler for application context events.
            </summary>
        </member>
        <member name="T:Spring.Context.ApplicationEventHandler">
            <summary>
            Delegate event handler for application events.
            </summary>
        </member>
        <member name="T:Spring.Context.IResourceLoaderAware">
            <summary>
            Interface to be implemented by any object that wishes to be notified of the
            <see cref="T:Spring.Core.IO.IResourceLoader"/> (typically the
            <see cref="T:Spring.Context.IApplicationContext"/>) that it runs in.
            </summary>
            <remarks>
            <p>
            Note that <see cref="T:Spring.Core.IO.IResource"/> 
            dependencies can also be exposed as object properties
            of type <see cref="T:Spring.Core.IO.IResource"/>, populated via strings 
            with automatic type conversion by the object factory. 
            This removes the need for implementing any callback
            interface just for the purpose of accessing a specific file resource.
            </p>
            <p>You typically need a <see cref="T:Spring.Core.IO.IResourceLoader"/>
            when your application object has
            to access a variety of file resources whose names are calculated. A good
            strategy is to make the object use a default resource loader but still
            implement <see cref="T:Spring.Context.IResourceLoaderAware"/>
            to allow for overriding when running in an
            <see cref="T:Spring.Context.IApplicationContext"/>
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IResourceLoaderAware.cs,v 1.3 2005/03/30 16:59:37 markpollack Exp $</version>
            <see cref="T:Spring.Context.IApplicationContextAware"/>
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/>
            <see cref="T:Spring.Core.IO.IResourceLoader"/>
        </member>
        <member name="P:Spring.Context.IResourceLoaderAware.ResourceLoader">
            <summary>
            Set the <see cref="T:Spring.Core.IO.IResourceLoader"/> that this object runs in.
            </summary>
            <remarks>
            <p>
            Invoked after population of normal objects properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s 
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            or a custom init-method. Invoked before setting 
            <see cref="T:Spring.Context.IApplicationContextAware"/>'s
            <see cref="P:Spring.Context.IApplicationContextAware.ApplicationContext"/> property.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Context.NoSuchMessageException">
            <summary>
            Exception thrown when a message can't be resolved.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: NoSuchMessageException.cs,v 1.3 2005/03/30 16:59:37 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="code">The code that could not be resolved for given culture.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> that was used to search for
            the code.
            </param>
        </member>
        <member name="M:Spring.Context.NoSuchMessageException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Context.NoSuchMessageException"/> class.
            </summary>
            <param name="code">
            The code that could not be resolved for the current culture.
            </param>
        </member>
        <member name="T:Spring.Core.IO.AbstractResource">
            <summary>
            Convenience base class for <see cref="T:Spring.Core.IO.IResource"/>
            implementations, pre-implementing typical behavior.
            </summary>
            <remarks>
            <p>
            The <see cref="P:Spring.Core.IO.AbstractResource.Exists"/> method will
            check whether a <see cref="T:System.IO.FileInfo"/> or
            <see cref="T:System.IO.Stream"/> can be opened;
            <see cref="P:Spring.Core.IO.AbstractResource.IsOpen"/> will always return
            false; <see cref="P:Spring.Core.IO.AbstractResource.Uri"/>
            and <see cref="P:Spring.Core.IO.AbstractResource.File"/> throw an
            exception; and <see cref="M:Spring.Core.IO.AbstractResource.ToString"/>
            will return the description.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: AbstractResource.cs,v 1.13 2005/03/27 23:27:13 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Core.IO.IResource">
            <summary>
            Interface for a resource descriptor that abstracts from the actual
            type of resource, such as a file resource.
            </summary>
            <remarks>
            <p>
            A <see cref="T:System.IO.Stream"/> can be opened for every resource if
            it exists in physical form, but a URL or file handle can just be
            returned for certain resources. The actual behavior is implementation-specific.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Core.IO.IInputStreamSource">
            <summary>
            Simple interface for objects that are sources for <see cref="T:System.IO.Stream"/>s.
            </summary>
            <remarks>
            <p>
            Base interface for Spring.NET's <see cref="T:Spring.Core.IO.IResource"/> interface.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Core.IO.IInputStreamSource.InputStream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <p>
            It is expected that each call creates a <i>fresh</i> stream; it is the
            responsibility of the calling code to close any returned
            <see cref="T:System.IO.Stream"/>.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="M:Spring.Core.IO.IResource.CreateRelative(System.String)">
            <summary>
            Create a resource relative to this resource.
            </summary>
            <param name="relativePath">
            The relative path (relative to this resource).
            </param>
            <returns>
            The relative resource.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied path.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.IResource.IsOpen">
            <summary>
            Return whether this resource represents a handle with an open
            stream.
            </summary>
            <remarks>
            <p>
            If true, the <see cref="T:System.IO.Stream"/> cannot be read multiple times,
            and must be read and closed to avoid resource leaks.
            </p>
            <p>
            Will be false for all usual resource descriptors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Core.IO.IResource.Uri">
            <summary>
            Return a <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <exception cref="T:System.IO.IOException">
            If the resource cannot be resolved as a URL, i.e. if the resource is
            not available in a descriptor.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.IResource.File">
            <summary>
            Return a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <exception cref="T:System.IO.IOException">
            If the resource cannot be resolved as absolute, i.e. if the resource is
            not available in a file system.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.IResource.Description">
            <summary>
            Return a description for this resource, to be used for error output
            when working with the resource.
            </summary>
            <remarks>
            <p>
            Implementations are also encouraged to return this value
            from their <c>ToString</c> method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Core.IO.IResource.Exists">
            <summary>
            Return whether this resource actually exists in physical form.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.AbstractResource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.AbstractResource"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            Strips protocol name from the resource name
            </summary>
            <param name="resourceName">Name of the resource</param>
            <returns>Name of the resource without protocol name</returns>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.ToString">
            <summary>
            This implementation returns the description of this resource.
            </summary>
            <seealso cref="P:Spring.Core.IO.AbstractResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.Equals(System.Object)">
            <summary>
            This implementation compares description strings.
            </summary>
            <seealso cref="P:Spring.Core.IO.AbstractResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.GetHashCode">
            <summary>
            This implementation returns the description's hash code.
            </summary>
            <seealso cref="P:Spring.Core.IO.AbstractResource.Description"/>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.CreateRelative(System.String)">
            <summary>
            Creates new resource that is relative to this resource based on the
            specified resource name.
            </summary>
            <remarks>
            <p>
            This method can accept either fully qualified resource name or a relative 
            name as a parameter.
            </p>
            <p>
            Fully qualified resource is the one that has protocol prefix and all elements
            of the resource name. All other resources are treated as relative to this resource
            and following rules are used to locate them:
            </p>
            <list type="bullet">
                <item>
                If <c>resourceName</c> starts with '..', current resource path is navigated backwards 
                before specified resource name is concatenated to it.
                </item>
                <item>
                If <c>resourceName</c> starts with '/', current resource path is ignored and 
                new resource name is appended to the root location.
                </item>
                <item>
                If <c>resourceName</c> starts with '.' or a letter, new path is appended to the current 
                path.
                </item>
            </list>
            </remarks>
            <param name="resourceName">Name of the resource to create.</param>
            <returns>Created resource.</returns>
        </member>
        <member name="M:Spring.Core.IO.AbstractResource.CalculateResourcePath(System.String)">
            <summary>
            Calculates new resource path based on relative path passed.
            </summary>
            <param name="relativePath">Relative path to evaluate.</param>
            <returns>Calculated resource path.</returns>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Description">
            <summary>
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Protocol">
            <summary>
            Gets protocol name, if one is specified.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.IsOpen">
            <summary>
            This implementation always returns false.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Uri">
            <summary>
            This implementation throws a
            <see cref="T:System.IO.FileNotFoundException"/>, assuming that the
            resource cannot be resolved to a <see cref="T:System.Uri"/>.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            As standard.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.File">
            <summary>
            This implementation throws a
            <see cref="T:System.IO.FileNotFoundException"/>, assuming that the
            resource cannot be resolved to an absolute file path.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            As standard.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.Exists">
            <summary>
            This implementation checks whether a <see cref="T:System.IO.FileInfo"/>
            can be opened, falling back to whether a <see cref="T:System.IO.Stream"/>
            can be opened.
            </summary>
            <remarks>
            <p>
            This will cover both directories and content resources.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.SupportsRelativeResources">
            <summary>
            Flag that defines whether specific resource supports
            relative resource retrieval.
            </summary>
            <remarks>
            It is implemented here to default to false.
            </remarks>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.RootLocation">
            <summary>
            Gets root location of the resource that doesn't change 
            when relative resource is looked up, such as drive letter,
            web server name, assembly name, etc.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.ResourcePath">
            <summary>
            Gets current path of the resource.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AbstractResource.PathSeparatorChars">
            <summary>
            Gets array of the characters that are valid path separators
            for the resource type.
            </summary>
        </member>
        <member name="T:Spring.Core.IO.AssemblyResource">
            <summary>
            Resource implementation for resources stored within assemblies.
            </summary>
            <remarks>
            This implementation assumes that resource name passed has following format:
            
            assembly://<i>assemblyName</i>/<i>namespace</i>/<i>resourceName</i>
            
            </remarks>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Federico Spinazzi (.NET)</author>
            <version>$Id: AssemblyResource.cs,v 1.8 2005/03/30 16:59:44 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Core.IO.AssemblyResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.AssemblyResource"/> class.
            </summary>
            <param name="resourceName">Name of the assembly resource</param>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.Exists">
            <summary>
            True if specified resource exists, false otherwise
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.SupportsRelativeResources">
            <summary>
            Returns true because AssemblyResource supports relative resources.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.RootLocation">
            <summary>
            Gets the name of the assembly.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.ResourcePath">
            <summary>
            Gets current path of the resource.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.PathSeparatorChars">
            <summary>
            Gets array of the characters that are valid path separators
            for the resource type.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.AssemblyResource.Description">
            <summary>
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </summary>
        </member>
        <member name="T:Spring.Core.IO.ConfigSectionResource">
            <summary>
            Used when retrieving information from the .NET application
            configuration files, e.g. App.config/Web.config.
            </summary>
            <remarks>
            <p>
            If created with the name of a configuration section, then all methods
            aside from the description return null, false, or thorw an exception.  If
            created with an XmlElement, then InputStream will return a corresponding
            Stream to parse.
            </p>
            </remarks>
            <author>Mark Pollack</author>
            <author>Rick Evans</author>
            <version>$Id: ConfigSectionResource.cs,v 1.17 2005/03/27 23:24:15 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Core.IO.ConfigSectionResource.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates new instance of the configuration section resource.
            </summary>
            <param name="configSection">Name of the configuration section.</param>
        </member>
        <member name="M:Spring.Core.IO.ConfigSectionResource.#ctor(System.String)">
            <summary>
            Creates new instance of the configuration section resource.
            </summary>
            <param name="resourceName">Name of the configuration section.</param>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.IsOpen">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Uri">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.File">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Description">
            <summary>
            The name of the configuration section where the information
            was retrieved.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.Exists">
            <summary>
            returns false
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.InputStream">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.ConfigSectionResource.ConfigElement">
            <summary>
            Introduced to accomodate line infos
            </summary>
        </member>
        <member name="T:Spring.Core.IO.FileSystemResource">
            <summary>
            Resource implementation for <see cref="T:System.IO.File"/> handles.
            </summary>
            <remarks>
            Obviously supports resolution as a <see cref="T:System.Uri"/>, and also as
            a <see cref="T:System.IO.FileInfo"/> in the case of the "file:" protocol.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Leonardo Susatyo (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: FileSystemResource.cs,v 1.10 2005/01/31 09:03:38 aseovic Exp $</version>
        </member>
        <member name="F:Spring.Core.IO.FileSystemResource.fileInfo">
            <summary>
            File handle
            </summary>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.FileSystemResource"/> class.
            </summary>
            <param name="resourceName">Name of the file system resource</param>
        </member>
        <member name="M:Spring.Core.IO.FileSystemResource.CreateRelativeOld(System.String)">
            <summary>
            Create a resource relative to this resource.
            </summary>
            <param name="relativePath">
            The relative path (relative to this resource).
            </param>
            <returns>
            The relative resource.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied path.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the relative path was null.
            </exception>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.File">
            <summary>
            The input <see cref="T:System.IO.FileInfo"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.SupportsRelativeResources">
            <summary>
            Returns true because FileSystemResource supports relative resources.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.RootLocation">
            <summary>
            Gets drive or UNC file share name.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.ResourcePath">
            <summary>
            Gets current path of the resource, relative to root location.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.PathSeparatorChars">
            <summary>
            Gets array of the characters that are valid path separators
            for the resource type.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.Description">
            <summary>
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.FileSystemResource.Uri">
            <summary>
            The <see cref="T:System.Uri"/> to use.
            </summary>
        </member>
        <member name="T:Spring.Core.IO.InputStreamResource">
            <summary>
            Resource implementation for a given input <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <p>
            Should only be used if no specific <see cref="T:Spring.Core.IO.IResource"/>
            implementation is applicable.
            </p>
            <p>
            In contrast to other <see cref="T:Spring.Core.IO.IResource"/> implementations,
            this is a descriptor for an <i>already opened</i> resource - therefore
            returning true on <see cref="P:Spring.Core.IO.InputStreamResource.IsOpen"/>.
            Do not use it if you need to keep the resource descriptor somewhere, or 
            if you need to read a stream multiple times.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Core.IO.InputStreamResource.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.InputStreamResource"/> class.
            </summary>
            <param name="inputStream">
            The input <see cref="T:System.IO.Stream"/> to use.
            </param>
            <param name="description">
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </param>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.Description">
            <summary>
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.IsOpen">
            <summary>
            Return whether this resource represents a handle with an open
            stream.
            </summary>
            <remarks>
            <p>
            If true, the <see cref="T:System.IO.Stream"/> cannot be read multiple times,
            and must be read and closed to avoid resource leaks.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Core.IO.InputStreamResource.Exists">
            <summary>
            Return whether this resource actually exists in physical form.
            </summary>
        </member>
        <member name="T:Spring.Core.IO.ResourceConverter">
            <summary>
            Custom type converter for <see cref="T:Spring.Core.IO.IResource"/> instances.
            </summary>
            <version>$Id: ResourceConverter.cs,v 1.6 2005/03/30 16:59:47 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Core.IO.ResourceConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:Spring.Core.IO.IResource"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:Spring.Core.IO.IResource"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:Spring.Core.IO.IResource"/> if successful. 
            </returns>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.ResolvePath(System.String)">
            <summary>
            Resolve the given path, replacing placeholder values with corresponding property
            values if necessary.
            </summary>
            <param name="path">The original file path.</param>
            <returns>The resolved file path.</returns>
        </member>
        <member name="M:Spring.Core.IO.ResourceConverter.GetResourceLoader">
            <summary>
            Return the <see cref="T:Spring.Core.IO.IResourceLoader"/> used to resolve the string.
            </summary>
            <returns>
            The <see cref="T:Spring.Core.IO.IResourceLoader"/> used to resolve the string.
            </returns>
        </member>
        <member name="T:Spring.Core.IO.UrlResource">
            <summary>
            Resource implementation for <see cref="T:System.Uri"/> locators.
            </summary>
            <remarks>
            <p>
            Obviously supports resolution as a <see cref="T:System.Uri"/>, and also as
            a <see cref="T:System.IO.FileInfo"/> in the case of the "file:" protocol.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Leonardo Susatyo (.NET)</author>
            <author>Aleksandar Seovic (.NET)</author>
            <version>$Id: UrlResource.cs,v 1.7 2005/01/31 09:03:38 aseovic Exp $</version>
        </member>
        <member name="M:Spring.Core.IO.UrlResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Core.IO.UrlResource"/> class.
            </summary>
            <param name="resourceName">Name of the URL resource</param>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.InputStream">
            <summary>
            The input <see cref="T:System.IO.Stream"/> to use.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.Uri">
            <summary>
            Gets the <see cref="T:System.Uri"/> for this resource.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.File">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> if the protocol is of type
            <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.SupportsRelativeResources">
            <summary>
            Returns true because UrlResource supports relative resources.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.RootLocation">
            <summary>
            Gets drive or UNC file share name.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.ResourcePath">
            <summary>
            Gets current path of the resource, relative to root location.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.PathSeparatorChars">
            <summary>
            Gets array of the characters that are valid path separators
            for the resource type.
            </summary>
        </member>
        <member name="P:Spring.Core.IO.UrlResource.Description">
            <summary>
            Where the input <see cref="T:System.IO.Stream"/> comes from.
            </summary>
        </member>
        <member name="T:Spring.Core.ControlFlowFactory">
            <summary>
            Static factory to conceal automatic choice of ControlFlow implementation.
            </summary>
            <remarks>
            TODO: decide whether to keep factory in .NET implementation.
            </remarks>
            <author>Rod Johnson</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.CreateControlFlow">
            <summary>
            Constructs a new IControlFlow.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spring.Core.IControlFlow">
            <summary> 
            Interface to be implemented by objects that can return information about
            the current call stack.
            </summary>
            <remarks><p>Useful in AOP but not AOP-specific.</p></remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: IControlFlow.cs,v 1.1 2004/09/15 15:38:43 springboy Exp $</version>
        </member>
        <member name="M:Spring.Core.IControlFlow.Under(System.Type)">
            <summary>
            Matches <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to match.</param>
            <returns>True if successfully matched.</returns>
        </member>
        <member name="M:Spring.Core.IControlFlow.Under(System.Type,System.String)">
            <summary> 
            Matches whole method name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to match.</param>
            <param name="methodName">The name of the method to match.</param>
            <returns>True if successfully matched.</returns>
        </member>
        <member name="M:Spring.Core.IControlFlow.UnderToken(System.String)">
            <summary>
            Matches token.
            </summary>
            <param name="token">The token to match.</param>
            <returns>True if successfully matched.</returns>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.Spring#Core#IControlFlow#Under(System.Type,System.String)">
            <summary>
            Matches whole method name.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Core.ControlFlowFactory.DefaultControlFlow.UnderToken(System.String)">
            <summary>
            Leave it up to the caller to decide what matches.
            Caller must understand stack trace format, so there's less abstraction.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Spring.Core.ICriteria">
            <summary>
            The criteria for an arbitrary filter.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: ICriteria.cs,v 1.3 2005/03/30 16:59:44 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Core.ICriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not, or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Core.IErrorCoded">
            <summary>
            Interface that can be implemented by exceptions etc that are error coded.
            </summary>
            <remarks>
            <p>
            The error code is a <see cref="T:System.String"/>, rather than a number, so it can
            be given user-readable values, such as "object.failureDescription".
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: IErrorCoded.cs,v 1.4 2005/03/30 16:59:44 markpollack Exp $</version>
        </member>
        <member name="P:Spring.Core.IErrorCoded.ErrorCode">
            <summary>
            Return the error code associated with this failure.
            </summary>
            <remarks>
            <p>
            The GUI can render this anyway it pleases, allowing for I18n etc.
            </p>
            </remarks>
            <returns>
            The <see cref="T:System.String"/> error code associated with this failure,
            or the empty string instance if not error-coded.
            </returns>
        </member>
        <member name="T:Spring.Core.IOrdered">
            <summary>
            Interface that can be implemented by objects that should be orderable, e.g. in an
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <remarks>
            <p>
            The actual order can be interpreted as prioritization, the first object (with the
            lowest order value) having the highest priority.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: IOrdered.cs,v 1.3 2005/03/30 16:59:44 markpollack Exp $</version>
        </member>
        <member name="P:Spring.Core.IOrdered.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <remarks>
            <p>
            Normally starting with 0 or 1, with <see cref="F:System.Int32.MaxValue"/> indicating
            greatest. Same order values will result in arbitrary positions for the affected
            objects.
            </p>
            <p>
            Higher value can be interpreted as lower priority, consequently the first object
            has highest priority.
            </p>
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="T:Spring.Core.OrderComparator">
            <summary>
            Comparator implementation for <see cref="T:Spring.Core.IOrdered"/> objects, sorting by
            order value ascending (resp. by priority descending).
            </summary>
            <remarks>
            <p>
            Non-Ordered objects are treated as greatest order values, thus ending up at the
            end of the list, in arbitrary order (just like same order values of
            <see cref="T:Spring.Core.IOrdered"/> objects).
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: OrderComparator.cs,v 1.2 2004/09/16 11:14:42 springboy Exp $</version>
        </member>
        <member name="M:Spring.Core.OrderComparator.Compare(System.Object,System.Object)">
            <summary>
            Compares specified objects
            </summary>
            <param name="o1">The first object.</param>
            <param name="o2">The second object.</param>
            <returns>
            -1 if first object is less then second, 1 if it is greater, or 0 if they are equal.
            </returns>
        </member>
        <member name="T:Spring.Objects.Events.Support.EventManipulationUtilities">
            <summary>
            Utility class to aid in the manipulation of events and delegates.
            </summary>
            <author>Griffin Caprio</author>
            <version>$Id: EventManipulationUtilities.cs,v 1.2 2005/02/17 23:02:34 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventManipulationUtilities.GetHandlerDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Returns a new instance of the requested <see cref="T:System.Delegate"/>.  Often used to wire subscribers to event publishers.
            </summary>
            <remarks>
            Since the <see cref="T:System.Delegate"/> constructor cannot be called directly, the Delegate.CreateDelegate method
            must be used.
            </remarks>
            <param name="delegateType">Type of delegate to create</param>
            <param name="targetSubscriber">target subscriber object that contains the delegate implementation</param>
            <param name="targetSubscriberDelegateMethod"><see cref="T:System.Reflection.MethodInfo"/> referencing the delegate method on the subscriber</param>
            <returns>Delegate handler that can be added to an events list of handlers, or called directly.</returns>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventManipulationUtilities.GetMethodInfoMatchingSignature(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Queries the input type for a <see cref="T:System.Reflection.MethodInfo"/> signature matching the input <see cref="T:System.Reflection.MethodInfo"/> signature.
            </summary>
            <remarks>Typically used to query a potential subscriber to see if they implement a event handler.</remarks>
            <param name="invoke"><see cref="T:System.Reflection.MethodInfo"/> to match against</param>
            <param name="currentsSubscriberType"><see cref="T:System.Type"/> to query</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> matching input <see cref="T:System.Reflection.MethodInfo"/> signature, or null of there is none.</returns>
        </member>
        <member name="T:Spring.Objects.Events.Support.EventRegistry">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.Events.IEventRegistry"/>
            interface.
            </summary>
            <author>Griffin Caprio</author>
            <version>$Id: EventRegistry.cs,v 1.4 2005/03/30 16:59:47 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.#ctor">
            <summary>
            Creates a new instance of the EventRegistry class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.PublishEvents(System.Object)">
            <summary>
            Adds the input object to the list of publishers.
            </summary>
            <remarks>
            This publishes <b>all</b> events of the source object to any object
            wishing to subscribe
            </remarks>
            <param name="sourceObject">The source object to publish.</param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Subscribe(System.Object)">
            <summary>
            Subscribes to <b>all</b> events published, if the subscriber implements
            compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
        </member>
        <member name="M:Spring.Objects.Events.Support.EventRegistry.Subscribe(System.Object,System.Type)">
            <summary>
            Subscribes to published events of all objects of a given type, if the
            subscriber implements compatible handler methods.
            </summary>
            <param name="subscriber">The subscriber to use.</param>
            <param name="targetSourceType">
            The target <see cref="T:System.Type"/> to subscribe to.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Config.AbstractFactoryObject">
            <summary>
            Simple template superclass for <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            implementations that allows for the creation of a singleton or a prototype
            instance (depending on a flag).
            </summary>
            <remarks>
            If the "singleton" flag is "true" (the default), this class will
            create once on initialization and subsequently return the singleton
            instance. Else, this class will create a new instance each time.
            Subclasses are responsible for implementing the abstract
            <code>CreateInstance</code> template method to actually create objects.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Keith Donald</author>
            <author>Simon White (.NET)</author>
            <version>$Id: AbstractFactoryObject.cs,v 1.6 2005/02/13 09:26:26 springboy Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IFactoryObject">
            <summary>
            Interface to be implemented by objects used within an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> that are themselves
            factories.
            </summary>
            <remarks>
            <p>
            If an object implements this interface, it is used as a factory,
            not directly as an object. <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s
            can support singletons and prototypes.
            </p>
            <note type="caution">
            An object that implements this interface cannot be used as a normal object.
            </note>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: IFactoryObject.cs,v 1.3 2005/02/27 19:30:45 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.IFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <remarks>
            <note type="caution">
            If this method is being called in the context of an enclosing IoC container and
            returns <see langword="null"/>, the IoC container will consider this factory
            object as not being fully initialized and throw a corresponding (and most
            probably fatal) exception.
            </note>
            </remarks>
            <returns>
            An instance (possibly shared or independent) of the object managed by
            this factory.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.IFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or null
            if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.IFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.AfterPropertiesSet">
            <summary>
            Callback method called once all factory properties have been set.
            </summary>
            <exception cref="T:System.Exception">if an error occured</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.GetObject">
            <summary>
            Returns either the singleton instance (if this is a singleton factory)
            or a newly created prototype.
            </summary>
            <exception cref="T:System.Exception">if an error occured</exception>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.AbstractFactoryObject.CreateInstance">
            <summary>
            Template method that subclasses must override to construct
            the object returned by this factory.
            </summary>
            <remarks>
            Invoked on initialization of this IFactoryObject in case of
            a singleton; else, on each GetObject() call.
            </remarks>
            <exception cref="T:System.Exception">if an exception occured during object creation</exception>
            <returns>the object returned by this factory</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.AbstractFactoryObject.IsSingleton">
            <summary>
            Whether the factory constructs a singleton or prototype.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.AbstractFactoryObject.ObjectType">
            <summary>
            The type of object created by this factory.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.AutoWiringMode">
            <summary>
            The various autowiring modes.
            </summary>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.No">
            <summary>
            Do not autowire.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName">
            <summary>
            Autowire by name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType">
            <summary>
            Autowire by <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.Constructor">
            <summary>
            Autowiring by constructor.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.AutoWiringMode.AutoDetect">
            <summary>
            The autowiring strategy is to be determined by introspection
            of the object's <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConfigurationReader">
            <summary>
            A reader for standard configuration files. Currently supports reading custom
            configuration sections and returning them as 
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
            <author>Simon White</author>
            <author>Mark Pollack</author>
            <version>$Id: ConfigurationReader.cs,v 1.4 2005/03/28 01:01:59 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.Read(Spring.Core.IO.IResource,System.String)">
            <summary>
            Reads the specified configuration section into a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <remarks>NOTE: doesn't currently support section grouping.</remarks>
            <param name="resource">The resource to read.</param>
            <param name="configSection">The section name.</param>
            XmlExceptions from loading and reading are propagated to caller.
            <returns>
            A newly populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.ReadFromXmlDocument(System.Xml.XmlDocument,System.String)">
            <summary>
            Read from the specified configuration from the XML document into a 
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <remarks>NOTE: doesn't currently support section grouping.  XmlDocument must
            already be loaded.
            </remarks>
            <param name="doc">XmlDocument to read from</param>
            <param name="configSectionName">The configuration section name</param>
            <returns>A newly populated
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConfigurationReader.PopulateFromAppConfig(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Populate a NameValueCollection from with values from
            the .NET application configuration file.
            </summary>
            <param name="nvc">The NameValueCollection to add key-value pairs to</param>
            <param name="configSectionName">The configuration section name in the 
            .NET application configuration file</param>
            <returns>false if a required configuration section was not found.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConstructorArgumentValues">
            <summary>
            Holder for constructor argument values for an object.
            </summary>
            <remarks>
            <p>
            Supports values for a specific index in the constructor argument list
            and generic matches by <see cref="P:System.Type.FullName"/>.
            </p>
            <p>
            Also supports named arguments (case insensitive) in the constructor argument list.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: ConstructorArgumentValues.cs,v 1.8 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.#ctor(Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            class.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddAll(Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Copy all given argument values into this object.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(System.Int32,System.Object)">
            <summary>
            Add argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">
            The index in the constructor argument list.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddIndexedArgumentValue(System.Int32,System.Object,System.String)">
            <summary>
            Add argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">The index in the constructor argument list.</param>
            <param name="value">The argument value.</param>
            <param name="type">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddNamedArgumentValue(System.String,System.Object)">
            <summary>
            Add argument value for the given name in the constructor argument list.
            </summary>
            <param name="name">The name in the constructor argument list.</param>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetIndexedArgumentValue(System.Int32,System.Type)">
            <summary>
            Get argument value for the given index in the constructor argument list.
            </summary>
            <param name="index">The index in the constructor argument list.</param>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the argument.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or null if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetNamedArgumentValue(System.String)">
            <summary>
            Get argument value for the given name in the constructor argument list.
            </summary>
            <param name="name">The name in the constructor argument list.</param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or null if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ContainsNamedArgument(System.String)">
            <summary>
            Does this set of constructor arguments contain a named argument matching the
            supplied <paramref name="argument"/> name?
            </summary>
            <remarks>
            <note>
            The comparison is performed in a case-insensitive fashion.
            </note>
            </remarks>
            <param name="argument">The named argument to look up.</param>
            <returns>
            <b>True</b> if this set of constructor arguments contain a named argument matching the
            supplied <paramref name="argument"/> name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(System.Object)">
            <summary>
            Add generic argument value to be matched by type.
            </summary>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.AddGenericArgumentValue(System.Object,System.String)">
            <summary>
            Add generic argument value to be matched by type.
            </summary>
            <param name="value">The argument value.</param>
            <param name="type">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetGenericArgumentValue(System.Type)">
            <summary>
            Look for a generic argument value that matches the given
            <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or null if none set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.GetArgumentValue(System.Int32,System.Type)">
            <summary>
            Look for an argument value that either corresponds to the given index
            in the constructor argument list or generically matches by
            <see cref="T:System.Type"/>.
            </summary>
            <param name="index">
            The index in the constructor argument list.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> to match.
            </param>
            <returns>
            The
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>
            for the argument, or null if none set.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.IndexedArgumentValues">
            <summary>
            Return the map of indexed argument values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> with
            <see cref="T:System.Int32"/> indices as keys and
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s
            as values.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.NamedArgumentValues">
            <summary>
            Return the map of named argument values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> with
            <see cref="T:System.String"/> named arguments as keys and
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s
            as values.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.GenericArgumentValues">
            <summary>
            Return the set of generic argument values.
            </summary>
            <returns>
            A <see cref="T:Spring.Collections.Set"/> of
            <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder"/>s.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ArgumentCount">
            <summary>
            Return the number of arguments held in this instance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.Empty">
            <summary>
            Returns true if this holder does not contain any argument values,
            neither indexed ones nor generic ones.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder">
            <summary>
            Holder for a constructor argument value, with an optional
            <see cref="T:System.Type"/> attribute indicating the target
            <see cref="T:System.Type"/> of the actual constructor argument.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.#ctor(System.Object)">
            <summary>
            Creates a new instance of the ValueHolder class.
            </summary>
            <param name="value">
            The value of the constructor argument.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the ValueHolder class.
            </summary>
            <param name="value">
            The value of the constructor argument.
            </param>
            <param name="type">
            The <see cref="P:System.Type.FullName"/> of the argument
            <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.Value">
            <summary>
            Gets and sets the value for the constructor argument.
            </summary>
            <remarks>
            <p>
            Only necessary for manipulating a registered value, for example in
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>s.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ConstructorArgumentValues.ValueHolder.Type">
            <summary>
            Return the <see cref="P:System.Type.FullName"/> of the constructor
            argument.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.CustomConverterConfigurer">
            <summary>
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            implementation that allows for convenient registration of custom
            <see cref="T:System.ComponentModel.TypeConverter"/>s.
            </summary>
            <remarks>
            Configuration example, assuming XML object definitions and inner
            objects for <see cref="T:System.ComponentModel.TypeConverter"/> instances:
            <code>
            &lt;object id="customConverterConfigurer" type="Spring.Objects.Factory.Config.CustomConverterConfigurer, Spring.Core"&gt;
              &lt;property name="CustomConverters"&gt;
                &lt;map&gt;
                  &lt;entry key="System.Date"&gt;
                    &lt;object type="MyNamespace.MyCustomDateEditor"/&gt;
                  &lt;/entry&gt;
                  &lt;entry key="MyNamespace.MyObject"&gt;
                    &lt;object id="myEditor" type="MyNamespace.MObjectEditor"&gt;
                      &lt;property name="myParam"&gt;&lt;value&gt;myValue&lt;/value&gt;&lt;/property&gt;
                    &lt;/object&gt;
                  &lt;/entry&gt;
                &lt;/map&gt;
              &lt;/property&gt;
            &lt;/object&gt;
            </code>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor">
            <summary>
            Allows for custom modification of an application context's object
            definitions, adapting the object property values of the context's
            underlying object factory.
            </summary>
            <remarks>
            <p>
            Application contexts can auto-detect
            <c>IObjectFactoryPostProcessor</c> objects in their object definitions and
            apply them before any other objects get created.
            </p>
            <p>
            Useful for custom config files targeted at system administrators that
            override object properties configured in the application context.
            </p>
            <p>
            See PropertyResourceConfigurer and its concrete implementations for
            out-of-the-box solutions that address such configuration needs.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.Net)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Modify the application context's internal object factory after its
            standard initialization.
            </summary>
            <remarks>
            <p>
            All object definitions will have been loaded, but no objects will have
            been instantiated yet. This allows for overriding or adding properties
            even to eager-initializing objects.
            </p>
            </remarks>
            <param name="factory">
            The object factory used by the application context.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.CustomConverterConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Registers any custom converters with the specified object factory.
            </summary>
            <param name="factory">
            The object factory to register converters with.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.CustomConverterConfigurer.Order">
            <summary>
            Return the order value of this object, with a higher value meaning
            greater in terms of sorting.
            </summary>
            <remarks>
            <p>
            Normally starting with 0 or 1, Integer.MAX_VALUE indicating greatest.
            Same order values will result in arbitrary positions for the affected
            objects.
            </p>
            <p>
            Higher value can be interpreted as lower priority, consequently the
            first object has highest priority (somewhat analogous to the Java 
            Servlet "load-on-startup" values).
            </p>
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.CustomConverterConfigurer.CustomConverters">
            <summary>
            The custom converters to register via a
            <see cref="T:System.Collections.IDictionary"/>, using the type name
            as key and the <see cref="T:System.ComponentModel.TypeConverter"/>
            instance as value.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.DictionaryFactoryObject">
            <summary>
            Simple factory for shared <see cref="T:System.Collections.IDictionary"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: DictionaryFactoryObject.cs,v 1.2 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.DictionaryFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target dictionary.
            </summary>
            <returns>The new <see cref="T:System.Collections.IDictionary"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.SourceDictionary">
            <summary>
            Set the source <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:System.Collections.IDictionary"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.TargetDictionaryType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:System.Collections.IDictionary"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:System.Collections.Hashtable"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.DictionaryFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:System.Collections.IDictionary"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.EnvironmentVariableMode">
            <summary>
            Enumerations to specify how the PropertyResourceConfigurer should
            apply environment variables when replacing values.
            </summary>
            <author>Mark Pollack</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Never">
            <summary>
            Never replace with environment variables
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Fallback">
            <summary>
            If properties are not specified via a resource, 
            then resolve using environment variables.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EnvironmentVariableMode.Override">
            <summary>
            Apply environment variables first before apply properties from a resource
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.EventValues">
            <summary>
            Holder for event handler values for an object.
            </summary>
            <author>Rick Evans (.NET)</author>
            <version>$Id: EventValues.cs,v 1.5 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Config.EventValues.EmptyHandlers">
            <summary>
            The empty array of <see cref="T:Spring.Objects.IEventHandlerValue"/>s.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.#ctor(Spring.Objects.Factory.Config.EventValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.EventValues"/> class.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.EventValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.AddAll(Spring.Objects.Factory.Config.EventValues)">
            <summary>
            Copy all given argument values into this object.
            </summary>
            <param name="other">
            The <see cref="T:Spring.Objects.Factory.Config.EventValues"/>
            to be used to populate this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.EventValues.AddHandler(Spring.Objects.IEventHandlerValue)">
            <summary>
            Adds the supplied handler to the collection of event handlers.
            </summary>
            <param name="handler">The handler to be added.</param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.EventHandlers">
            <summary>
            The mapping of event names to an
            <see cref="T:System.Collections.ICollection"/> of
            <see cref="T:Spring.Objects.IEventHandlerValue"/>s.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.Events">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> of events
            that have handlers associated with them.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.EventValues.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.ICollection"/> of
            <see cref="T:Spring.Objects.IEventHandlerValue"/>s for the supplied
            event name.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            retrieves a static or non-static <b>public</b> field value.
            </summary>
            <remarks>
            <p>
            Typically used for retrieving <b>public</b> constants.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: FieldRetrievingFactoryObject.cs,v 1.2 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform initialization only
            possible when all object properties have been set and to throw an
            exception in the event of misconfiguration.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object
            managed by this factory.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.StaticField">
            <summary>
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the static field
            to be retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetField">
            <summary>
            The name of the field the value of which is to be retrieved.
            </summary>
            <remarks>
            <p>
            Refers to either a static field or a non-static field, depending on a
            target object being set.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetObject">
            <summary>
            The object instance on which the field is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.TargetType">
            <summary>
            The <see cref="T:System.Type"/> on which the field is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or null
            if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.FieldRetrievingFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory">
            <summary>
            Extension of the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface to be implemented by object factories that are capable of
            autowiring and expose this functionality for existing object instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.Autowire(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Create a new object instance of the given class with the specified
            autowire strategy.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not applicable to
            autowiring a constructor, thus ignored there).
            </param>
            <returns>The new object instance.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.AutowireObjectProperties(System.Object,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Autowire the object properties of the given object instance by name or
            <see cref="T:System.Type"/>.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for the object.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IAutowireCapableObjectFactory.ApplyObjectPostProcessorsAfterInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory">
            <summary>
            SPI interface to be implemented by most if not all listable object factories.
            </summary>
            <remarks>
            <p>
            Allows for framework-internal plug'n'play, e.g. in
            <see cref="T:Spring.Context.Support.AbstractApplicationContext"/>.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableObjectFactory">
            <summary>
            Configuration interface to be implemented by most if not all object
            factories.
            </summary>
            <remarks>
            <p>
            Provides means to configure an object factory in addition to the object
            factory client methods in the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface.
            </p>
            <p>
            Allows for framework-internal plug'n'play even when needing access to object
            factory configuration methods.
            </p>
            <p>
            When disposed, it will destroy all cached singletons in this factory. Call
            dispose when you want to shutdown the factory.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: IConfigurableObjectFactory.cs,v 1.8 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.IgnoreDependencyType(System.Type)">
            <summary>
            Ignore the given dependency type for autowiring.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            <p>
            This will typically be used for dependencies that are resolved
            in other ways, like <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            through <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be ignored.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.AddObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            that will get applied to objects created by this factory.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="processor">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to register.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterAlias(System.String,System.String)">
            <summary>
            Given an object name, create an alias.
            </summary>
            <remarks>
            <p>
            We typically use this method to support names that are illegal within
            XML ids (used for object names).
            </p>
            <p>
            Typically invoked during factory configuration, but can also be
            used for runtime registration of aliases. Therefore, a factory
            implementation should synchronize alias access.
            </p>
            </remarks>
            <param name="name">The name of the object.
            </param>
            <param name="theAlias">
            The alias that will behave the same as the object name.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterSingleton(System.String,System.Object)">
            <summary>
            Register the given existing object as singleton in the object factory,
            under the given object name.
            </summary>
            <remarks>
            <p>
            Typically invoked during factory configuration, but can also be
            used for runtime registration of singletons. Therefore, a factory
            implementation should synchronize singleton access; it will have
            to do this anyway if it supports lazy initialization of singletons.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="singleton">The existing object.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the singleton could not be registered.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the property.
            </param>
            <param name="converter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectFactory.ParentObjectFactory">
            <summary>
            Set the parent of this object factory.
            </summary>
            <remarks>
            <p>
            Note that the parent shouldn't be changed: it should only be set outside
            a constructor if it isn't available when an object of this class is
            created.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.PreInstantiateSingletons">
            <summary>
            Ensure that all non-lazy-init singletons are instantiated, also
            considering <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            Typically invoked at the end of factory setup, if desired.
            </p>
            <p>
            As this is a startup method, it should destroy already created singletons if
            it fails, to avoid dangling resources. In other words, after invocation
            of that method, either all or no singletons at all should be
            instantiated.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If one of the singleton objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IConfigurableObjectDefinition">
            <summary>
            Describes a configurable object instance, which has property values,
            constructor argument values, and further information supplied by concrete
            implementations.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: IConfigurableObjectDefinition.cs,v 1.3 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IObjectDefinition">
            <summary>
            Describes an object instance, which has property values, constructor
            argument values, and further information supplied by concrete implementations.
            </summary>
            <remarks>
            <p>
            This is just a minimal interface: the main intention is to allow
            <see cref="T:Spring.Objects.Factory.Config.IObjectFactoryPostProcessor"/>
            (like PropertyPlaceholderConfigurer) to access and modify property values.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.Net)</author>
            <version>$Id: IObjectDefinition.cs,v 1.5 2005/01/15 13:13:50 markpollack Exp $</version>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.PropertyValues">
            <summary>
            Return the property values to be applied to a new instance of the object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ConstructorArgumentValues">
            <summary>
            Return the constructor argument values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.EventHandlerValues">
            <summary>
            Return the event handlers for any events exposed by this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ResourceDescription">
            <summary>
            Return a description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be instantiated
            itself but rather just serving as parent for concrete child object
            definitions.
            </summary>
            <value>
            True if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.PropertyValues">
            <summary>
            Return the property values to be applied to a new instance of the object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.ConstructorArgumentValues">
            <summary>
            Return the constructor argument values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.EventHandlerValues">
            <summary>
            Return the event handlers for any events exposed by this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.ResourceDescription">
            <summary>
            Return a description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be instantiated
            itself but rather just serving as parent for concrete child object
            definitions.
            </summary>
            <value>
            True if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.ObjectType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.IsSingleton">
            <summary>
            Return whether this a <b>Singleton</b>, with a single, shared instance
            returned on all calls,
            </summary>
            <remarks>
            <p>
            If false, an object factory will apply the <b>Prototype</b>
            design pattern, with each caller requesting an instance getting an
            independent instance. How this is defined will depend on the
            object factory implementation. <b>Singletons</b> are the commoner type.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.IsLazyInit">
            <summary>
            Is this object lazily initialized?</summary>
            <remarks>
            <p>
            Only applicable to a singleton object.
            </p>
            <p>
            If false, it will get instantiated on startup by object factories
            that perform eager initialization of singletons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.AutowireMode">
            <summary>
            The autowire mode as specified in the object definition.
            </summary>
            <remarks>
            <p>
            This determines whether any automagical detection and setting of
            object references will happen. Default is
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/>,
            which means there's no autowire.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.DependencyCheck">
            <summary>
            The dependency check code.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.DependsOn">
            <summary>
            The object names that this object depends on.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized
            before.
            </p>
            <p>
            Note that dependencies are normally expressed through object properties
            or constructor arguments. This property should just be necessary for
            other kinds of dependencies like statics (*ugh*) or database
            preparation on startup.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.InitMethodName">
            <summary>
            The name of the initializer method.
            </summary>
            <remarks>
            <p>
            The default is null, in which case there is no initializer method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.DestroyMethodName">
            <summary>
            Return the name of the destroy method.
            </summary>
            <remarks>
            <p>
            The default is null, in which case there is no destroy method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.FactoryMethodName">
            <summary>
            The name of the factory method to use (if any).
            </summary>
            <remarks>
            <p>
            This method will be invoked with constructor arguments, or with no
            arguments if none are specified. The static method will be invoked on
            the specified <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.FactoryObjectName">
            <summary>
            The name of the factory object to use (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.IConfigurableObjectDefinition.ObjectTypeName">
            <summary>
            Returns the <see cref="P:System.Type.FullName"/> of the
            <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.IDestructionAwareObjectPostProcessor">
            <summary>
            Subinterface of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> that adds
            a before-destruction callback.
            </summary>
            <remarks>
            The typical usage will be to invoke custom destruction callbacks on
            specific object types, matching corresponding initialization callbacks.
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: IDestructionAwareObjectPostProcessor.cs,v 1.2 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.IDestructionAwareObjectPostProcessor.PostProcessBeforeDestruction(System.Object,System.String)">
            <summary>
            Apply this
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/> to the
            given new object instance before its destruction. Can invoke custom
            destruction callbacks.
            </summary>
            <param name="instance">The new object instance.</param>
            <param name="name">The name of the object.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ListFactoryObject">
            <summary>
            Simple factory for shared <see cref="T:System.Collections.IList"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: ListFactoryObject.cs,v 1.3 2005/03/30 17:00:00 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ListFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target dictionary.
            </summary>
            <returns>The new <see cref="T:System.Collections.IList"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.SourceList">
            <summary>
            Set the source <see cref="T:System.Collections.IList"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:System.Collections.IList"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.TargetListType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:System.Collections.IList"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:System.Collections.ArrayList"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ListFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:System.Collections.IList"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Config.Log4NetFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            creates instances of the <see cref="T:log4net.ILog"/> class.
            </summary>
            <remarks>
            <p>
            Typically used for retrieving shared <see cref="T:log4net.ILog"/> instances
            for common topics (such as the 'DAL', 'BLL', etc).  The 
            property LogName specifies the name of the Log4Net logger.  
            </p>
            <p>
            You might want to check out the
            <a href="http://logging.apache.org/log4net/">Log4Net</a> project homepage.
            </p>
            </remarks>
            <author>Rick Evans (.NET)</author>
            <version>$Id: Log4NetFactoryObject.cs,v 1.3 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.Log4NetFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.Log4NetFactoryObject.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject"/> class.
            </summary>
            <param name="logName">
            The name of the <see cref="T:log4net.ILog"/> instance served up by
            this factory.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.Log4NetFactoryObject.GetObject">
            <summary>
            Return an instance (possibly shared or independent) of the object
            managed by this factory.
            </summary>
            <returns>
            An instance (possibly shared or independent) of the object
            managed by this factory.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.Log4NetFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform initialization only
            possible when all object properties have been set and to throw an
            exception in the event of misconfiguration.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.Log4NetFactoryObject.LogName">
            <summary>
            Sets the name of the <see cref="T:log4net.ILog"/> instance served up by
            this factory.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.Log4NetFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or null
            if not known in advance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.Log4NetFactoryObject.IsSingleton">
            <summary>
            Is the object managed by this factory a singleton or a prototype?
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.MethodInvokingFactoryObject">
            <summary>
            An <see cref="T:Spring.Objects.Factory.IFactoryObject"/> that returns a value
            that is the result of a static or instance method invocation.
            </summary>
            <remarks>
            <p>
            Note that this class generally is expected to be used for accessing factory methods,
            and as such defaults to operating in singleton mode. The first request to
            <see cref="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.GetObject"/>
            by the owning object factory will cause a method invocation, the return
            value of which will be cached for all subsequent requests. The
            <see cref="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.IsSingleton"/> property may be set to false,
            to cause this factory to invoke the target method each time it is asked for an object.
            </p>
            <p>
            A static target method may be specified by setting the
            <see cref="P:Spring.Util.MethodInvoker.TargetMethod"/> property to a string representing
            the static method name, with <see cref="P:Spring.Util.MethodInvoker.TargetType"/> specifying
            the <see cref="T:System.Type"/> that the static method is defined on.
            Alternatively, a target instance method may be specified, by setting the
            <see cref="P:Spring.Util.MethodInvoker.TargetObject"/> property as the target object, and
            the <see cref="P:Spring.Util.MethodInvoker.TargetMethod"/> property as the name of the
            method to call on that target object. Arguments for the method invocation may be
            specified by setting the <see cref="P:Spring.Util.MethodInvoker.Arguments"/> property.
            </p>
            <p>
            Another (esoteric) use case for this factory object is when one needs to call a method that
            doesn't return any value (for example, a static class method to force some sort
            of initialization to happen)... this use case is not supported by factory-methods,
            since a return value is needed to become the object.
            </p>
            <p>
            <note>
            This class depends on the
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method being called after all properties have been set, as per the
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> contract. If you are
            using this class outside of a Spring.NET IoC container, you must call one of either
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/> or
            <see cref="M:Spring.Util.MethodInvoker.Prepare"/> yourself to ready the object's internal
            state, or you will get a nasty <see cref="T:System.NullReferenceException"/>.
            </note>
            </p>
            </remarks>
            <example>
            <p>
            The following example uses an instance of this class to call a static factory method...
            </p>
            <code language="C#">
            </code>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetType"><value>Whatever.MyClassFactory, MyAssembly</value></property>
              <property name="TargetMethod">
                <value>GetInstance</value>
              </property>
              <!-- the ordering of arguments is significant -->
              <property name="Arguments">
            	<list>
            		<value>1st</value>
            		<value>2nd</value>
            		<value>and 3rd arguments</value>
            	</list>
              </property>
            </object>
            </code>
            <p>
            Named parameters are also supported... this next example yields the same results as
            the preceding example (that did not use named arguments).
            </p>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <object type="Whatever.MyClassFactory, MyAssembly"/>
              </property>
              <property name="TargetMethod">
                <value>Execute</value>
              </property>
              <!-- the ordering of named arguments is not significant -->
              <property name="NamedArguments">
            	<dictionary>
            		<entry key="argumentName"><value>1st</value></entry>
            		<entry key="finalArgumentName"><value>and 3rd arguments</value></entry>
            		<entry key="anotherArgumentName"><value>2nd</value></entry>
            	</dictionary>
              </property>
            </object>
            </code>
            <p>
            Similarly, the following example uses an instance of this class to call an instance method...
            </p>
            <code escaped="true">
            <object id="myMethodObject" type="Whatever.MyClassFactory, MyAssembly"/>
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <ref local="myMethodObject"/>
              </property>
              <property name="TargetMethod">
                <value>Execute</value>
              </property>
            </object>
            </code>
            <p>
            The above example could also have been written using an anonymous inner object definition... if the
            object on which the method is to be invoked is not going to be used outside of the factory object
            definition, then this is the preferred idiom because it limits the scope of the object on which the
            method is to be invoked to the surrounding factory object.
            </p>
            <code escaped="true">
            <object id="myObject" type="Spring.Objects.Factory.Config.MethodInvokingFactoryObject, Spring.Core">
              <property name="TargetObject">
                <object type="Whatever.MyClassFactory, MyAssembly"/>
              </property>
              <property name="TargetMethod">
                <value>Execute</value>
              </property>
            </object>
            </code>
            </example>
            <author>Colin Sampaleanu</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: MethodInvokingFactoryObject.cs,v 1.9 2005/02/27 19:30:44 springboy Exp $</version>
            <seealso cref="T:Spring.Util.MethodInvoker"/>
            <seealso cref="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker"/>
        </member>
        <member name="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker">
            <summary>
            Specialisation of the <see cref="T:Spring.Util.MethodInvoker"/> class that tries
            to convert the given arguments for the actual target method via an
            appropriate <see cref="T:Spring.Objects.IObjectWrapper"/> implementation.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <version>$Id: ArgumentConvertingMethodInvoker.cs,v 1.4 2005/03/30 17:00:48 markpollack Exp $</version>
            <seealso cref="T:Spring.Util.MethodInvoker"/>
        </member>
        <member name="T:Spring.Util.MethodInvoker">
            <summary>
            Helper class allowing one to declaratively specify a method call for later invocation.
            </summary>
            <remarks>
            <p>
            Typically not used directly but via its subclasses such as
            <see cref="T:Spring.Objects.Factory.Config.MethodInvokingFactoryObject"/>.
            </p>
            <p>
            Usage: specify either the <see cref="P:Spring.Util.MethodInvoker.TargetType"/> and 
            <see cref="P:Spring.Util.MethodInvoker.TargetMethod"/> or the
            <see cref="P:Spring.Util.MethodInvoker.TargetObject"/> and
            <see cref="P:Spring.Util.MethodInvoker.TargetMethod"/> properties respectively, and
            (optionally) any arguments to the method. Then call the
            <see cref="M:Spring.Util.MethodInvoker.Prepare"/> method to prepare the invoker.
            Once prepared, the invoker can be invoked any number of times.
            </p>
            </remarks>
            <example>
            <p>
            The following example uses the <see cref="T:Spring.Util.MethodInvoker"/> class to invoke the
            <c>ToString()</c> method on the <c>Foo</c> class using a mixture of both named and unnamed
            arguments.
            </p>
            <code language="C#">
            public class Foo 
            {
                public string ToString(string name, int age, string address)
                {
            		return string.Format("{0}, {1} years old, {2}", name, age, address);
                }
                
                public static void Main()
                {
            		Foo foo = new Foo();
            		MethodInvoker invoker = new MethodInvoker();
            		invoker.Arguments = new object [] {"Kaneda", "18 Kaosu Gardens, Nakatani Drive, Okinanawa"};
            		invoker.AddNamedArgument("age", 29);
            		invoker.Prepare();
            		// at this point, the arguments that will be passed to the method invocation
            		// will have been resolved into the following ordered array : {"Kaneda", 29, "18 Kaosu Gardens, Nakatani Drive, Okinanawa"}
            		string details = (string) invoker.Invoke();
            		Console.WriteLine (details);
            		// will print out 'Kaneda, 29 years old, 18 Kaosu Gardens, Nakatani Drive, Okinanawa'
                }
            }
            </code>
            </example>
            <author>Colin Sampaleanu</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: MethodInvoker.cs,v 1.12 2005/03/30 17:01:21 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Util.MethodInvoker.MethodSearchingFlags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used to search for
            the method to be invoked.
            </summary>
        </member>
        <member name="F:Spring.Util.MethodInvoker.Void">
            <summary>
            The value returned from the invocation of a method that returns void.
            </summary>
        </member>
        <member name="F:Spring.Util.MethodInvoker._methodObject">
            <summary>
            The method that will be invoked.
            </summary>
        </member>
        <member name="M:Spring.Util.MethodInvoker.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Util.MethodInvoker"/> class.
            </summary>
        </member>
        <member name="M:Spring.Util.MethodInvoker.SetStaticMethod(System.String)">
            <summary>
            Set the fully qualified static method name to invoke.
            </summary>
            <remarks>
            <p>
            Convenient alternative to specifying
            <see cref="P:Spring.Util.MethodInvoker.TargetType"/> and
            <see cref="P:Spring.Util.MethodInvoker.TargetMethod"/>.
            </p>
            </remarks>
            <example>
            <p><c>Example.MyExampleType.MyExampleMethod, MyAssembly</c></p>
            </example>
            <param name="staticMethod">
            The fully qualified static method name to invoke.
            </param>
            <exception cref="T:System.ArgumentException">
            If the method name is not fully qualified.
            </exception>
        </member>
        <member name="M:Spring.Util.MethodInvoker.Prepare">
            <summary>
            Prepare the specified method.
            </summary>
            <remarks>
            <p>
            The method can be invoked any number of times afterwards.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set, or a matching argument could not be found
            for a named argument (typically down to a typo).
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
        </member>
        <member name="M:Spring.Util.MethodInvoker.FindTheMethodToInvoke">
            <summary>
            Searches for and returns the method that is to be invoked.
            </summary>
            <remarks>
            The return value of this method call will subsequently be returned from the
            <see cref="M:Spring.Util.MethodInvoker.GetPreparedMethod"/>.
            </remarks>
            <returns>The method that is to be invoked.</returns>
            <exception cref="T:System.MissingMethodException">
            If no method could be found.
            </exception>
            <exception cref="T:System.ArgumentException">
            If more than one method was found.
            </exception>
        </member>
        <member name="M:Spring.Util.MethodInvoker.AddNamedArgument(System.String,System.Object)">
            <summary>
            Adds the named argument to this instances mapping of argument names to argument values.
            </summary>
            <param name="argumentName">
            The name of an argument on the method that is to be invoked.
            </param>
            <param name="argument">
            The value of the named argument on the method that is to be invoked.
            </param>
        </member>
        <member name="M:Spring.Util.MethodInvoker.GetPreparedMethod">
            <summary>
            Returns the prepared <see cref="T:System.Reflection.MethodInfo"/> object that
            will be invoked.
            </summary>
            <remarks>
            <p>
            A possible use case is to determine the return <see cref="T:System.Type"/> of the method.
            </p>
            </remarks>
            <returns>
            The prepared <see cref="T:System.Reflection.MethodInfo"/> object that
            will be invoked.
            </returns>
        </member>
        <member name="M:Spring.Util.MethodInvoker.Invoke">
            <summary>
            Invoke the specified method.
            </summary>
            <remarks>
            <p>
            The invoker needs to have been prepared beforehand (via a call to the
            <see cref="M:Spring.Util.MethodInvoker.Prepare"/> method).
            </p>
            </remarks>
            <returns>
            The object returned by the method invocation, or
            <see cref="F:Spring.Util.MethodInvoker.Void"/> if the method returns void.
            </returns>
            <exception cref="T:Spring.Objects.MethodInvocationException">
            If at least one of the arguments passed to this <see cref="T:Spring.Util.MethodInvoker"/>
            was incompatible with the signature of the invoked method.
            </exception>
        </member>
        <member name="P:Spring.Util.MethodInvoker.TargetType">
            <summary>
            The target <see cref="T:System.Type"/> on which to call the target method.
            </summary>
            <remarks>
            <p>
            Only necessary when the target method is static; else, a target object
            needs to be specified anyway.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Util.MethodInvoker.TargetObject">
            <summary>
            The target object on which to call the target method.
            </summary>
            <remarks>
            <p>
            Only necessary when the target method is not static; else, a target class
            is sufficient.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Util.MethodInvoker.TargetMethod">
            <summary>
            The name of the method to be invoked.
            </summary>
            <remarks>
            <p>
            Refers to either a static method or a non-static method, depending on
            whether or not a target object has been set.
            </p>
            </remarks>
            <seealso cref="P:Spring.Util.MethodInvoker.TargetObject"/>
        </member>
        <member name="P:Spring.Util.MethodInvoker.Arguments">
            <summary>
            Arguments for the method invocation.
            </summary>
            <remarks>
            <p>
            Ordering <b>is</b> significant... the order of the arguments in this
            property must match the ordering of the various parameters on the target
            method. Ther does however exist a small possibility for confusion when
            the arguments in this property are supplied in addition to one or more named
            arguments. In this case, each named argument is slotted into the index position
            corresponding to the named argument... once once all named arguments have been
            resolved, the arguments in this property are slotted into any remaining (empty)
            slots in the method parameter list (see the example in the overview of the
            <see cref="T:Spring.Util.MethodInvoker"/> class if this is not clear).
            </p>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is a null or zero-length array, a method with no (un-named) arguments is assumed.
            </p>
            </remarks>
            <seealso cref="P:Spring.Util.MethodInvoker.NamedArguments"/>
        </member>
        <member name="P:Spring.Util.MethodInvoker.PreparedArguments">
            <summary>
            The resolved arguments for the method invocation.
            </summary>
            <remarks>
            <note type="caution">
            This property is not set until the target method has been resolved via a call to the
            <see cref="M:Spring.Util.MethodInvoker.Prepare"/> method). It is a combination of the
            named and plain vanilla arguments properties, and it is this object array that
            will actually be passed to the invocation of the target method.
            </note>
            <p>
            Setting the value of this property to null results in basically clearing out any
            previously prepared arguments... another call to the <see cref="M:Spring.Util.MethodInvoker.Prepare"/>
            method will then be required to prepare the arguments again (or the prepared arguments
            can be set explicitly if so desired).
            </p>
            </remarks>
            <seealso cref="P:Spring.Util.MethodInvoker.Arguments"/>
            <seealso cref="P:Spring.Util.MethodInvoker.NamedArguments"/>
        </member>
        <member name="P:Spring.Util.MethodInvoker.NamedArguments">
            <summary>
            Named arguments for the method invocation.
            </summary>
            <remarks>
            <p>
            The keys of this dictionary are the (<see cref="T:System.String"/>) names of the
            method arguments, and the (<see cref="T:System.Object"/>) values are the actual
            argument values themselves.
            </p>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is a null reference, a method with no named arguments is assumed.
            </p>
            </remarks>
            <seealso cref="P:Spring.Util.MethodInvoker.Arguments"/>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.ArgumentConvertingMethodInvoker"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.Prepare">
            <summary>
            Prepare the specified method.
            </summary>
            <remarks>
            <p>
            The method can be invoked any number of times afterwards.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set.
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.ArgumentConvertingMethodInvoker.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of property.
            </param>
            <param name="typeConverter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.GetObject">
            <summary>
            Will return the same value each time if the singleton property is set
            to true, and otherwise return the value returned from invoking the
            specified method.
            </summary>
            <exception cref="T:System.Exception">if an error occured</exception>
            <returns>the value returned from the invoked method</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.AfterPropertiesSet">
            <summary>
            Prepares this method invoker
            </summary>
            <exception cref="T:System.ArgumentException">
            If all required properties are not set.
            </exception>
            <exception cref="T:System.MissingMethodException">
            If the specified method could not be found.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.IsSingleton">
            <summary>
            If a singleton should be created, or a new object on each request.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.MethodInvokingFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or null
            if not known in advance.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> that returns a value which is an
            IGenericObjectFactory that returns an object from an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            As such, this may be used to avoid having a client object directly
            calling
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            to get a prototype object out of the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>,
            a violation of inversion of control. Instead, with the use of this
            class, the client object can be fed an
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> as a property
            that directly returns only the one target (usually prototype) object.
            </p>
            <p>
            A sample config in an XML <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            might look as follows:
            </p>
            <p>
            &lt;objects&gt;
              &lt;!-- Prototype object since we have state --&gt;
              &lt;object id="MyService" type="A.B.C.MyService" singleton="false"&gt;
              &lt;/object&gt;
              
              &lt;object id="MyServiceFactory" type="Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject"&gt;
                &lt;property name="TargetObjectName"&gt;&lt;idref local="MyService"/&gt;&lt;/property&gt;
              &lt;/object&gt;
              
              &lt;object id="MyClientObject" type="A.B.C.MyClientObject"&gt;
                &lt;property name="MyServiceFactory"&gt;&lt;ref local="MyServiceFactory"/&gt;&lt;/property&gt;
              &lt;/object&gt;
            &lt;/objects&gt;
            </p>
            </remarks>
            <author>Colin Sampaleanu</author>
            <author>Simon White (.NET)</author>
            <version>$Id: ObjectFactoryCreatingFactoryObject.cs,v 1.4 2005/02/24 16:41:39 springboy Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectFactoryAware">
            <summary>
            Interface to be implemented by objects that wish to be aware of their owning
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>. Objects can e.g.
            look up collaborating objects via the factory.
            </summary>
            <remarks>
            <p>
            Note that most objects will choose to receive references to collaborating
            objects via respective properties.
            </p>
            <p>
            For a list of all object lifecycle methods, see the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> API documentation.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectFactoryAware.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be null). The object can immediately call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.CreateInstance">
            <summary>
            Returns an instance of the object factory.
            </summary>
            <returns>The object factory.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.TargetObjectName">
            <summary>
            Sets the name of the target object. The target has to be a
            prototype object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.ObjectFactory">
            <summary>
            Callback that supplies the owning factory to an object instance.
            </summary>
            <value>
            Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            (may not be null). The object can immediately call methods on the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of initialization errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.ObjectType">
            <summary>
            The type of object created by this factory.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.GenericObjectFactory">
            <summary>
            Inner class to replicate the anonymous inner class used
            in the Java version.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.IGenericObjectFactory">
            <summary>
            Interface defining a factory which can return an object instance
            (possibly shared or independent) when invoked. 
            </summary>
            <remarks>
            This interface is typically used to encapsulate a generic factory 
            which returns a new instance (prototype) on each invocation.
            It is similar to the <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, but
            implementations of the aforementioned interface are normally meant to be defined
            as instances by the user in an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>,
            while implementations of this class are normally meant to be fed as a property to
            other objects; as such, the
            <see cref="M:Spring.Objects.Factory.IGenericObjectFactory.GetObject"/> method
            has different exception handling behavior.
            </remarks>
            <author>Colin Sampaleanu</author>
            <author>Simon White (.NET)</author>
            <version>$Id: IGenericObjectFactory.cs,v 1.4 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.IGenericObjectFactory.GetObject">
            <summary>
            Return an instance (possibly shared or independent)
            of the object managed by this factory.
            </summary>
            <returns>
            An instance of the object (should never be <see langword="null"/>).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.GenericObjectFactory.#ctor(Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject)">
            <summary>
            Constructs a new GenericObjectFactory.
            </summary>
            <param name="enclosing">
            The enclosing
            <see cref="T:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ObjectFactoryCreatingFactoryObject.GenericObjectFactory.GetObject">
            <summary>
            Returns the object created by the enclosed object factory.
            </summary>
            <returns>The created object.</returns>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer">
            <summary>
            A property resource configurer that overrides object property values in an application
            context definition. It pushes values from a config file into object definitions.
            </summary>
            <remarks>
            Configuration lines are expected to be of the following form:
            
            <name-values>
            	<add key="name.property" value="val"/>
            </name-values>
            
            In contrast to PropertyPlaceholderConfigurer, the original definition can have default
            values or no values at all for such object properties. If an overriding config file does
            not have an entry for a certain object property, the default context definition is used.
            
            Note that the context definition is not aware of being overridden;
            so this is not immediately obvious when looking at the XML definition file.
            
            In case of multiple PropertyOverrideConfigurers that define different values for
            the same object property, the <i>last</i> one will win (due to the overriding mechanism).
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyResourceConfigurer">
            <summary>
            Allows for configuration of individual object property values from a property resource,
            i.e. a .NET style .config file.
            </summary>
            <remarks>
            <p>
            Useful for custom .NET style files targetted at system administrators that
            override object properties configured in the application context.
            </p>
            <p>
            Two concrete implementations are provided in the distribution :
            <list type="bullet">
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/> for
            "name.property=value" style overriding (pushing values from a .config
            file into object definitions).
            </description>
            </item>
            <item>
            <description>
            <see cref="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer"/> for
            replacing "${...}" placeholders (pulling values from a .config file into
            object definitions).
            </description>
            </item>
            </list>
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyResourceConfigurer.LOG">
            <summary>
            Logger to be used by this class
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.PostProcessObjectFactory(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory)">
            <summary>
            Performs post processing on the specified object factory.
            </summary>
            <param name="factory">The object factory.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <param name="props">The properties to apply.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Order">
            <summary>
            Return the order value of this object, where a higher value means greater in
            terms of sorting.
            </summary>
            <remarks>
            <p>
            Normally starting with 0 or 1, with <see cref="F:System.Int32.MaxValue"/> indicating
            greatest. Same order values will result in arbitrary positions for the affected
            objects.
            </p>
            <p>
            Higher value can be interpreted as lower priority, consequently the first object
            has highest priority.
            </p>
            </remarks>
            <returns>The order value.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Properties">
            <summary>
            The default properties to be applied.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Location">
            <summary>
            Set the location of a .NET style .config file to be loaded.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.Locations">
            <summary>
            Set locations of .NET style .config files to be loaded.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.ConfigSections">
            <summary>
            The configuration sections to look for within the .config files
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyResourceConfigurer.IgnoreResourceNotFound">
            <summary>
            Set if failure to find the .config resource should be ignored.
            True is appropriate if the .config file is completely optional.
            Default is false.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyOverrideConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the object factory.
            </summary>
            <param name="factory">the object factory used by the application context</param>
            <param name="props">the properties to apply</param>
            <exception cref="T:Spring.Objects.ObjectsException">if an error occurs</exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyOverrideConfigurer.ProcessKey(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.String,System.String)">
            <summary>
            Process the given key as 'name.property' entry.
            </summary>
            <param name="factory">
            The object factory (most probably used used by an application context).
            </param>
            <param name="key">The key.</param>
            <param name="theValue">The value.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occurs.
            </exception>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the property was not well formed (i.e. not in the format "name.property").
            </exception>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer">
            <summary>
            A property resource configurer that resolves placeholders in object property
            values of context definitions. It pulls values from a config file into
            object definitions.
            </summary>
            <remarks>
            <p>
            The default placeholder syntax follows the NAnt style:
              ${...}
            </p>
            <p>
            Example XML context definition:
            </p>
            <example>
            <code>
            &lt;object id="dataSource" type="Spring.DB.DefaultDataSource"&gt;
            &lt;property name="driverClassName"&gt;&lt;value&gt;${driver}&lt;/value&gt;&lt;/property&gt;
            &lt;property name="url"&gt;&lt;value&gt;jdbc:${dbname}&lt;/value&gt;&lt;/property&gt;
            &lt;/object&gt;
            </code>
            </example>
            <p>Example config file:</p>
            <example>
            <code>
            &lt;name-values&gt;
            &lt;add key="driver" value="Some.Example.Driver"%gt;
            &lt;add key="dbname" value="db:url"&gt;
            &lt;name-values&gt;
            </code>
            </example>
            <p>
            <c>PropertyPlaceholderConfigurer</c> checks simple property values, lists, maps,
            props, and object names in object references. Furthermore, placeholder values can
            also cross-reference other placeholders, like...
            </p>
            <example>
            <code>
            &lt;name-values&gt;
            &lt;add key="rootPath" value="myrootdir"%gt;
            &lt;add key="subPath" value="${rootPath}/subdir"&gt;
            &lt;name-values&gt;
            </code>
            </example>
            <p>
            In contrast to
            <see cref="T:Spring.Objects.Factory.Config.PropertyOverrideConfigurer"/>, this
            configurer allows to fill in explicit placeholders in context definitions.
            Therefore, the original definition cannot specify any default values for
            such object properties, and the placeholder config file is supposed to
            contain an entry for each defined placeholder.
            </p>
            <p>
            If a configurer cannot resolve a placeholder, an
            <see cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException"/>
            will be thrown. If you want to check against multiple config files, specify
            multiple resources via the "locations" setting. You can also define multiple
            <c>PropertyPlaceholderConfigurer</c> instances, each with its own placeholder
            syntax.
            </p>
            <p>
            Default property values can be defined via "properties", to make overriding
            definitions in config files optional.
            </p>
            <p>
            Note that the context definition is aware of being incomplete;
            this is immediately obvious when looking at the XML definition file.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: PropertyPlaceholderConfigurer.cs,v 1.8 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderPrefix">
            <summary>
            Default placeholder prefix.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.DefaultPlaceholderSuffix">
            <summary>
            Default placeholder suffix.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ProcessProperties(Spring.Objects.Factory.Config.IConfigurableListableObjectFactory,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Apply the given properties to the supplied
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>.
            </summary>
            <param name="factory">
            The <see cref="T:Spring.Objects.Factory.Config.IConfigurableListableObjectFactory"/>
            used by the application context.
            </param>
            <param name="props">The properties to apply.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occured.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseObjectDefinition(System.Collections.Specialized.NameValueCollection,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Populates the supplied <paramref name="definition"/> with
            constructor arguments and property values stripped from the
            supplied <paramref name="properties"/> collection.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="definition">
            The object definition being populated.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParsePropertyValues(System.Collections.Specialized.NameValueCollection,Spring.Objects.MutablePropertyValues)">
            <summary>
            Populates the supplied <paramref name="propertyValues"/> with
            property values ripped from the supplied collection of unresolved
            <paramref name="properties"/>.
            </summary>
            <param name="properties">
            The map of (unresolved) property values.
            </param>
            <param name="propertyValues">
            The collection of property values that will be populated with
            resolved properties.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseIndexedArgumentValues(System.Collections.Specialized.NameValueCollection,System.Collections.IDictionary)">
            <summary>
            Populates the supplied <paramref name="properties"/> with
            constructor arguments ripped from the supplied collection of unresolved
            indexed <paramref name="arguments"/>.
            </summary>
            <param name="properties">
            The collection of property values that will be populated with
            resolved constructor arguments.
            </param>
            <param name="arguments">
            The map of (unresolved) constructor arguments.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseGenericArgumentValues(System.Collections.Specialized.NameValueCollection,Spring.Collections.Set)">
            <summary>
            Populates the supplied <paramref name="properties"/> with
            constructor arguments ripped from the supplied collection of unresolved
            generic <paramref name="arguments"/>.
            </summary>
            <param name="properties">
            The collection of property values that will be populated with
            resolved constructor arguments.
            </param>
            <param name="arguments">
            The map of (unresolved) constructor arguments.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseValue(System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            Parses an unresolved value.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="val">
            The value that is to be resolved.
            </param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseList(System.Collections.Specialized.NameValueCollection,System.Collections.IList)">
            <summary>
            Parses the given <see cref="T:System.Collections.IList"/>, exchanging
            i'ts values if necessary.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="list">
            The <see cref="T:System.Collections.IList"/> that is to be resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseSet(System.Collections.Specialized.NameValueCollection,Spring.Collections.ISet)">
            <summary>
            Parse the given <see cref="T:Spring.Collections.ISet"/>, exchanging it's
            values if necessary.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="theSet">
            The <see cref="T:Spring.Collections.ISet"/> that is to be resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseDictionary(System.Collections.Specialized.NameValueCollection,System.Collections.IDictionary)">
            <summary>
            Parse the given <see cref="T:System.Collections.IDictionary"/>, exchanging
            it's values if necessary.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="dictionary">
            The <see cref="T:System.Collections.IDictionary"/> that is to be resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ParseString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Parse values recursively to be able to resolve cross-references between
            placeholder values.
            </summary>
            <param name="properties">
            The map of constructor arguments and property values.
            </param>
            <param name="strVal">The string to be resolved.</param>
            <param name="originalPlaceholder"></param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If an error occurs.
            </exception>
            <returns>The resolved string.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ResolvePlaceholder(System.String,System.Collections.Specialized.NameValueCollection,Spring.Objects.Factory.Config.EnvironmentVariableMode)">
            <summary>
            Resolve the given placeholder using the given name value collection, performing
            an environment variables check according to the given mode.
            </summary>
            <remarks>The default implementation delegates to 
            <code>ResolvePlaceholder(placeholder, props)</code> before/afer the
            environment variable check.  Subclasses can override this for custom
            resolution strategies, including customized points for the
            environment properites check
            </remarks>
            <param name="placeholder">The placeholder to resolve</param>
            <param name="props">the merged name value collection of this configurer</param>
            <param name="mode">the environment variable mode.
            <see cref="T:Spring.Objects.Factory.Config.EnvironmentVariableMode"/> for
            more information.</param>
            <returns>the resolved value or null if none.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.ResolvePlaceholder(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Resolve the given placeholder using the given name value collection.
            </summary>
            <remarks>
            <p>
            The default implementation simply checks for a corresponding key.
            </p>
            <p>
            Subclasses can override this for customized placeholder-to-key mappings
            or custom resolution strategies, possibly just using the given name value collection
            as fallback.
            </p>
            </remarks>
            <param name="placeholder">The placeholder to resolve.</param>
            <param name="props">
            The merged name value collection of this configurer.
            </param>
            <returns>The resolved value.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderPrefix">
            <summary>
            The placeholder prefix (default is ${}).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.PlaceholderSuffix">
            <summary>
            The placeholder suffix (default is })
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.IgnoreUnresolvablePlaceholders">
            <summary>
            Indicates whether unresolved placeholders should be ignored.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyPlaceholderConfigurer.environmentVariableMode">
            <summary>
            Property to control how environment variables will be used to 
            replace property placeholders.  
            See <see cref="T:Spring.Objects.Factory.Config.EnvironmentVariableMode"/>
            for options.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject">
            <summary>
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> implementation that
            retrieves a static or non-static <b>public</b> property value.
            </summary>
            <remarks>
            <p>
            Typically used for retrieving <b>public</b> property values.
            </p>
            </remarks>
            <author>Rick Evans (.NET)</author>
            <version>$Id: PropertyRetrievingFactoryObject.cs,v 1.6 2005/03/29 01:05:34 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.AfterPropertiesSet">
            <summary>
            Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            after it has set all object properties supplied
            (and satisfied <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>
            and ApplicationContextAware).
            </summary>
            <remarks>
            <p>
            This method allows the object instance to perform initialization only
            possible when all object properties have been set and to throw an
            exception in the event of misconfiguration.
            </p>
            </remarks>
            <exception cref="T:System.Exception">
            In the event of misconfiguration (such as failure to set an essential
            property) or if initialization fails.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.CreateInstance">
            <summary>
            Template method that subclasses must override to construct the object
            returned by this factory.
            </summary>
            <remarks>
            Invoked on initialization of this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> in case of a singleton;
            else, on each GetObject() call.
            </remarks>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>The object returned by this factory.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.StaticProperty">
            <summary>
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the static property
            to be retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.Arguments">
            <summary>
            Arguments for the property invocation.
            </summary>
            <remarks>
            <p>
            If this property is not set, or the value passed to the setter invocation
            is a null or zero-length array, a property with no arguments is assumed.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetProperty">
            <summary>
            The name of the property the value of which is to be retrieved.
            </summary>
            <remarks>
            <p>
            Refers to either a static property or a non-static property, depending on a
            target object being set.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetObject">
            <summary>
            The object instance on which the property is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.TargetType">
            <summary>
            The <see cref="T:System.Type"/> on which the property is defined.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.PropertyRetrievingFactoryObject.ObjectType">
            <summary>
            Return the type of object that this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates, or null
            if not known in advance.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.ResourceManagerFactoryObject">
            <summary>
            A convenience classs to create a <see cref="T:System.Resources.ResourceManager"/> given
            the resource base name and assembly name.
            </summary>
            <author>Mark Pollack</author>
            <version>$Id: ResourceManagerFactoryObject.cs,v 1.5 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.ResourceManagerFactoryObject"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.CreateInstance">
            <summary>
            Template method that subclasses must override to construct the object
            returned by this factory.
            </summary>
            <remarks>
            Invoked on initialization of this
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> in case of a singleton;
            else, on each GetObject() call.
            </remarks>
            <exception cref="T:System.Exception">
            If an exception occured during object creation.
            </exception>
            <returns>The object returned by this factory.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.BaseName">
            <summary>
            The root name of the resources.
            </summary>
            <remarks>
            <p>
            For example, the root name for the resource file named
            "MyResource.en-US.resources" is "MyResource".
            </p>
            <note>
            The namespace is also prefixed before the resource file name.
            </note>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.AssemblyName">
            <summary>
            The string representation of the assembly that contains the resource.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Config.ResourceManagerFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Resources.ResourceManager"/> <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.RuntimeObjectReference">
            <summary>
            Immutable placeholder class used for the value of a
            <see cref="T:Spring.Objects.PropertyValue"/> object when it's a reference
            to another object in this factory to be resolved at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RuntimeObjectReference.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/> class.
            </summary>
            <param name="name">The name of the target object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Config.RuntimeObjectReference.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.RuntimeObjectReference.ObjectName">
            <summary>
            Return the target object name.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Config.SetFactoryObject">
            <summary>
            Simple factory object for shared <see cref="T:Spring.Collections.ISet"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: SetFactoryObject.cs,v 1.5 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Config.SetFactoryObject.CreateInstance">
            <summary>
            Constructs a new instance of the target set.
            </summary>
            <returns>The new <see cref="T:Spring.Collections.ISet"/> instance.</returns>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.SourceSet">
            <summary>
            Set the source <see cref="T:Spring.Collections.ISet"/>.
            </summary>
            <remarks>
            <p>
            This value will be used to populate the <see cref="T:Spring.Collections.ISet"/>
            returned by this factory.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.TargetSetType">
            <summary>
            Set the <see cref="T:System.Type"/> of the <see cref="T:Spring.Collections.ISet"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            The default is the <see cref="T:Spring.Collections.HybridSet"/> <see cref="T:System.Type"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Config.SetFactoryObject.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> of objects created by this factory.
            </summary>
            <value>
            Always returns the <see cref="T:Spring.Collections.ISet"/> <see cref="T:System.Type"/>.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory">
            <summary>
            Abstract <see cref="T:Spring.Objects.Factory.IObjectFactory"/> superclass
            that implements default object creation.
            </summary>
            <remarks>
            <p>
            Provides object creation, initialization and wiring, supporting
            autowiring and constructor resolution. Handles runtime object
            references, managed collections, and object destruction.
            </p>
            <p>
            The main template method to be implemented by subclasses is
            <see cref="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.FindMatchingObjects(System.Type)"/>,
            used for autowiring by type. Note that this class does not implement object
            definition registry capabilities
            (<see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            does).
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: AbstractAutowireCapableObjectFactory.cs,v 1.28 2005/03/30 17:00:03 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectFactory">
            <summary>
            Abstract superclass for <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            implementations.
            </summary>
            <remarks>
            <p>
            This class provides singleton / prototype determination, singleton caching,
            object definition aliasing, <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            handling, and object definition merging for child object definitions.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: AbstractObjectFactory.cs,v 1.22 2005/03/30 17:00:06 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.CURRENTLY_IN_CREATION">
            <summary>
            Marker object to be temporarily registered in the singleton cache,
            while instantiating an object (in order to be able to detect circular references).
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectFactory.log">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.#ctor(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/> class.
            </summary>
            <param name="parentFactory">
            The parent object factory.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Type,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ApplyObjectPropertyValues(System.Object,System.String)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <remarks>
            <p>
            The object definition can either define a fully self-contained object,
            reusing it's property values, or just property values meant to be used
            for existing object instances.
            </p>
            </remarks>
            <param name="instance">
            The exisiting object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.InitObjectWrapper(Spring.Objects.IObjectWrapper)">
            <summary>
            Initializes the given <see cref="T:Spring.Objects.IObjectWrapper"/> with the
            custom <see cref="T:System.ComponentModel.TypeConverter"/>s registered with
            this factory.
            </summary>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> to initialise.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CreateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Create an object instance for the given object definition.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="definition">
            The object definition for the object that is to be instantiated.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <returns>
            A new instance of the object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <remarks>
            <p>
            The object definition will already have been merged with the parent
            definition in case of a child definition.
            </p>
            <p>
            All the other methods in this class invoke this method, although objects
            may be cached after being instantiated by this method. All object
            instantiation within this class is performed by this method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)">
            <summary>
            Destroy the target object.
            </summary>
            <remarks>
            <p>
            Must destroy objects that depend on the given object before the object itself.
            Should not throw any exceptions.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="target">
            The target object instance to destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this object factory contains an object definition with the
            given name.
            Does not consider any hierarchy this factory may participate in.
            Invoked by ContainsObject when no cached singleton instance is found.
            </summary>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            If this object factory contains an object definition with the given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.AddSingleton(System.String,System.Object)">
            <summary>
            Add the given singleton object to the singleton cache of this factory.
            </summary>
            <remarks>
            <p>
            To be called for eager registration of singletons, e.g. to be able to
            resolve circular references.
            </p>
            </remarks>
            <param name="name">The name of the object.</param>
            <param name="singleton">The singleton object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.TransformedObjectName(System.String)">
            <summary>
            Return the object name, stripping out the factory dereference prefix if
            necessary, and resolving aliases to canonical names.
            </summary>
            <param name="name">
            The (untransformed) name of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(System.String,System.Boolean)">
            <summary>
            Return a <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>,
            even by traversing parent if the parameter is a child definition.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="includingAncestors">
            Are ancestors to be included in the merge?
            </param>
            <remarks>
            <p>
            Will ask the parent object factory if not found in this instance.
            </p>
            </remarks>
            <returns>
            A merged <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            with overridden properties.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetMergedObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Return a <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>,
            even by traversing parent if the parameter is a child definition.
            </summary>
            <returns>
            A merged <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            with overridden properties.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObjectForSharedInstance(System.String,System.Object)">
            <summary>
            Get the object for the given shared object, either the object
            instance itself or its created object in case of an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>.
            </summary>
            <param name="name">
            The name that may include the factory dereference prefix.
            </param>
            <param name="instance">The shared object instance.</param>
            <returns>
            The singleton instance of the object.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetFactoryObject(System.String)">
            <summary>
            Convenience method to pull an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            from this factory.
            </summary>
            <param name="objectName">
            The name of the factory object to be retrieved. If this name is not a valid
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> name, it will be converted
            into one.
            </param>
            <returns>
            The <see cref="T:Spring.Objects.Factory.IFactoryObject"/> associated with the
            supplied <paramref name="objectName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsFactoryDereference(System.String)">
            <summary>
            Return whether this name is a factory dereference (beginning with
            the factory dereference prefix).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsFactoryObject(System.String)">
            <summary>
            Determine whether the object with the given name is an
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>.
            </summary>
            <param name="name">name of the object to check</param>
            <returns>true if a factory object.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RemoveSingleton(System.String)">
            <summary>
            Remove the object identified by the supplied
            <paramref name="name"/> from the singleton cache
            of this factory.
            </summary>
            <remarks>
            <p>
            To be able to clean up eager registration of a singleton object
            if creation failed.
            </p>
            </remarks>
            <param name="name">
            The name of the object that is to be removed from the singleton
            cache.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames(System.Type)">
            <summary>
            Return the names of objects in the singleton cache that match the given
            object type (including subclasses).
            </summary>
            <param name="type">
            The class or interface to match, or null for all object names.
            </param>
            <remarks>
            <p>
            Will <i>not</i> consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s
            as the type of their created objects is not known before instantiation.
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of objects in the singleton cache that match the given
            object type (including subclasses), or an empty array if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            More specifically, checks the type of object that GetObject would return.
            For an IFactoryObject, returns the type of object that the FactoryObject creates.
            </summary>
            <param name="name">the name of the object to query</param>
            <returns>The type of the object or null if not determinable</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonNames">
            <summary>
            Return the names of objects in the singleton cache. Does not consider 
            any hierarchy this factory may participate in.
            </summary>
            <returns>The names of objects in the singleton cache.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetSingletonCount">
            <summary>
            Return the number of objects in the singleton cache.
            </summary>
            <remarks>
            Does not consider any hierarchy this factory may participate in.
            </remarks>
            <returns>The number of objects in the singleton cache.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroySingleton(System.String)">
            <summary>
            Destroys the named singleton object.
            </summary>
            <remarks>
            <p>
            Delegates to
            <see cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)"/>
            if a corresponding singleton instance is found.
            </p>
            </remarks>
            <param name="name">
            The name of the singleton object that is to be destroyed.
            </param>
            <seealso cref="M:Spring.Objects.Factory.Support.AbstractObjectFactory.DestroyObject(System.String,System.Object)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CheckMergedObjectDefinition(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,System.Type,System.Object[])">
            <summary>
            Check the supplied merged object definition for any possible
            validation errors.
            </summary>
            <param name="mergedObjectDefinition">
            The object definition to be checked for validation errors.
            </param>
            <param name="objectName">
            The name of the object associated with the supplied object definition.
            </param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of object validation errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsTemporarySingletonPlaceHolder(System.Object)">
            <summary>
            Is the supplied <paramref name="resolvedValue"/> the temporary object
            that is placed into the singleton cache during object resolution?
            </summary>
            <param name="resolvedValue">
            The value to be checked.
            </param>
            <returns>
            <b>True</b> if the supplied <paramref name="resolvedValue"/> is the temporary
            object that is placed into the singleton cache during object resolution.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <p>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            always return the same object?
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Object[])">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.FindObjectInCache(System.String)">
            <summary>
            Tries to find cached object for the specified name. 
            </summary>
            <param name="objectName">Object name to look for.</param>
            <returns>Cached object if found, null otherwise.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.CreateAndCacheSingletonInstance(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Creates a singleton instance for the specified object name and definition.
            </summary>
            <param name="objectName">
            The object name (will be used as the key in the singleton cache key).
            </param>
            <param name="objectDefinition">The object definition.</param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <returns>The created object instance.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            Provides a measure of type safety by throwing an exception if the object is
            not of the required <see cref="T:System.Type"/>.
            </p>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            If the object is not of the required type.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ConfigureObject(System.Object)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.Dispose">
            <summary>
            Destroy all cached singletons in this factory.
            </summary>
            <remarks>
            <p>
            To be called on shutdown of a factory.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.IgnoreDependencyType(System.Type)">
            <summary>
            Ignore the given dependency type for autowiring
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            <p>
            This will typically be used for dependencies that are resolved
            in other ways, like <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            through <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be ignored.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.AddObjectPostProcessor(Spring.Objects.Factory.Config.IObjectPostProcessor)">
            <summary>
            Add a new <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            that will get applied to objects created by this factory.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="objectPostProcessor">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>
            to register.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterAlias(System.String,System.String)">
            <summary>
            Given an object name, create an alias.
            </summary>
            <remarks>
            <p>
            We typically use this method to support names that are illegal within
            XML ids (used for object names).
            </p>
            <p>
            Typically invoked during factory configuration, but can also be
            used for runtime registration of aliases. Therefore, a factory
            implementation should synchronize alias access.
            </p>
            </remarks>
            <param name="name">The name of the object.
            </param>
            <param name="alias">
            The alias that will behave the same as the object name.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterSingleton(System.String,System.Object)">
            <summary>
            Register the given existing object as singleton in the object factory,
            under the given object name.
            </summary>
            <remarks>
            <p>
            Typically invoked during factory configuration, but can also be
            used for runtime registration of singletons. Therefore, a factory
            implementation should synchronize singleton access; it will have
            to do this anyway if it supports lazy initialization of singletons.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="singletonObject">The existing object.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the singleton could not be registered.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectFactory.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            <p>
            To be invoked during factory configuration.
            </p>
            </remarks>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the property.
            </param>
            <param name="converter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.ObjectPostProcessors">
            <summary>
            Gets the <see cref="T:System.Collections.IList"/> of
            <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            that will be applied to objects created by this factory.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.CustomTypeConverters">
            <summary>
            Return the <see cref="T:System.Collections.IDictionary"/> of custom
            <see cref="T:System.ComponentModel.TypeConverter"/>s, with
            <see cref="T:System.Type"/>s as keys and
            <see cref="T:System.ComponentModel.TypeConverter"/>s as values.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.IgnoredDependencyTypes">
            <summary>
            Return the set of classes that will get ignored for autowiring.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.ParentObjectFactory">
            <summary>
            Return the parent object factory, or null if there is none.
            </summary>
            <value>
            The parent object factory, or null if there is none.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectFactory.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <remarks>
            <p>
            This method allows an object factory to be used as a replacement for the
            Singleton or Prototype design pattern.
            </p>
            <p>
            Note that callers should retain references to returned objects. There is no
            guarantee that this method will be implemented to be efficient. For example,
            it may be synchronized, or may need to run an RDBMS query.
            </p>
            <p>
            Will ask the parent factory if the object cannot be found in this factory
            instance.
            </p>
            <p>
            This is the indexer for the <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            interface.
            </p>
            </remarks>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.MethodResolutionFlags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used during the invocation and
            searching for of methods.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.#ctor(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            class.
            </summary>
            <param name="parentFactory">
            The parent object factory, or null if none.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPropertyValues(System.Object,System.String)">
            <summary>
            Apply the property values of the object definition with the supplied
            <paramref name="name"/> to the supplied <paramref name="instance"/>.
            </summary>
            <remarks>
            <p>
            The object definition can either define a fully self-contained object,
            reusing it's property values, or just property values meant to be used
            for existing object instances.
            </p>
            </remarks>
            <param name="instance">
            The exisiting object that the property values for the named object will
            be applied to.
            </param>
            <param name="name">
            The name of the object definition associated with the property values that are
            to be applied.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyPropertyValues(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.IPropertyValues)">
            <summary>
            Apply the given property values, resolving any runtime references
            to other objects in this object factory.
            </summary>
            <param name="name">
            The object name passed for better exception information.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
            <param name="properties">
            The new property values.
            </param>
            <remarks>
            <p>
            Must use deep copy, so that we don't permanently modify this property.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.UnsatisfiedObjectProperties(Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Return an array of object-type property names that are unsatisfied.
            </summary>
            <remarks>
            <p>
            These are probably unsatisfied references to other objects in the
            factory. Does not include simple properties like primitives or
            <see cref="T:System.String"/>s.
            </p>
            </remarks>
            <returns>
            An array of object-type property names that are unsatisfied.
            </returns>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.Dispose">
            <summary>
            Destroy all cached singletons in this factory.
            </summary>
            <remarks>
            <p>
            To be called on shutdown of a factory.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.PopulateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Populate the object instance in the given
            <see cref="T:Spring.Objects.IObjectWrapper"/> with the property values from the
            object definition.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.WireEvents(System.String,Spring.Objects.Factory.Config.IConfigurableObjectDefinition,Spring.Objects.IObjectWrapper)">
            <summary>
            Wires up any exposed events in the object instance in the given
            <see cref="T:Spring.Objects.IObjectWrapper"/> with any event handler
            values from the <paramref name="definition"/>.
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireByName(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.MutablePropertyValues)">
            <summary>
            Fills in any missing property values with references to
            other objects in this factory if autowire is set to
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName"/>.
            </summary>
            <param name="name">
            The object name to be autowired by <see cref="T:System.Type"/>.
            </param>
            <param name="definition">
            The definition of the named object to update through autowiring.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object (and
            from which we can rip out information concerning the object).
            </param>
            <param name="properties">
            The property values to register wired objects with.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireByType(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.MutablePropertyValues)">
            <summary>
            Defines "autowire by type" (object properties by type) behavior.
            </summary>
            <remarks>
            <p>
            This is like PicoContainer default, in which there must be exactly one object
            of the property type in the object factory. This makes object factories simple
            to configure for small namespaces, but doesn't work as well as standard Spring
            behavior for bigger applications.
            </p>
            </remarks>
            <param name="name">
            The object name to be autowired by <see cref="T:System.Type"/>.
            </param>
            <param name="definition">
            The definition of the named object to update through autowiring.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object (and
            from which we can rip out information concerning the object).
            </param>
            <param name="properties">
            The property values to register wired objects with.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Create an object instance for the given object definition.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="definition">
            The object definition for the object that is to be instantiated.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <returns>
            A new instance of the object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <remarks>
            <p>
            Delegates to the
            <see cref="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[],System.Boolean)"/>
            method version with the <c>allowEagerCaching</c> parameter set to <b>true</b>.
            </p>
            <p>
            The object definition will already have been merged with the parent
            definition in case of a child definition.
            </p>
            <p>
            All the other methods in this class invoke this method, although objects
            may be cached after being instantiated by this method. All object
            instantiation within this class is performed by this method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateObject(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[],System.Boolean)">
            <summary>
            Create an object instance for the given object definition.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="definition">
            The object definition for the object that is to be instantiated.
            </param>
            <param name="arguments">
            The arguments to use if creating a prototype using explicit arguments to
            a static factory method. It is invalid to use a non-null arguments value
            in any other case.
            </param>
            <param name="allowEagerCaching">
            Whether eager caching of singletons is allowed... typically true for
            singlton objects, but never true for inner object definitions.
            </param>
            <returns>
            A new instance of the object.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
            <remarks>
            <p>
            The object definition will already have been merged with the parent
            definition in case of a child definition.
            </p>
            <p>
            All the other methods in this class invoke this method, although objects
            may be cached after being instantiated by this method. All object
            instantiation within this class is performed by this method.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiateUsingFactoryMethod(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.Object[])">
            <summary>
            Instantiate an object instance using a named factory method.
            </summary>
            <remarks>
            <p>
            The method may be static, if the <paramref name="definition"/>
            parameter specifies a class, rather than a
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instance, or an
            instance variable on a factory object itself configured using Dependency
            Injection.
            </p>
            <p>
            Implementation requires iterating over the static or instance methods
            with the name specified in the supplied <paramref name="definition"/>
            (the method may be overloaded) and trying to match with the parameters.
            We don't have the types attached to constructor args, so trial and error
            is the only way to go here. The args array may contain argument values
            passed in programmatically via the overloaded
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> method.
            </p>
            </remarks>
            <param name="name">
            The name associated with the supplied <paramref name="definition"/>.
            </param>
            <param name="definition">
            The definition describing the instance that is to be instantiated.
            </param>
            <param name="arguments">
            Any arguments to the factory method that is to be invoked.
            </param>
            <returns>
            The result of the factory method invocation (the instance).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.CreateArgumentArray(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.ObjectWrapper,System.Type[])">
            <summary>
            Create an array of arguments to invoke a constructor or static factory method,
            given the resolved constructor arguments values.
            </summary>
            <param name="name"></param>
            <param name="definition"></param>
            <param name="resolvedValues"></param>
            <param name="wrapper"></param>
            <param name="argTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DoTypeConversionIfNecessary(Spring.Objects.ObjectWrapper,System.Object,System.Type)">
            <summary>
            Convenience method that synchronizes a call to the supplied <paramref name="wrapper"/>s
            <see cref="M:Spring.Objects.ObjectWrapper.DoTypeConversionIfNecessary(System.Object,System.Type)"/> method if
            any custom type converters have been registered with this factory.
            </summary>
            <remarks>
            <p>
            Necessary 'cos <see cref="T:System.ComponentModel.TypeConverter"/> instances ain't
            thread-safe.
            </p>
            </remarks>
            <param name="wrapper">
            The wrapper that we're going to forward the conversion call onto after (possibly)
            synchronizing.
            </param>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireConstructor(System.String,Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            "autowire constructor" (with constructor arguments by type) behaviour.
            </summary>
            <remarks>
            <p>
            Also applied if explicit constructor argument values are specified,
            matching all remaining arguments with objects from the object factory.
            </p>
            <p>
            This corresponds to constructor injection: in this mode, a Spring.NET
            object factory is able to host components that expect constructor-based
            dependency resolution.
            </p>
            </remarks>
            <param name="name">
            The name of the object to autowire by type.
            </param>
            <param name="definition">
            The object definition to update through autowiring.
            </param>
            <returns>
            An <see cref="T:Spring.Objects.IObjectWrapper"/> for the new instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveConstructorArguments(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,Spring.Objects.Factory.Config.ConstructorArgumentValues)">
            <summary>
            Resolves the <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            of the supplied <paramref name="definition"/>.
            </summary>
            <remarks>
            <p>
            'Resolve' can be taken to mean that all of the <paramref name="definition"/>s
            constructor arguments is resolved into a concrete object that can be plugged
            into one of the <paramref name="definition"/>s constructors. Runtime object
            references to other objects in this (or a parent) factory are resolved,
            type conversion is performed, etc.
            </p>
            <p>
            These resolved values are plugged into the supplied
            <paramref name="resolvedValues"/> object, because we wouldn't want to touch
            the <paramref name="definition"/>s constructor arguments in case it (or any of
            its constructor arguments) is a prototype object definition.
            </p>
            <p>
            This method is also used for handling invocations of static factory methods.
            </p>
            </remarks>
            <param name="name">
            The name of the object that is being resolved by this factory.
            </param>
            <param name="definition">
            The definition associated with the above <paramref name="name"/>.
            </param>
            <param name="resolvedValues">
            Where the resolved constructor arguments will be placed.
            </param>
            <returns>
            The minimum number of arguments that any constructor for the supplied
            <paramref name="definition"/> must have.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DependencyCheck(System.String,Spring.Objects.Factory.Config.IConfigurableObjectDefinition,Spring.Objects.IObjectWrapper,Spring.Objects.IPropertyValues)">
            <summary>
            Perform a dependency check that all properties exposed have been set, if desired.
            </summary>
            <remarks>
            <p>
            Dependency checks can be objects (collaborating objects), simple (primitives
            and <see cref="T:System.String"/>), or all (both).
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="wrapper">
            The <see cref="T:Spring.Objects.IObjectWrapper"/> wrapping the target object.
            </param>
            <param name="properties">
            The property values to be checked.
            </param>
            <exception cref="T:Spring.Objects.Factory.UnsatisfiedDependencyException">
            If all of the checked dependencies were not satisfied.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InvokeInitMethods(System.Object,System.String,Spring.Objects.Factory.Config.IConfigurableObjectDefinition)">
            <summary>
            Give an object a chance to react now all its properties are set,
            and a chance to know about its owning object factory (this object).
            </summary>
            <remarks>
            <p>
            This means checking whether the object implements
            <see cref="T:Spring.Objects.Factory.IInitializingObject"/> and  / or
            <see cref="T:Spring.Objects.Factory.IObjectFactoryAware"/>, and invoking the
            necessary callback(s) if it does.
            </p>
            <p>
            Custom init methods are resolved in a <b>case-insensitive</b> manner.
            </p>
            </remarks>
            <param name="target">
            The new object instance we may need to initialise.
            </param>
            <param name="name">
            The name the object has in the factory. Used for debug output.
            </param>
            <param name="definition">
            The definition of the target object instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InvokeCustomDestroyMethod(System.String,System.Object,System.String)">
            <summary>
            Invoke the specified custom destroy method on the given object.
            </summary>
            <remarks>
            <p>
            This implementation invokes a no-arg method if found, else checking
            for a method with a single boolean argument (passing in "true",
            assuming a "force" parameter), else logging an error.
            </p>
            <p>
            Can be overridden in subclasses for custom resolution of destroy
            methods with arguments.
            </p>
            <p>
            Custom destroy methods are resolved in a <b>case-insensitive</b> manner.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DestroyObject(System.String,System.Object)">
            <summary>
            Destroy the target object.
            </summary>
            <remarks>
            <p>
            Must destroy objects that depend on the given object before the object itself.
            Should not throw any exceptions.
            </p>
            </remarks>
            <param name="name">
            The name of the object.
            </param>
            <param name="target">
            The target object instance to destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.DestroyDependantObjects(System.String)">
            <summary>
            Destroys all of the objects registered as dependant on the 
            object (definition) identified by the supplied <paramref name="name"/>. 
            </summary>
            <param name="name">
            The name of the root object (definition) that is itself being destroyed.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveValueIfNecessary(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.String,System.Object)">
            <summary>
            Given a property value, return a value, resolving any references to other
            objects in the factory if necessary.
            </summary>
            <remarks>
            <p>
            The value could be :
            <list type="bullet">
            <item>
            <p>
            An <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>,
            which leads to the creation of a corresponding new object instance.
            Singleton flags and names of such "inner objects" are always ignored: inner objects
            are anonymous prototypes.
            </p>
            </item>
            <item>
            <p>
            A <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>, which must
            be resolved.
            </p>
            </item>
            <item>
            <p>
            A <see cref="T:Spring.Objects.Factory.Support.ManagedList"/>. This is a special
            collection that may contain
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>s or
            collections that will need to be resolved.
            </p>
            </item>
            <item>
            <p>
            A <see cref="T:Spring.Objects.Factory.Support.ManagedSet"/>. May also contain
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>s or
            collections that will need to be resolved.
            </p>
            </item>
            <item>
            <p>
            A <see cref="T:Spring.Objects.Factory.Support.ManagedMap"/>. In this case the
            value may be a
            <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/> or collection
            that will need to be resolved.
            </p>
            </item>
            <item>
            <p>
            An ordinary object or null, in which case it's left alone.
            </p>
            </item>
            </list>
            </p>
            </remarks>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="argumentValue">
            The value of the property that is being resolved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveInnerObjectDefinition(System.String,System.String,Spring.Objects.Factory.Config.IObjectDefinition,System.Boolean)">
            <summary>
            Resolves an inner object definition.
            </summary>
            <param name="name">
            The name of the object that surrounds this inner object definition.
            </param>
            <param name="innerObjectName">
            The name of the inner object definition... note: this is a synthetic
            name assigned by the factory (since it makes no sense for inner object
            definitions to have names).
            </param>
            <param name="definition">
            The definition of the inner object that is to be resolved.
            </param>
            <param name="singletonOwner">
            Indicates if the owner of the property is a singleton.
            </param>
            <returns>
            The resolved object as defined by the inner object definition.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveReference(Spring.Objects.Factory.Config.IConfigurableObjectDefinition,System.String,System.String,Spring.Objects.Factory.Config.RuntimeObjectReference)">
            <summary>
            Resolve a reference to another object in the factory.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="reference">
            The runtime reference containing the value of the property.
            </param>
            <returns>A reference to another object in the factory.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveManagedList(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.Support.ManagedList)">
            <summary>
            For each element in the
            <see cref="T:Spring.Objects.Factory.Support.ManagedList"/>, resolve reference
            if necessary.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="ml">
            The (placeholder) list containing the list values.
            </param>
            <returns>
            The populated list.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveManagedSet(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.Support.ManagedSet)">
            <summary>
            For each element in the 
            <see cref="T:Spring.Objects.Factory.Support.ManagedSet"/>, resolve reference if necessary.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="ms">
            The (placeholder) set containing the set values.
            </param>
            <returns>
            The populated set.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ResolveManagedMap(System.String,Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.Support.ManagedMap)">
            <summary>
            For each element in the 
            <see cref="T:Spring.Objects.Factory.Support.ManagedMap"/>, resolve reference if necessary.
            </summary>
            <param name="name">
            The name of the object that is having the value of one of its properties resolved.
            </param>
            <param name="definition">
            The definition of the named object.
            </param>
            <param name="argumentName">
            The name of the property the value of which is being resolved.
            </param>
            <param name="mm">
            The (placeholder) map containing the map values.
            </param>
            <returns>
            The populated map.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.FindMatchingObjects(System.Type)">
            <summary>
            Find object instances that match the required type.
            </summary>
            <remarks>
            <p>
            Called by autowiring. If a subclass cannot obtain information about object
            names by type, a corresponding exception should be thrown.
            </p>
            </remarks>
            <param name="requiredType">
            The type of the objects to look up.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of object names and object
            instances that match the required type, or null if none found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.GetDependingObjectNames(System.String)">
            <summary>
            Return the names of the objects that depend on the given object.
            Called by DestroyObject, to be able to destroy depending objects first.
            </summary>
            <param name="name">
            The name of the object to find depending objects for.
            </param>
            <returns>
            The array of names of depending objects, or the empty string array if none.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.Autowire(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Create a new object instance of the given class with the specified
            autowire strategy.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object to instantiate.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not applicable to
            autowiring a constructor, thus ignored there).
            </param>
            <returns>The new object instance.</returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.AutowireObjectProperties(System.Object,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Autowire the object properties of the given object instance by name or
            <see cref="T:System.Type"/>.
            </summary>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="autowireMode">
            The desired autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for the object.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the wiring fails.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="autowireMode"/> is not one of the
            <seealso cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByName"/> or
            <seealso cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType"/>
            values.
            </exception>
            <seealso cref="T:Spring.Objects.Factory.Config.AutoWiringMode"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsBeforeInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessBeforeInitialization(System.Object,System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.ApplyObjectPostProcessorsAfterInitialization(System.Object,System.String)">
            <summary>
            Apply <see cref="T:Spring.Objects.Factory.Config.IObjectPostProcessor"/>s
            to the given existing object instance, invoking their
            <see cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
            methods.
            </summary>
            <remarks>
            <p>
            The returned object instance may be a wrapper around the original.
            </p>
            </remarks>
            <param name="instance">
            The existing object instance.
            </param>
            <param name="name">
            The name of the object.
            </param>
            <returns>
            The object instance to use, either the original or a wrapped one.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any post-processing failed.
            </exception>
            <seealso cref="M:Spring.Objects.Factory.Config.IObjectPostProcessor.PostProcessAfterInitialization(System.Object,System.String)"/>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory._disposableInnerObjects">
            <summary>
            Set that holds all inner objects created by this factory that implement the IDisposable
            interface, to be destroyed on call to Dispose.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory.InstantiationStrategy">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Support.IInstantiationStrategy"/>
            implementation to be used to instantiate managed objects.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectDefinition">
            <summary>
            Common base class for object definitions, factoring out common
            functionality from
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor(Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.#ctor(Spring.Objects.Factory.Support.AbstractObjectDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            class.
            </summary>
            <param name="other">
            The object definition used to initialise the member fields of this
            instance.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.ValidateMethodOverride(Spring.Objects.Factory.Support.MethodOverride)">
            <summary>
            Validate the supplied method override.
            </summary>
            <param name="mo">
            The <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> to be validated.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinition.OverrideFrom(Spring.Objects.Factory.Support.AbstractObjectDefinition)">
            <summary>
            Override settings in this object definition from the given object
            definition.
            </summary>
            <param name="other">
            The object definition used to override the member fields of this instance.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.PropertyValues">
            <summary>
            The property values that are to be applied to the object
            upon creation.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasMethodOverrides">
            <summary>
            Returns true if this definition has any method overrides.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ConstructorArgumentValues">
            <summary>
            Return the constructor argument values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.EventHandlerValues">
            <summary>
            The event handler values for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.MethodOverrides">
            <summary>
            The method overrides (if any) for this object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsSingleton">
            <summary>
            Return whether this a <b>Singleton</b>, with a single, shared instance
            returned on all calls,
            </summary>
            <remarks>
            <p>
            If false, an object factory will apply the <b>Prototype</b>
            design pattern, with each caller requesting an instance getting an
            independent instance. How this is defined will depend on the
            object factory implementation. <b>Singletons</b> are the commoner type.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsLazyInit">
            <summary>
            Is this object lazily initialized?</summary>
            <remarks>
            <p>
            Only applicable to a singleton object.
            </p>
            <p>
            If false, it will get instantiated on startup by object factories
            that perform eager initialization of singletons.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.IsAbstract">
            <summary>
            Is this object definition "abstract", i.e. not meant to be instantiated
            itself but rather just serving as parent for concrete child object
            definitions.
            </summary>
            <value>
            True if this object definition is "abstract".
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
            <value>
            A resolved object <see cref="T:System.Type"/>.
            </value>
            <exception cref="T:System.ApplicationException">
            If the <see cref="T:System.Type"/> of the object definition is not a
            resolved <see cref="T:System.Type"/> or null.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasObjectType">
            <summary>
            Is the <see cref="T:System.Type"/> of the object definition a resolved
            <see cref="T:System.Type"/>?
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ObjectTypeName">
            <summary>
            Returns the <see cref="P:System.Type.FullName"/> of the
            <see cref="T:System.Type"/> of the object definition (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ResourceDescription">
            <summary>
            A description of the resource that this object definition
            came from (for the purpose of showing context in case of errors).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.AutowireMode">
            <summary>
            The autowire mode as specified in the object definition.
            </summary>
            <remarks>
            <p>
            This determines whether any automagical detection and setting of
            object references will happen. Default is
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.No"/>,
            which means there's no autowire.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.ResolvedAutowireMode">
            <summary>
            Gets the resolved autowire code.
            </summary>
            <remarks>
            <p>
            This resolves
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.AutoDetect"/>
            to one of 
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.Constructor"/>
            or
            <see cref="F:Spring.Objects.Factory.Config.AutoWiringMode.ByType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependencyCheck">
            <summary>
            The dependency check code.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DependsOn">
            <summary>
            The object names that this object depends on.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized
            before.
            </p>
            <p>
            Note that dependencies are normally expressed through object properties
            or constructor arguments. This property should just be necessary for
            other kinds of dependencies like statics (*ugh*) or database
            preparation on startup.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.InitMethodName">
            <summary>
            The name of the initializer method.
            </summary>
            <remarks>
            <p>
            The default is null, in which case there is no initializer method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.DestroyMethodName">
            <summary>
            Return the name of the destroy method.
            </summary>
            <remarks>
            <p>
            The default is null, in which case there is no destroy method.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.FactoryMethodName">
            <summary>
            The name of the factory method to use (if any).
            </summary>
            <remarks>
            <p>
            This method will be invoked with constructor arguments, or with no
            arguments if none are specified. The static method will be invoked on
            the specified <see cref="P:Spring.Objects.Factory.Config.IObjectDefinition.ObjectType"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.FactoryObjectName">
            <summary>
            The name of the factory object to use (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinition.HasConstructorArgumentValues">
            <summary>
            Does this object definition have any constructor argument values?
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader">
            <summary>
            Abstract base class for object definition readers.
            </summary>
            <remarks>
            <p>
            Provides common properties like the object registry to work on.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: AbstractObjectDefinitionReader.cs,v 1.5 2005/02/27 14:49:10 springboy Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectDefinitionReader">
            <summary>
            Simple interface for object definition readers.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <version>$Id: IObjectDefinitionReader.cs,v 1.2 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.Registry">
            <summary>
            Gets the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionReader.Domain">
            <summary>
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.log">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.AppDomain)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="domain">
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.Registry">
            <summary>
            Gets the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.AbstractObjectDefinitionReader.Domain">
            <summary>
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.AutowireUtils">
            <summary>
            Utility class that contains various methods useful for the implementation of
            autowire-capable object factories.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: AutowireUtils.cs,v 1.2 2005/03/30 17:00:07 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.#ctor">
            <summary>
            Creates a new instance of the AutowireUtils class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly
            visible constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetConstructors(Spring.Objects.Factory.Config.IObjectDefinition,System.Int32)">
            <summary>
            Gets those <see cref="T:System.Reflection.ConstructorInfo"/>s
            that are applicable for autowiring the supplied <paramref name="definition"/>.
            </summary>
            <param name="definition">
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
            (definition) that is being autowired by constructor.
            </param>
            <param name="minimumArgumentCount">
            The absolute minimum number of arguments that any returned constructor
            must have. If this parameter is equal to zero (0), then all constructors
            are valid (regardless of their argument count), including any default
            constructor.
            </param>
            <returns>
            Those <see cref="T:System.Reflection.ConstructorInfo"/>s
            that are applicable for autowiring the supplied <paramref name="definition"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.GetTypeDifferenceWeight(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Determine a weight that represents the class hierarchy difference between types and
            arguments.
            </summary>
            <remarks>
            <p>
            A direct match, i.e. type MyInteger -&gt; arg of class MyInteger, does not increase
            the result - all direct matches means weight 0. A match between type
            <see cref="T:System.Object"/> and arg of class MyInteger would increase the weight by 1,
            due to the superclass 1 steps up in the hierarchy (i.e. object) being the last one that
            still matches the required type object.
            </p>
            </remarks>
            <param name="argTypes">
            The argument <see cref="T:System.Type"/>s to match.
            </param>
            <param name="args">The arguments to match.</param>
            <returns>The accumulated weight for all arguments.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.AutowireUtils.SortConstructors(System.Reflection.ConstructorInfo[])">
            <summary>
            Sorts the supplied <paramref name="constructors"/>, preferring
            public constructors and "greedy" ones (that have lots of arguments).
            </summary>
            <remarks>
            <p>
            The result will contain public constructors first, with a decreasing number
            of arguments, then non-public constructors, again with a decreasing number
            of arguments.
            </p>
            </remarks>
            <param name="constructors">
            The <see cref="T:System.Reflection.ConstructorInfo"/> array to be sorted.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ChildObjectDefinition">
            <summary>
            Object definition for objects whose class is defined by their ancestry.
            </summary>
            <remarks>
            <p>
            <see cref="T:Spring.Objects.IPropertyValues"/> defined by the parent will
            also be "inherited", although it's possible to override them by redefining
            them in the property values associated with the child.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,System.Type,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.#ctor(System.String,System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            class.
            </summary>
            <param name="parentName">
            The name of the parent object.
            </param>
            <param name="typeName">
            The <see cref="P:System.Type.AssemblyQualifiedName"/> of the object to
            instantiate.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <param name="properties">
            The additional property values (if any) of the child.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ChildObjectDefinition.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ChildObjectDefinition.ParentName">
            <summary>
            The name of the parent object.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory">
            <summary>
            Concrete implementation of
            <see cref="T:Spring.Objects.Factory.IListableObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            Can be used as a standalone object factory, or as a superclass for
            custom object factories.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: DefaultListableObjectFactory.cs,v 1.16 2005/03/30 17:00:07 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry">
            <summary>
            Interface for registries that hold object definitions, i.e. 
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>
            instances.
            </summary>
            <remarks>
            <p>
            Typically implemented by object factories that work with the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectDefinition"/>
            hierarchy internally.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this registry.
            </summary>
            <returns>
            The names of all objects defined in this registry, or an empty array
            if none defined
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this registry contains a object definition with the given name.
            </summary>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            True if this object factory contains an object definition with the
            given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetObjectDefinition(System.String)">
            <summary>
            Returns the
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>
            for the given object name.
            </summary>
            <param name="name">
            The name of the object to find a definition for.
            </param>
            <returns>
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for
            the given name (never null).
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If the object definition cannot be resolved.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            and <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="definition">
            The definition of the object instance to register.
            </param>
            <remarks>
            <p>
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <param name="name">the object name to check for aliases
            </param>
            <remarks>
            <p>
            Will ask the parent factory if the object cannot be found in this
            factory instance.
            </p>
            </remarks>
            <returns>
            The aliases, or an empty array if none.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.RegisterAlias(System.String,System.String)">
            <summary>
            Given a object name, create an alias. We typically use this method to
            support names that are illegal within XML ids (used for object names).
            </summary>
            <param name="name">
            The name of the object.
            </param>
            <param name="theAlias">
            The alias that will behave the same as the object name.
            </param>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the alias is already in use.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.IObjectDefinitionRegistry.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the registry.
            </summary>
            <value>
            The number of objects defined in the registry.
            </value>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.#ctor(Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> class.
            </summary>
            <param name="parentFactory">
            The parent object factory.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.FindMatchingObjects(System.Type)">
            <summary>
            Find object instances that match the required type.
            </summary>
            <remarks>
            <p>
            Called by autowiring. If a subclass cannot obtain information about object
            names by type, a corresponding exception should be thrown.
            </p>
            </remarks>
            <param name="requiredType">
            The type of the objects to look up.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of object names and object
            instances that match the required type, or null if none found
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetDependingObjectNames(System.String)">
            <summary>
            Return the names of the objects that depend on the given object.
            Called by DestroyObject, to be able to destroy depending objects first.
            </summary>
            <param name="objectName">
            The name of the object to find depending objects for.
            </param>
            <returns>
            The array of names of depending objects, or the empty string array if none.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.IsObjectTypeMatch(System.String,System.Type)">
            <summary>
            Check whether the specified object matches the given type.
            </summary>
            <param name="objectName">The name of the object to check.</param>
            <param name="type">The <see cref="T:System.Type"/> to check for.</param>
            <returns>
            True if the object matches the given type or if the given type is null.
            </returns>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory._allowObjectDefinitionOverriding">
            <summary>
            Whether to allow re-registration of a different definition with the
            same name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory._objectDefinitionMap">
            <summary>
            Map of object definition objects, keyed by object name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DefaultListableObjectFactory._objectDefinitionNames">
            <summary>
            List of object definition names, in registration order.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this registry.
            </summary>
            <returns>
            The names of all objects defined in this registry, or an empty array
            if none defined
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Check if this registry contains a object definition with the given name.
            </summary>
            <param name="name">
            The name of the object to look for.
            </param>
            <returns>
            True if this object factory contains an object definition with the
            given name.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.RegisterObjectDefinition(System.String,Spring.Objects.Factory.Config.IObjectDefinition)">
            <summary>
            Register a new object definition with this registry.
            </summary>
            <param name="name">
            The name of the object instance to register.
            </param>
            <param name="objectDefinition">
            The definition of the object instance to register.
            </param>
            <remarks>
            <p>
            Must support
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> and
            <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/>.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object definition is invalid.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.PreInstantiateSingletons">
            <summary>
            Ensure that all non-lazy-init singletons are instantiated, also
            considering <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            Typically invoked at the end of factory setup, if desired.
            </p>
            <p>
            As this is a startup method, it should destroy already created singletons if
            it fails, to avoid dangling resources. In other words, after invocation
            of that method, either all or no singletons at all should be
            instantiated.
            </p>
            </remarks>
            <exception cref="T:Spring.Objects.ObjectsException">
            If one of the singleton objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinition(System.String)">
            <summary>
            Return the registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> for the
            given object, allowing access to its property values and constructor
            argument values.
            </summary>
            <param name="name">The name of the object.</param>
            <returns>
            The registered
            <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/>.
            </returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there is no object with the given name.
            </exception>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or null
            for all object names.
            </param>
            <remarks>
            <p>
            Will not consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            as the type of their created objects is not known before instantiation.
            </p>
            <p>
            Does not consider any hierarchy this factory may participate in.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. In this implementation,
            the results of this method call are the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses).
            </summary>
            <remarks>
            <p>
            Object's <see cref="T:System.Type"/> are judged from either the object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If any of the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultListableObjectFactory.DoGetObjectNamesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="includePrototypes"></param>
            <param name="includeFactoryObjects"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.DefaultListableObjectFactory.AllowObjectDefinitionOverriding">
            <summary>
            Set if it should be allowed to override object definitions by registering a
            different definition with the same name, automatically replacing the
            former. If not, an exception will be thrown. Default is true.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.DefaultListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the registry.
            </summary>
            <value>
            The number of objects defined in the registry.
            </value>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DefaultObjectDefinitionFactory">
            <summary>
            Default implementation of <see cref="T:Spring.Objects.Factory.IObjectDefinitionFactory"/>
            </summary>
            <remarks>
            <p>
            
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: DefaultObjectDefinitionFactory.cs,v 1.2 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectDefinitionFactory">
            <summary>
            Defines methods that object defintions factories need to implement.
            </summary>
            <remarks>
            <p>
            Allows for replaceable object definition factories using Startegy pattern.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>            <version>$Id: IObjectDefinitionFactory.cs,v 1.2 2005/03/30 17:00:01 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.IObjectDefinitionFactory.CreateObjectDefinition(System.String,System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues,System.AppDomain)">
            <summary>
            Factory style method for getting concrete
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectDefinition"/>
            instances.
            </summary>
            <param name="typeName">
            The <see cref="T:System.Type"/> of the defined object.
            </param>
            <param name="parent">The name of the parent object definition (if any).</param>
            <param name="arguments">The constructor arguments (if any).</param>
            <param name="properties">The property values (if any).</param>
            <param name="domain">
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </param>
            <returns>
            A concrete
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectDefinition"/>
            instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.DefaultObjectDefinitionFactory.CreateObjectDefinition(System.String,System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues,System.AppDomain)">
            <summary>
            Factory style method for getting concrete
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectDefinition"/>
            instances.
            </summary>
            <param name="typeName">
            The <see cref="T:System.Type"/> of the defined object.
            </param>
            <param name="parent">The name of the parent object definition (if any).</param>
            <param name="arguments">The constructor arguments (if any).</param>
            <param name="properties">The property values (if any).</param>
            <param name="domain">
            The <see cref="T:System.AppDomain"/> against which any class names
            will be resolved into <see cref="T:System.Type"/> instances.
            </param>
            <returns>
            A concrete
            <see cref="T:Spring.Objects.Factory.Config.IConfigurableObjectDefinition"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.DependencyCheckingMode">
            <summary>
            The various modes of dependency checking.
            </summary>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.None">
            <summary>
            DO not do any dependency checking.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.Objects">
            <summary>
            Check object references.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.Simple">
            <summary>
            Just check primitive (string, int, etc) values.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.DependencyCheckingMode.All">
            <summary>
            Check everything.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.IInstantiationStrategy">
            <summary>
            Responsible for creating instances corresponding to a
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: IInstantiationStrategy.cs,v 1.4 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.IInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="factoryMethod">
            The <see cref="T:System.Reflection.MethodInfo"/> to be used to get the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="factoryMethod"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ManagedList">
            <summary>
            Tag subclass used to hold managed elements, which may include runtime
            object references.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ManagedMap">
            <summary>
            Tag subclass used to hold managed elements, which may include runtime
            object references.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ManagedSet">
            <summary>
            Tag subclass used to hold managed elements, which may include runtime
            object references.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodOverride">
            <summary>
            Represents the override of a method on a managed object by the IoC container.
            </summary>
            <remarks>
            <p>
            Note that the override mechanism is <i>not</i> intended as a generic means of
            inserting crosscutting code: use AOP for that.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans</author>
            <version>$Id: MethodOverride.cs,v 1.4 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverride.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
            <param name="methodName">
            The name of the method that is to be overridden.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverride.Matches(System.Reflection.MethodInfo,Spring.Objects.Factory.Support.MethodOverrides)">
            <summary>
            Subclasses must override this to indicate whether they match the given method.
            This allows for argument list checking as well as method name checking.
            </summary>
            <param name="method">The method to be checked.</param>
            <param name="theOverrides">
            The owning <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/>
            instance. This allows us to check whether the method is overloaded.
            </param>
            <returns>
            True if this override matches the supplied <paramref name="method"/>.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverride.MethodName">
            <summary>
            The name of the method that is to be overridden.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.MethodOverrides">
            <summary>
            A collection (with set semantics) of method overrides, determining which, if any,
            methods on a managed object the Spring.NET IoC container will override at runtime.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans</author>
            <version>$Id: MethodOverrides.cs,v 1.4 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.#ctor(Spring.Objects.Factory.Support.MethodOverrides)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.MethodOverrides"/> class.
            </summary>
            <remarks>
            <p>
            Deep copy constructoe.
            </p>
            </remarks>
            <param name="other">
            The instance supplying initial overrides for this new instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.AddAll(Spring.Objects.Factory.Support.MethodOverrides)">
            <summary>
            Copy all given method overrides into this object.
            </summary>
            <param name="other">
            The overrides to be copied into this object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.Add(Spring.Objects.Factory.Support.MethodOverride)">
            <summary>
            Adds the supplied <paramref name="theOverride"/> to the overrides contained
            within this instance.
            </summary>
            <param name="theOverride">
            The <see cref="T:Spring.Objects.Factory.Support.MethodOverride"/> to be
            added.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.AddOverloadedMethodName(System.String)">
            <summary>
            Adds the supplied <paramref name="methodName"/> to the overloaded method names
            contained within this instance.
            </summary>
            <param name="methodName">
            The overloaded method name to be added.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.IsOverloadedMethodName(System.String)">
            <summary>
            Returns true if the supplied <paramref name="methodName"/> is present within
            the overloaded method names contained within this instance.
            </summary>
            <param name="methodName">
            The overloaded method name to be checked.
            </param>
            <returns>
            True if the supplied <paramref name="methodName"/> is present within
            the overloaded method names contained within this instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.GetOverride(System.Reflection.MethodInfo)">
            <summary>
            Return the override for the given method, if any.
            </summary>
            <param name="method">
            The method to check for overrides for.
            </param>
            <returns>
            the override for the given method, if any.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.MethodOverrides.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate
            through a collection.
            </summary>
            <remarks>
            <p>
            The returned <see cref="T:System.Collections.IEnumerator"/> is the
            <see cref="T:System.Collections.IEnumerator"/> exposed by the
            <see cref="P:Spring.Objects.Factory.Support.MethodOverrides.Overrides"/>
            property.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can iterate through a
            collection.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverrides.Overrides">
            <summary>
            The collection of method overrides.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.MethodOverrides.IsEmpty">
            <summary>
            Returns true if this instance contains no overrides.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionHolder">
            <summary>
            Holder for an <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> with
            name and aliases.
            </summary>
            <remarks>
            <p>
            Recognized by
            <see cref="T:Spring.Objects.Factory.Support.AbstractAutowireCapableObjectFactory"/>
            for inner object definitions. Registered by
            <see cref="T:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser"/>,
            which also uses it as general holder for a parsed object definition.
            </p>
            <p>
            Can also be used for programmatic registration of inner object
            definitions. If you don't care about the functionality offered by the
            <see cref="T:Spring.Objects.Factory.IObjectNameAware"/> interface and the like,
            registering <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/>
            or <see cref="T:Spring.Objects.Factory.Support.ChildObjectDefinition"/> is good enough.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: ObjectDefinitionHolder.cs,v 1.4 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionHolder.#ctor(Spring.Objects.Factory.Config.IObjectDefinition,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionHolder"/> class.
            </summary>
            <param name="definition">
            The object definition to be held by this instance.
            </param>
            <param name="name">The name of the object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionHolder.#ctor(Spring.Objects.Factory.Config.IObjectDefinition,System.String,System.String[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionHolder"/> class.
            </summary>
            <param name="definition">
            The object definition to be held by this instance.
            </param>
            <param name="name">The name of the object.</param>
            <param name="aliases">
            Any alias names of the object (null or an empty array if none).
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ObjectDefinitionHolder.ObjectDefinition">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Config.IObjectDefinition"/> held by this
            instance.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ObjectDefinitionHolder.ObjectName">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.ObjectDefinitionHolder.Aliases">
            <summary>
            Any aliases for the object (an empty array if none).
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils">
            <summary>
            Utility methods that are useful for
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionReader"/>
            implementations.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <version>$Id: ObjectDefinitionReaderUtils.cs,v 1.6 2005/03/30 17:00:08 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionReaderUtils.CreateEventHandlerValue(System.String,System.String)">
            <summary>
            Factory style method for getting concrete
            <see cref="T:Spring.Objects.IEventHandlerValue"/> instances.
            </summary>
            <param name="methodName">
            The name of the event handler method. This may be straight text, a regular
            expression, null, or empty.
            </param>
            <param name="eventName">
            The name of the event being wired. This too may be straight text, a regular
            expression, null, or empty.
            </param>
            <returns>
            A concrete <see cref="T:Spring.Objects.IEventHandlerValue"/>
            instance.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            <summary>
            Thrown when the validation of an object definition failed.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
            <param name="message">The detail message.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException"/>
            class.
            </summary>
            <param name="message">
            The detail message.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.ObjectDefinitionValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionValidationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader">
            <summary>
            Object definition reader for a simple properties format.
            </summary>
            <remarks>
            Provides object definition registration methods for
            <see cref="T:System.Collections.IDictionary"/> and
            <see cref="T:System.Resources.ResourceSet"/> instances. Typically applied to a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>.
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.TrueValue">
            <summary>
            Value of a T/F attribute that represents true.
            Anything else represents false. Case seNsItive.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.Separator">
            <summary>
            Separator between object name and property name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ClassKey">
            <summary>
            Prefix for the class property of a root object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.SingletonKey">
            <summary>
            Special string added to distinguish if the object will be
            a singleton.
            </summary>
            <remarks>
            <p>
            Default is true.
            </p>
            </remarks>
            <example>
            <p>
            owner.(singleton)=true
            </p>
            </example>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LazyInitKey">
            <summary>
            Special string added to distinguish if the object will be
            lazily initialised.
            </summary>
            <remarks>
            <p>
            Default is false.
            </p>
            </remarks>
            <example>
            <p>
            owner.(lazy-init)=true
            </p>
            </example>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ParentKey">
            <summary>
            Reserved "property" to indicate the parent of a child object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RefSuffix">
            <summary>
            Property suffix for references to other objects in the current
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/>: e.g.
            owner.dog(ref)=fido.
            </summary>
            <remarks>
            <p>
            Whether this is a reference to a singleton or a prototype
            will depend on the definition of the target object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RefPrefix">
            <summary>
            Prefix before values referencing other objects.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader"/>
            class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource,System.String)">
            <summary>
            Load object definitions from the specified properties file.
            </summary>
            <param name="resource">
            The resource descriptor for the properties file.
            </param>
            <param name="prefix">
            The match or filter for object definition names, e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">in case of loading or parsing errors</exception>
            <returns>the number of object definitions found</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Resources.ResourceSet)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Resources.ResourceSet"/>, using all property keys (i.e.
            not filtering by prefix).
            </summary>
            <param name="rs">
            The <see cref="T:System.Resources.ResourceSet"/> containing object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Resources.ResourceSet,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Resources.ResourceSet"/>.
            </summary>
            <remarks>
            <p>
            Similar syntax as for an <see cref="T:System.Collections.IDictionary"/>.
            This method is useful to enable standard .NET internationalization support.
            </p>
            </remarks>
            <param name="rs">
            The <see cref="T:System.Resources.ResourceSet"/> containing object definitions.
            </param>
            <param name="prefix">
            The match or filter for object definition names, e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary)">
            <summary>
            Register object definitions contained in an
            <see cref="T:System.Collections.IDictionary"/>, using all property keys
            (i.e. not filtering by prefix).
            </summary>
            <param name="id">
            The <see cref="T:System.Collections.IDictionary"/> containing object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Registers object definitions contained in an <see cref="T:System.Collections.Specialized.NameValueCollection"/> 
            using all property keys ( i.e. not filtering by prefix )
            </summary>
            <param name="nameValueCollection">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing 
            object definitions.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions registered.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            Ignores ineligible properties.
            </p>
            </remarks>
            <param name="id">IDictionary name -&gt; property (String or Object). Property values
            will be strings if coming from a Properties file etc. Property names
            (keys) must be strings. Type keys must be strings.
            </param>
            <param name="prefix">
            The match or filter within the keys in the map: e.g. 'objects.'
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions found.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinitions(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Register object definitions contained in a
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <remarks>
            <p>
            Ignores ineligible properties.
            </p>
            </remarks>
            <param name="id">IDictionary name -&gt; property (String or Object). Property values
            will be strings if coming from a Properties file etc. Property names
            (keys) must be strings. Type keys must be strings.
            </param>
            <param name="prefix">
            The match or filter within the keys in the map: e.g. 'objects.'
            </param>
            <param name="resourceDescription">
            The description of the resource that the
            <see cref="T:System.Collections.IDictionary"/> came from (for logging purposes).
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
            <returns>The number of object definitions found.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.RegisterObjectDefinition(System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Get all property values, given a prefix (which will be stripped)
            and add the object they define to the factory with the given name
            </summary>
            <param name="name">The name of the object to define.</param>
            <param name="id">
            The <see cref="T:System.Collections.IDictionary"/> containing string pairs.
            </param>
            <param name="prefix">The prefix of each entry, which will be stripped.</param>
            <param name="resourceDescription">
            The description of the resource that the
            <see cref="T:System.Collections.IDictionary"/> came from (for logging purposes).
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of loading or parsing errors.
            </exception>
        </member>
        <member name="P:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.DefaultParentObject">
            <summary>
            Name of default parent object
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Support.PropertiesObjectDefinitionReader.ObjectDefinitionFactory">
            <summary>
            Gets or sets object definition factory to use.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Support.RootObjectDefinition">
            <summary>
            Root object definitions have a class plus optionally constructor argument
            values, property values, and handlers for any events exposed by the
            object class.
            </summary>
            <remarks>
            <p>
            This is the most common type of object definition.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: RootObjectDefinition.cs,v 1.12 2005/03/30 17:00:09 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.AutoWiringMode)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton using the given autowire mode.
            </summary>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="autowireMode">
            The autowiring mode.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.AutoWiringMode,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton using the given autowire mode.
            </summary>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="autowireMode">
            The autowiring mode.
            </param>
            <param name="dependencyCheck">
            Whether to perform a dependency check for objects (not
            applicable to autowiring a constructor, thus ignored there)
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton, providing property values.
            </summary>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.MutablePropertyValues,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            with the given singleton status, providing property values.
            </summary>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <param name="singleton">
            The singleton status of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.Type,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton, providing property values and constructor arguments.
            </summary>
            <param name="type">
            The class of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,Spring.Objects.MutablePropertyValues)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton, providing property values and constructor arguments.
            </summary>
            <param name="typeName">
            The assembly qualified <see cref="P:System.Type.FullName"/> of the object to instantiate.
            </param>
            <param name="properties">
            The <see cref="T:Spring.Objects.MutablePropertyValues"/> to be applied to
            a new instance of the object.
            </param>
            <param name="arguments">
            The <see cref="T:Spring.Objects.Factory.Config.ConstructorArgumentValues"/>
            to be applied to a new instance of the object.
            </param>
            <remarks>
            <p>
            Takes an object class name to avoid eager loading of the object class.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.#ctor(Spring.Objects.Factory.Support.RootObjectDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.RootObjectDefinition"/> class
            for a singleton using the given autowire mode.
            </summary>
            <param name="other">
            The definition that is to be copied.
            </param>
            <remarks>
            <p>
            Deep copy constructor.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.Validate">
            <summary>
            Validate this object definition.
            </summary>
            <exception cref="T:Spring.Objects.Factory.Support.ObjectDefinitionValidationException">
            In the case of a validation failure.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.RootObjectDefinition.ToString">
            <summary>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.SimpleInstantiationStrategy">
            <summary>
            Simple object instantiation strategy for use in
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> implementations.
            </summary>
            <remarks>
            <p>
            Does not support method injection, although it provides hooks for subclasses
            to override to add method injection support, for example by overriding methods.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Rick Evans</author>
            <version>$Id: SimpleInstantiationStrategy.cs,v 1.7 2005/03/30 17:00:09 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.log">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Support.SimpleInstantiationStrategy"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.Instantiate(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </summary>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="factoryMethod">
            The <see cref="T:System.Reflection.MethodInfo"/> to be used to get the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="factoryMethod"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <remarks>
            <p>
            The default implementation of this method is to throw a
            <see cref="T:System.NotImplementedException"/>.
            </p>
            <p>
            Derived classes can override this method if they can instantiate an object
            with the Method Injection specified in the supplied
            <paramref name="definition"/>. Instantiation should use a no-arg constructor.
            </p>
            </remarks>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.SimpleInstantiationStrategy.InstantiateWithMethodInjection(Spring.Objects.Factory.Support.RootObjectDefinition,System.String,Spring.Objects.Factory.IObjectFactory,System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Instantiate an instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>,
            injecting methods as appropriate.
            </summary>
            <remarks>
            <p>
            The default implementation of this method is to throw a
            <see cref="T:System.NotImplementedException"/>.
            </p>
            <p>
            Derived classes can override this method if they can instantiate an object
            with the Method Injection specified in the supplied
            <paramref name="definition"/>. Instantiation should use the supplied
            <paramref name="constructor"/> and attendant <paramref name="arguments"/>.
            </p>
            </remarks>
            <param name="definition">
            The definition of the object that is to be instantiated.
            </param>
            <param name="name">
            The name associated with the object definition. The name can be the null
            or zero length string if we're autowiring an object that doesn't belong
            to the supplied <paramref name="factory"/>.
            </param>
            <param name="factory">
            The owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            </param>
            <param name="constructor">
            The <see cref="T:System.Reflection.ConstructorInfo"/> to be used to instantiate
            the object.
            </param>
            <param name="arguments">
            Any arguments to the supplied <paramref name="constructor"/>. May be null.
            </param>
            <returns>
            An instance of the object described by the supplied
            <paramref name="definition"/> from the supplied <paramref name="factory"/>.
            </returns>
        </member>
        <member name="T:Spring.Objects.Factory.Support.StaticListableObjectFactory">
            <summary>
            Static factory that permits the programmatic registration of existing singleton instances.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: StaticListableObjectFactory.cs,v 1.5 2005/03/30 17:00:10 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Support.StaticListableObjectFactory.objects">
            Map from object name to object instance 
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObject(System.String,System.Type)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <param name="requiredType">
            <see cref="T:System.Type"/> the object may match. Can be an interface or
            superclass of the actual class. For example, if the value is the
            <see cref="T:System.Object"/> class, this method will succeed whatever the
            class of the returned instance.
            </param>
            <returns>The instance of the object.</returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String,System.Type)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ContainsObject(System.String)">
            <summary>
            Does this object factory contain an object with the given name?
            </summary>
            <param name="name">The name of the object to query.</param>
            <returns>True if an object with the given name is defined.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.IsSingleton(System.String)">
            <summary>
            Is this object a singleton?
            </summary>
            <remarks>
            <p>
            That is, will <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
            always return the same object?
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>True if the named object is a singleton.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetType(System.String)">
            <summary>
            Determine the type of the object with the given name.
            </summary>
            <remarks>
            <p>
            More specifically, checks the type of object that
            <see cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/> would return.
            For an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>, returns the type
            of object that the <see cref="T:Spring.Objects.Factory.IFactoryObject"/> creates.
            </p>
            </remarks>
            <param name="name">The name of the object to query.</param>
            <returns>The type of the object or null if not determinable.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetAliases(System.String)">
            <summary>
            Return the aliases for the given object name, if defined.
            </summary>
            <param name="name">The object name to check for aliases.</param>
            <returns>The aliases, or an empty array if none.</returns>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If there's no such object definition.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinitionNames">
            <summary>
            Return the names of all objects defined in this factory.
            </summary>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectDefinitionNames(System.Type)">
            <summary>
            Return the names of objects matching the given <see cref="T:System.Type"/>
            (including subclasses), judging from the object definitions.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match, or null
            for all object names.
            </param>
            <remarks>
            <p>
            Will not consider <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s,
            as the type of their created objects is not known before instantiation.
            </p>
            </remarks>
            <returns>
            The names of all objects defined in this factory, or an empty array if none
            are defined.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ContainsObjectDefinition(System.String)">
            <summary>
            Tests whether this object factory contains an object definition for the
            specified object name.
            </summary>
            <param name="name">The object name to query.</param>
            <returns>
            <b>True</b> if an object defintion is contained within this object factory.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectsOfType(System.Type)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <remarks>
            <p>
            This version of the <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)"/>
            method matches all kinds of object definitions, be they singletons, prototypes, or
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s. Typically, the results
            of this method call will be the same as a call to
            <code>IListableObjectFactory.GetObjectsOfType(type,true,true)</code> .
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.GetObjectsOfType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return the object instances that match the given object
            <see cref="T:System.Type"/> (including subclasses), judging from either object
            definitions or the value of
            <see cref="P:Spring.Objects.Factory.IFactoryObject.ObjectType"/> in the case of
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> (class or interface) to match.
            </param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons (also applies to
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/>s too
            or just normal objects.
            </param>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> of the matching objects,
            containing the object names as keys and the corresponding object instances
            as values.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.AddObject(System.String,System.Object)">
            <summary>
            Add a new singleton object.
            </summary>
            <param name="name">The name to be associated with the object name</param>
            <param name="obj">The singleton object.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ConfigureObject(System.Object)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object)"/>
        </member>
        <member name="M:Spring.Objects.Factory.Support.StaticListableObjectFactory.ConfigureObject(System.Object,System.String)">
            <summary>
            Injects dependencies into the supplied <paramref name="target"/> instance
            using the named object definition.
            </summary>
            <param name="target">
            The object instance that is to be so configured.
            </param>
            <param name="name">
            The name of the object definition expressing the dependencies that are to
            be injected into the supplied <parameref name="target"/> instance.
            </param>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.ConfigureObject(System.Object,System.String)"/>
        </member>
        <member name="P:Spring.Objects.Factory.Support.StaticListableObjectFactory.ObjectDefinitionCount">
            <summary>
            Return the number of objects defined in the factory.
            </summary>
            <value>
            The number of objects defined in the factory.
            </value>
        </member>
        <member name="P:Spring.Objects.Factory.Support.StaticListableObjectFactory.Item(System.String)">
            <summary>
            Return an instance (possibly shared or independent) of the given object name.
            </summary>
            <param name="name">The name of the object to return.</param>
            <returns>The instance of the object.</returns>
            <seealso cref="M:Spring.Objects.Factory.IObjectFactory.GetObject(System.String)"/>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser">
            <summary>
            Default implementation of the
            <see cref="T:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser"/> interface.
            </summary>
            <remarks>
            <p>
            Parses object definitions according to the "spring-objects" DTD.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: DefaultXmlObjectDefinitionParser.cs,v 1.32 2005/03/27 23:27:13 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser">
            <summary>
            Strategy interface for parsing XML object definitions.
            </summary>
            <remarks>
            <p>
            Used by <see cref="T:Spring.Objects.Factory.Xml.XmlResourceReader"/>
            for actually parsing a DOM document or Element fragment.
            </p>
            <p>
            Instantiated according to the lifecycle.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <author>Sandu Turcan (.NET)</author>
            <version>$Id: IXmlObjectDefinitionParser.cs,v 1.5 2005/03/15 03:58:47 idlsoft Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser.ParseRootElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parses the root element of the defintion.
            Usually sets the global settings that are defined for all objects,
            for example defaultLazyInit etc.
            </summary>
            <param name="root"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parses elements directly under the root node, usually
            object definiitons or import statements.
            This method is never invoked if the parser is namespace aware
            and was called to process the root node.
            </summary>
            <param name="element"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser.Lifecycle">
            <summary>
            Indicates at which level the parser can be cached
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser.IsNamespaceAware">
            <summary>
            If true will take over and process the whole document
            including elements from other namespaces
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GeneratedIdSeparator">
            <summary>
            The string used as a separator in the generation of synthetic id's for
            those object definitions explicitly that aren't assigned one.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.log">
            <summary>
            The shared ILog instance for this class (and derived classes).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.#ctor">
            <summary>
            Creates a new instance of the  DefaultXmlObjectDefinitionParser class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseRootElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            
            </summary>
            <param name="root"></param>
            <param name="parser"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseElement(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ImportObjectDefinitionResource(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Loads external XML object definitions from the resource described by the supplied
            <paramref name="resource"/>.
            </summary>
            <param name="resource">The XML element describing the resource.</param>
            <param name="parser">The namespace-aware parser.</param>
            <exception cref="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            If the resource could not be imported.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseEventListenerDefinition(System.String,Spring.Objects.Factory.Config.EventValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>Parses an event listener definition.</summary>
            <param name="name">
            The name associated with the object that the event handler is being defined on.
            </param>
            <param name="events">The events being populated.</param>
            <param name="element">
            The element containing the event listener definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.RegisterObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse an object definition and register it with the object factory..
            </summary>
            <param name="element">
            The element containing the object definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseObjectDefinition(System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse a standard object definition into a
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionHolder"/>,
            including object name and aliases.
            </summary>
            <remarks>
            <p>
            Object elements specify their canonical name via the "id" attribute
            and their aliases as a delimited "name" attribute.
            </p>
            <p>
            If no "id" is specified, uses the first name in the "name" attribute
            as the canonical name, registering all others as aliases.
            </p>
            </remarks>
            <param name="element">
            The element containing the object definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
            <returns>
            The object (definition) wrapped within an
            <see cref="T:Spring.Objects.Factory.Support.ObjectDefinitionHolder"/>
            instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseObjectDefinition(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>Parse a standard object definition.</summary>
            <param name="element">The element containing the object definition.</param>
            <param name="id">The id of the object definition.</param>
            <param name="parser">The namespace-aware parser.</param>
            <returns>The object (definition).</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetConstructorArgSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse constructor argument subelements of the given object element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetEventHandlerSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse event handler subelements of the given object element.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetPropertyValueSubElements(System.String,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse property value subelements of the given object element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the property element (s)
            </param>
            <param name="element">
            The element containing the top level object definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
            <returns>
            The property (s) associated with the object (definition).
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParseConstructorArgElement(System.String,Spring.Objects.Factory.Config.ConstructorArgumentValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse a constructor-arg element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the ctor arg.
            </param>
            <param name="arguments">
            The list of constructor args associated with the object (definition).
            </param>
            <param name="element">
            The name of the element containing the ctor arg definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParsePropertyElement(System.String,Spring.Objects.MutablePropertyValues,System.Xml.XmlElement,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse a property element.
            </summary>
            <param name="name">
            The name of the object (definition) associated with the property.
            </param>
            <param name="properties">
            The list of properties associated with the object (definition).
            </param>
            <param name="element">
            The name of the element containing the property definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetPropertyValue(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Get the value of a property element (may be a list).</summary>
            <param name="element">The property element.</param>
            <param name="name">
            The name of the object associated with the property.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.ParsePropertySubElement(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Parse a value, ref or collection subelement of a property element.
            </summary>
            <param name="element">
            Subelement of property element; we don't know which yet.
            </param>
            <param name="name">
            The name of the object (definition) associated with the top level property.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetList(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Gets a list definition.
            </summary>
            <param name="element">
            The element describing the list definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the list definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
            <returns>The list definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetSet(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Gets a set definition.
            </summary>
            <param name="element">
            The element describing the set definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the set definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
            <returns>The set definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetMap(System.Xml.XmlElement,System.String,Spring.Objects.Factory.Xml.XmlResourceReader)">
            <summary>
            Gets a map definition.
            </summary>
            <param name="element">
            The element describing the map definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the map definition.
            </param>
            <param name="parser">
            The namespace-aware parser.
            </param>
            <returns>The map definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetChildElementsByTagName(System.Xml.XmlElement,System.String)">
            <summary>
            Don't use the horrible DOM API to get child elements: get an element's
            children with a given element name.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.SelectNodes(System.Xml.XmlElement,System.String)">
            <summary>
            Selects sub-elements with a given name.
            Uses a namespace manager if necessary.
            </summary>
            <param name="element"></param>
            <param name="childElementName"></param>
            <returns></returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetNameValues(System.Xml.XmlElement,System.String)">
            <summary>
            Gets a name value collection mapping definition.
            </summary>
            <param name="element">
            The element describing the name value collection mapping definition.
            </param>
            <param name="name">
            The name of the object (definition) associated with the
            name value collection mapping definition.
            </param>
            <returns>The name value collection definition.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetTextValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns element text or empty string if element is empty.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetDependencyCheck(System.String)">
            <summary>
            Strips the dependency check value out of the supplied string..
            </summary>
            <param name="att">
            The string containing the dependency check value.
            </param>
            <returns>The dependency check value.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetAutowireMode(System.String)">
            <summary>
            Strips the autowiring mode out of the supplied string..
            </summary>
            <param name="att">
            The string containing the autowiring mode definition.
            </param>
            <returns>The autowiring mode.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.GetObjectNames(System.String)">
            <summary>
            Given a string containing delimited object names, returns
            a string array split on the objects name delimeter.
            </summary>
            <param name="value">
            The string containing delimited object names.
            </param>
            <returns>
            A string array split on the objects name delimeter.
            </returns>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.Lifecycle">
            <summary>
            The parser is stateless so it can persist globally
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser.IsNamespaceAware">
            <summary>
            The parser will let the resource reader process namespaces
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ParserLifecycle">
            <summary>
            ParserLifecycle specifies how instances of <see cref="T:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser"/> are cached.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ParserLifecycle.Global">
            <summary>
            Cached globally, used by stateless, thread-safe parsers.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ParserLifecycle.DefinitionReader">
            <summary>
            Cached within the scope of one object definition, i.e.
            will maintain state across multiple resources used by the
            same definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ParserLifecycle.Resource">
            <summary>
            Cached within the scope of one resource, so if the
            definition spawns multiple resources an instance will
            be created for each one.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.ObjectsDtd">
            <summary>
            Constants defining the structure and values associated with the Spring.NET
            objects DTD.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.TrueValue">
            <summary>
            Value of a boolean attribute that represents true.
            </summary>
            <remarks>
            <p>
            Anything else represents false.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DefaultValue">
            <summary>
            Signifies that a default value is to be applied.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ImportElement">
            <summary>
            Defines an external XML object definition resource.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ImportResourceAttribute">
            <summary>
            Specifies the relative path to an external XML object definition resource.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DefaultLazyInitAttribute">
            <summary>
            Specifies the default lazy initialization mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DefaultDependencyCheckAttribute">
            <summary>
            Specifies the default dependency checking mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DefaultAutowireAttribute">
            <summary>
            Specifies the default autowire mode.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ObjectElement">
            <summary>
            Defines a single named object.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DescriptionElement">
            <summary>
            Element containing informative text describing the purpose of the enclosing
            element.
            </summary>
            <remarks>
            <p>
            Always optional.
            </p>
            <p>
            Used primarily for user documentation of XML object definition documents.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ClassAttribute">
            <summary>
            Specifes a <see cref="T:System.Type"/>. Must be fully assembly qualified.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ParentAttribute">
            <summary>
            The name or alias of the parent object definition that a child object definition
            inherits from.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.IdAttribute">
            <summary>
            Objects can be identified by an id, to enable reference checking.
            </summary>
            <remarks>
            <p>
            There are constraints on a valid XML id: if you want to reference your object
            in .NET code using a name that's illegal as an XML id, use the optional
            "name" attribute. If neither given, the object type name is used as id.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.NameAttribute">
            <summary>
            Optional. Can be used to create one or more aliases illegal in an id.
            </summary>
            <remarks>
            <p>
            Multiple aliases can be separated by any number of spaces, semicolons, or commas.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.SingletonAttribute">
            <summary>
            Is this object a "singleton" (one shared instance, which will
            be returned by all calls to GetObject() with the id), or a
            "prototype" (independent instance resulting from each call to GetObject().
            </summary>
            <remarks>
            <p>
            Singletons are most commonly used, and are ideal for multi-threaded
            service objects.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ScopeAttribute">
            <summary>
            Controls object scope. Only applicable to ASP.Net web applications.
            </summary>
            <remarks>
            <p>
            Scope can be defined as either application, session or request. It defines when "singleton"
            instances are initialized, but has no effect on prototype definitions.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DependsOnAttribute">
            <summary>
            The names of the objects that this object depends on being initialized.
            </summary>
            <remarks>
            <p>
            The object factory will guarantee that these objects get initialized before this
            object definition.
            </p>
            <p>
            Note that dependencies are normally expressed through object properties or
            constructor arguments. This property should just be necessary for other kinds
            of dependencies like statics (*ugh*) or database preparation on startup.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.InitMethodAttribute">
            <summary>
            Optional attribute for the name of the custom initialization method
            to invoke after setting object properties.
            </summary>
            <remarks>
            <p>
            The method must have no arguments, but may throw any exception.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DestroyMethodAttribute">
            <summary>
            Optional attribute for the name of the custom destroy method to invoke
            on object factory shutdown.
            </summary>
            <remarks>
            <p>
            The method must have no arguments, but may throw any exception.
            </p>
            <p>
            <b>Note: Only invoked on singleton objects!</b>
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ConstructorArgElement">
            <summary>
            A constructor argument : the constructor-arg tag can have an optional type attribute,
            to specify the exact type of the constructor argument
            </summary>
            <remarks>
            <p>
            Only needed  to avoid ambiguities, e.g. in case of 2 single argument constructors
            that can both be converted from a String.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.IndexAttribute">
            <summary>
            The constructor-arg tag can have an optional index attribute,
            to specify the exact index in the constructor argument list.
            </summary>
            <remarks>
            <p>
            Only needed to avoid ambiguities, e.g. in case of 2 arguments of the same type.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ArgumentNameAttribute">
            <summary>
            The constructor-arg tag can have an optional named parameter attribute,
            to specify a named parameter in the constructor argument list.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AbstractAttribute">
            <summary>
            Is this object "abstract", i.e. not meant to be instantiated itself but
            rather just serving as parent for concrete child object definitions?
            </summary>
            <remarks>
            <p>
            Default is false. Specify true to tell the object factory to not try to
            instantiate that particular object in any case.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.PropertyElement">
            <summary>
            A property definition : Object definitions can have zero or more properties.
            </summary>
            <remarks>
            <p>
            Spring.NET supports primitives, references to other objects in the same or
            related factories, lists, maps (dictionaries) and name value collections.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.RefElement">
            <summary>
            A reference to another managed object or static <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.IdRefElement">
            <summary>
            ID refs must specify a name of the target object.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ObjectRefAttribute">
            <summary>
            A reference to the name of another managed object in the same context.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.LocalRefAttribute">
            <summary>
            A reference to the name of another managed object in the same context.
            </summary>
            <remarks>
            <p>
            Local references, using the "local" attribute, have to use object ids;
            they can be checked by a parser, thus should be preferred for references
            within the same object factory XML file.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.FactoryObjectAttribute">
            <summary>
            Alternative to type attribute for factory-method usage.
            </summary>
            <remarks>
            <p>
            If this is specified, no tpye attribute should be used.
            This should be set to the name of an object in the current or
            ancestor factories that contains the relevant factory method.
            This allows the factory itself to be configured using Dependency
            Injection, and an instance (rather than static) method to be used.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.FactoryMethodAttribute">
            <summary>
            Optional attribute specifying the name of a factory method to use to
            create this object.
            </summary>
            <remarks>
            <p>
            Use constructor-arg elements to specify arguments to the factory method,
            if it takes arguments. Autowiring does not apply to factory methods.
            </p>
            <p>
            If the "type" attribute is present, the factory method will be a static
            method on the type specified by the "type" attribute on this object
            definition. Often this will be the same type as that of the constructed
            object - for example, when the factory method is used as an alternative
            to a constructor. However, it may be on a different type. In that case,
            the created object will *not* be of the type specified in the "type"
            attribute. This is analogous to <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            behaviour.
            </p>
            <p>
            If the "factory-object" attribute is present, the "type" attribute is not
            used, and the factory method will be an instance method on the object
            returned from a GetObject call with the specified object name. The factory
            object may be defined as a singleton or a prototype.
            </p>
            <p>
            The factory method can have any number of arguments. Autowiring is not
            supported. Use indexed constructor-arg elements in conjunction with the
            factory-method attribute.
            </p>
            <p>
            Setter Injection can be used in conjunction with a factory method.
            Method Injection cannot, as the factory method returns an instance,
            which will be used when the container creates the object.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ListElement">
            <summary>
            A list can contain multiple inner object, ref, collection, or value elements.
            </summary>
            <remarks>
            <p>
            Lists are untyped, pending generics support, although references will be
            strongly typed.
            </p>
            <p>
            A list can also map to an array type. The necessary conversion
            is automatically performed by the
            <see cref="T:Spring.Objects.Factory.Support.AbstractObjectFactory"/>.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.SetElement">
            <summary>
            A set can contain multiple inner object, ref, collection, or value elements.
            </summary>
            <remarks>
            <p>
            Sets are untyped, pending generics support, although references will be
            strongly typed.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.MapElement">
            <summary>
            A Spring.NET map is a mapping from a string key to object (a .NET IDictionary).
            </summary>
            <remarks>
            <p>
            Maps may be empty.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.KeyAttribute">
            <summary>
            A lookup key (for a map or name / value collection.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ValueAttribute">
            <summary>
            Contains a string representation of the value portion of a name / value pair.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.EntryElement">
            <summary>
            A map entry can be an inner object, ref, collection, or value.
            </summary>
            <remarks>
            <p>
            The name of the property is given by the "key" attribute.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ValueElement">
            <summary>
            Contains a string representation of a property value.
            </summary>
            <remarks>
            <p>
            The property may be a string, or may be converted to the
            required type using the <see cref="T:System.ComponentModel.TypeConverter"/> 
            machinery. This makes it possible for application developers
            to write custom <see cref="T:System.ComponentModel.TypeConverter"/> implementations
            that can convert strings to objects.
            </p>
            <p>
            Note that this is recommended for simple objects only.
            Configure more complex objects by setting properties to references to other objects.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.NullElement">
            <summary>
            Denotes a .NET null value.
            </summary>
            <remarks>
            <p>
            Necessary because an empty "value" tag will resolve to an empty String,
            which will not be resolved to a null value unless a special
            <see cref="T:System.ComponentModel.TypeConverter"/> does so.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.NameValuesElement">
            <summary>
            'name-values' elements differ from map elements in that values must be strings.
            </summary>
            <remarks>
            <p>
            May be empty.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AddElement">
            <summary>
            Element content is the string value of the property.
            </summary>
            <remarks>
            <p>
            The "key" attribute is the name of the property.
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.LazyInitAttribute">
            <summary>
            The lazy initialization mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DependencyCheckAttribute">
            <summary>
            The dependency checking mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ListenerElement">
            <summary>
            Defines a subscription to one or more events published by one or more event
            sources.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ListenerMethodAttribute">
            <summary>
            The name of an event handling method.
            </summary>
            <remarks>
            <p>
            Defaults to <c>On${event}</c>.
            <b>Note : this default will probably change before the first 1.0 release.</b>
            </p>
            </remarks>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ListenerEventAttribute">
            <summary>
            The name of an event.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AutowireAttribute">
            <summary>
            The autowiring mode for an individual object definition.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.ObjectNameDelimiters">
            <summary>
            The string of characters that delimit object names.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DependencyCheckAllAttributeValue">
            <summary>
            Check everything.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DependencyCheckSimpleAttributeValue">
            <summary>
            Just check primitive (string, int, etc) values.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.DependencyCheckObjectsAttributeValue">
            <summary>
            Check object references.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AutowireByNameValue">
            <summary>
            Autowire by name.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AutowireByTypeValue">
            <summary>
            Autowire by <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AutowireConstructorValue">
            <summary>
            Autowiring by constructor.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.ObjectsDtd.AutowireAutoDetectValue">
            <summary>
            The autowiring strategy is to be determined by introspection
            of the object's <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.ObjectsDtd.#ctor">
            <summary>
            Creates a new instance of the ObjectsDtd class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible constructors.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader">
            <summary>
            Object definition reader for Spring's default XML object definition format.
            </summary>
            <remarks>
            <p>
            Typically applied to a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/> instance.
            </p>
            <p>
            This class registers each object definition with the given object factory superclass,
            and relies on the latter's implementation of the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/> interface.
            </p>
            <p>
            It supports singletons, prototypes, and references to either of these kinds of object.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: XmlObjectDefinitionReader.cs,v 1.15 2005/03/27 23:27:13 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="parserClass">
            The default namespace that will be assumed if the 'xmlns' attribute is missing.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.#ctor(Spring.Objects.Factory.Support.IObjectDefinitionRegistry,System.Xml.XmlResolver)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> class.
            </summary>
            <param name="registry">
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            instance that this reader works on.
            </param>
            <param name="resolver">
            The <see cref="T:System.Xml.XmlResolver"/>to be used for parsing.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.LoadObjectDefinitions(Spring.Core.IO.IResource)">
            <summary>
            Load object definitions from the supplied XML <paramref name="resource"/>.
            </summary>
            <param name="resource">
            The XML resource for the object definitions that are to be loaded.
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of loading or parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.HandleValidation(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validation callback for a validating XML reader.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">Any data pertinent to the event.</param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.GetXmlReader(System.IO.Stream,System.Boolean)">
            <summary>
            Gets an appropriate <see cref="T:System.Xml.XmlReader"/> implementation
            for the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The XML <see cref="T:System.IO.Stream"/> that is going to be read.
            </param>
            <param name="validating">
            Whether a validating <see cref="T:System.Xml.XmlReader"/> implementation
            should be returned.
            </param>
            <returns>
            An appropriate <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.RegisterObjectDefinitions(System.Xml.XmlDocument,Spring.Core.IO.IResource)">
            <summary>
            Register the object definitions contained in the given DOM document.
            </summary>
            <param name="doc">The DOM document.</param>
            <param name="resource">
            The original resource from where the <see cref="T:System.Xml.XmlDocument"/>
            was read.
            </param>
            <returns>
            The number of object definitions that were registered.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.RegisterObjectDefinitions(System.Xml.XmlElement,Spring.Core.IO.IResource)">
            <summary>
            Register the object definitions contained in the given
            <see cref="T:System.Xml.XmlElement"/> document.
            </summary>
            <param name="objectsElement">
            The element containg object definitions.
            </param>
            <param name="resource">
            The original resource from where the <see cref="T:System.Xml.XmlDocument"/>
            was read.
            </param>
            <returns>
            The number of object definitions that were registered.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of parsing errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.CreateXmlResourceReader(Spring.Core.IO.IResource,Spring.Objects.Factory.Xml.XmlParserResolver)">
            <summary>
            This method may be overrided to implement validators
            </summary>
            <param name="resource"></param>
            <param name="resourceParserResolver"></param>
            <returns></returns>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.Validating">
            <summary>
            Set if the XML parser should validate the document and thus enforce a DTD.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.Resolver">
            <summary>
            The <see cref="T:System.Xml.XmlResolver"/>to be used for parsing.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader.ParserClass">
            <summary>
            Set the <see cref="T:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser"/>
            implementation to use.
            </summary>
            <remarks>
            <p>
            Default is the
            <see cref="T:Spring.Objects.Factory.Xml.DefaultXmlObjectDefinitionParser"/>.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlObjectFactory">
            <summary>
            Convenience extension of
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            that reads object definitions from an XML document or element.
            </summary>
            <remarks>
            <p>
            Delegates to
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/>
            underneath; effectively equivalent to using a
            <see cref="T:Spring.Objects.Factory.Xml.XmlObjectDefinitionReader"/> for a
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>.
            </p>
            <note>
            <i>objects</i> doesn't need to be the root element of
            the XML document: this class will parse all object definition elements in the
            XML stream.
            </note>
            <p>
            This class registers each object definition with the
            <see cref="T:Spring.Objects.Factory.Support.DefaultListableObjectFactory"/>
            superclass, and relies on the latter's implementation of the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> interface. It supports
            singletons, prototypes and references to either of these kinds of object.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: XmlObjectFactory.cs,v 1.6 2005/03/30 17:00:14 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource)">
            <summary>
            Creates a new instance of the XmlObjectFactory class, with the
            given resource, which must be parsable using DOM.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the XmlObjectFactory class, with the
            given resource, which must be parsable using DOM.
            </summary>
            <param name="inputStream">
            The XML stream to load object definitions from.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlObjectFactory.#ctor(Spring.Core.IO.IResource,Spring.Objects.Factory.IObjectFactory)">
            <summary>
            Creates a new instance of the XmlObjectFactory class, with the
            given resource, which must be parsable using DOM.
            </summary>
            <param name="resource">
            The XML resource to load object definitions from.
            </param>
            <param name="parentFactory">
            The parent object factory.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlParserResolver">
            <summary>
            XmlParserResolver is used by <see cref="T:Spring.Objects.Factory.Xml.XmlResourceReader"/> to
            find the parsers handling a specific namespace.
            Parsers have their lifecycle which can be Global, DefinitionReader, and Resource.
            They are cached appropriately based on that lifecycle.
            </summary>
            <author>Sandu Turcan</author>
            <version>$Id: XmlParserResolver.cs,v 1.6 2005/03/15 03:58:47 idlsoft Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.XmlParserResolver.DefaultNamespace">
            <summary>
            The namespace URI for the classic Spring schema
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlParserResolver.FindParser(System.String)">
            <summary>
            Finds a parser for a given namespace.
            </summary>
            <param name="namespaceURI"></param>
            <returns>null if no parser was found.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlParserResolver.RegisterParser(System.String,System.Type)">
            <summary>
            Associates a parser type with a namespace.
            Instances of the parser are created and disposed according to its
            lifecycle.
            </summary>
            <param name="xmlNamespace"></param>
            <param name="parserType"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlParserResolver.RegisterParser(System.String,Spring.Objects.Factory.IGenericObjectFactory)">
            <summary>
            Associates a parser factory with a namespace.
            Instances of the parser are created and disposed according to its
            lifecycle.
            </summary>
            <param name="xmlNamespace"></param>
            <param name="parserFactory"></param>
        </member>
        <member name="T:Spring.Objects.Factory.Xml.XmlResourceReader">
            <summary>
            XML resource reader.
            Navigates through the xml resource and invokes parsers registered
            with the <see cref="T:Spring.Objects.Factory.Xml.XmlParserResolver"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: XmlResourceReader.cs,v 1.5 2005/03/27 23:27:13 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.XmlResourceReader.GeneratedIdSeparator">
            <summary>
            The string used as a separator in the generation of synthetic id's for
            those object definitions explicitly that aren't assigned one.
            </summary>
        </member>
        <member name="F:Spring.Objects.Factory.Xml.XmlResourceReader.log">
            <summary>
            The shared <see cref="T:log4net.ILog"/> instance for this class (and derived classes). 
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlResourceReader.#ctor(Spring.Objects.Factory.Xml.XmlObjectDefinitionReader,Spring.Core.IO.IResource,Spring.Objects.Factory.Xml.XmlParserResolver)">
            <summary>
            Creates a new instance of the  NamespaceAwareObjectDefinitionParser class.
            </summary>
            <param name="reader">
            The object reader to use... contains the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            to populate, and the <see cref="T:System.AppDomain"/> against which
            <see cref="T:System.Type"/> instances are to be resolved.
            </param>
            <param name="resource">
            Descriptor of the original XML resource (useful for displaying parse errors).
            </param>
            <param name="parserResolver">
            The parser resolver for this resource
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlResourceReader.RegisterObjectDefinitions(System.Xml.XmlElement)">
            <summary>
            Parse object definitions from the given DOM node, and register them with the
            given object registry.
            </summary>
            <param name="root">
            The DOM element containing object definitions (usually the root).
            </param>
            <returns>
            The number of object definitions that were loaded.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            In case of (parsing) errors.
            </exception>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlResourceReader.ReportException(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            <see cref="M:Spring.Objects.Factory.Xml.XmlResourceReader.ReportException(System.Xml.XmlNode,System.String,System.String,System.Exception)"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="errMsg"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlResourceReader.ReportException(System.Xml.XmlNode,System.String,System.String,System.Exception)">
            <summary>
            This method can be overwritten in order to implement validators
            capable of displaying a full list of errors found in the definition.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="errMsg"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Spring.Objects.Factory.Xml.XmlResourceReader.ReportFatalException(System.Xml.XmlNode,System.String)">
            <summary>
            This method can be overwritten in order to implement validators
            capable of displaying a full list of errors found in the definition.
            </summary>
            <param name="node"></param>
            <param name="msg"></param>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.ObjectReader">
            <summary>
            The <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionReader"/>
            that contains the
            <see cref="T:Spring.Objects.Factory.Support.IObjectDefinitionRegistry"/>
            that is being (or is to be) populated with object definitions.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.ObjectDefinitionFactory">
            <summary>
            Gets or sets object definition factory to use.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.DefaultLazyInit">
            <summary>
            Are objects to be lazily initalised (Singletons only)?
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.DefaultDependencyCheck">
            <summary>
            Is the default dependency check on?
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.DefaultAutowire">
            <summary>
            Is autowiring to be performed?
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.Xml.XmlResourceReader.Resource">
            <summary>
            The resource being parsed.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.FactoryObjectCircularReferenceException">
            <summary>
            Exception thrown if an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            is involved in a circular reference.
            </summary>
            <remarks>
            <p>
            A circular reference with an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            cannot be solved by eagerly caching singleton instances like with normal
            objects. The reason is that every
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> needs to be fully
            initialized before it can return the created object, while only specific
            normal objects need to be initialized - that is, if a collaborating object
            actually invokes them on initialization instead of just storing the reference.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectCreationException">
            <summary>
            Thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            encounters an error when attempting to create an object from an object
            definition.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: ObjectCreationException.cs,v 1.5 2005/03/30 17:00:02 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectCreationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCreationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectCreationException.ObjectName">
            <summary>
            The name of the object that triggered the exception (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectCreationException.ResourceDescription">
            <summary>
            The description of the resource associated with the object (if any).
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectCircularReferenceException.#ctor">
            <summary>
            Creates a new instance of the
            FactoryObjectCircularReferenceException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectCircularReferenceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the FactoryObjectCircularReferenceException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectCircularReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the FactoryObjectCircularReferenceException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectCircularReferenceException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the
            FactoryObjectCircularReferenceException class.
            </summary>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.FactoryObjectCircularReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the FactoryObjectCircularReferenceException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.IObjectNameAware">
            <summary>
            Interface to be implemented by objects that wish to be aware of their object
            name in an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            Note that most objects will choose to receive references to collaborating
            objects via respective properties.
            </p>
            <p>
            For a list of all object lifecycle methods, see the
            <see cref="T:Spring.Objects.Factory.IObjectFactory"/> API documentation.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Factory.IObjectNameAware.ObjectName">
            <summary>
            Set the name of the object in the object factory that created this object.
            </summary>
            <value>
            The name of the object in the factory.
            </value>
            <remarks>
            <p>
            Invoked after population of normal object properties but before an init
            callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
            <see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
            method or a custom init-method.
            </p>
            </remarks>
        </member>
        <member name="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            <summary>
            Exception thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            is asked for an object instance name for which it cannot find a definition.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
            <param name="name">
            Name of the missing object.
            </param>
            <param name="message">
            A further, detailed message describing the problem.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
            <param name="type">
            Name of the missing object.
            </param>
            <param name="message">
            A further, detailed message describing the problem.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the NoSuchObjectDefinitionException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.NoSuchObjectDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.NoSuchObjectDefinitionException.ObjectType">
            <summary>
            Return the required <see cref="T:System.Type"/> of object, if it was a
            lookup by <see cref="T:System.Type"/> that failed.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.NoSuchObjectDefinitionException.ObjectName">
            <summary>
            Return the name of the missing object, if it was a lookup by name that
            failed.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectCurrentlyInCreationException">
            <summary>
            Thrown in case of a reference to an object that's currently in creation.
            </summary>
            <remarks>
            <p>
            Typically happens when constructor autowiring matches the currently
            constructed object.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans</author>
            <version>$Id: ObjectCurrentlyInCreationException.cs,v 1.2 2005/03/30 17:00:02 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectCurrentlyInCreationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectCurrentlyInCreationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectDefinitionException">
            <summary>
            Exception thrown when an <see cref="T:Spring.Objects.Factory.Xml.IXmlObjectDefinitionParser"/>
            encounters an error when attempting to parse an object
            definition.
            </summary>
            <author>Federico Spinazzi (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="name">
            The value of the xml <code>class</code> attribute thet can be resolved
            as a type
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionException.Message">
            <summary>
            The message about the exception.
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectDefinitionStoreException">
            <summary>
            Exception thrown when an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
            encounters an internal error, and its definitions are invalid: for example,
            if an XML document containing object definitions isn't well-formed.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="message">
            A message about the exception.
            </param>
            <param name="name">
            The name of the object that triggered the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectDefinitionStoreException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectDefinitionStoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionStoreException.ObjectName">
            <summary>
            The name of the object that triggered the exception (if any).
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectDefinitionStoreException.ResourceDescription">
            <summary>
            The description of the resource associated with the object (if any).
            </summary>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectFactoryUtils">
            <summary>
            Convenience methods operating on object factories, returning object instances,
            names or counts taking into account the nesting hierarchy of an object factory.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: ObjectFactoryUtils.cs,v 1.10 2005/03/30 17:00:02 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Factory.ObjectFactoryUtils.FactoryObjectPrefix">
            <summary>
            Used to dereference an <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            and distinguish it from managed objects <i>created </i> by the factory.
            </summary>
            <remarks>
            <p>
            For example, if the/ managed object identified as <code>foo</code> is a
            factory, getting <code>'foo</code> will return the factory, not the
            instance returned by the factory.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectFactoryUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.CountObjectsIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Count all object definitions in any hierarchy in which this
            factory participates.
            </summary>
            <remarks>
            <p>
            Includes counts of ancestor object factories.
            </p>
            <p>
            Objects that are "overridden" (specified in a descendant factory
            with the same name) are counted only once.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <returns>
            The count of objects including those defined in ancestor factories.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory)">
            <summary>
            Return all object names in the factory, including ancestor factories.
            </summary>
            <param name="factory">The object factory.</param>
            <returns>The array of object names, or an empty array if none.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectNamesIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type)">
            <summary>
            Get all object names for the given type, including those defined in ancestor
            factories.
            </summary>
            <remarks>
            <p>
            Will return unique names in case of overridden object definitions.
            </p>
            </remarks>
            <param name="factory">
            If this isn't also an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>,
            this method will return the same as it's own
            <see cref="M:Spring.Objects.Factory.IListableObjectFactory.GetObjectDefinitionNames"/> method.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> that objects must match.
            </param>
            <returns>
            The array of object names, or an empty array if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectsOfTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return all objects of the given type or subtypes, also picking up objects
            defined in ancestor object factories if the current object factory is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            The return list will only contain objects of this type.
            Useful convenience method when we don't care about object names.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the objects could not be created.
            </exception>
            <returns>
            The <see cref="T:System.Collections.IDictionary"/> of object instances, or an
            empty <see cref="T:System.Collections.IDictionary"/> if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfTypeIncludingAncestors(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return a single object of the given type or subtypes, also picking up objects defined
            in ancestor object factories if the current object factory is an
            <see cref="T:Spring.Objects.Factory.IHierarchicalObjectFactory"/>.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If not exactly one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfType(Spring.Objects.Factory.IListableObjectFactory,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Return a single object of the given type or subtypes, not looking in
            ancestor factories.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <param name="includePrototypes">
            Whether to include prototype objects too or just singletons
            (also applies to <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances).
            </param>
            <param name="includeFactoryObjects">
            Whether to include <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances
            too or just normal objects.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If not exactly one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.ObjectOfType(Spring.Objects.Factory.IListableObjectFactory,System.Type)">
            <summary>
            Return a single object of the given type or subtypes, not looking in
            ancestor factories.
            </summary>
            <remarks>
            <p>
            Useful convenience method when we expect a single object and don't care
            about the object name.
            This version of <c>ObjectOfType</c> automatically includes prototypes and
            <see cref="T:Spring.Objects.Factory.IFactoryObject"/> instances.
            </p>
            </remarks>
            <param name="factory">The object factory.</param>
            <param name="type">The <see cref="T:System.Type"/> of object to match.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object could not be created.
            </exception>
            <exception cref="T:Spring.Objects.Factory.NoSuchObjectDefinitionException">
            If not exactly one instance of an object was found.
            </exception>
            <returns>
            A single object of the given type or subtypes.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.TransformedObjectName(System.String)">
            <summary>
            Return the object name, stripping out the factory dereference prefix if necessary.
            </summary>
            <param name="name">Name of the object.</param>
            <returns>Name removing any factory dereference prefix.</returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.BuildFactoryObjectName(System.String)">
            <summary>
            Given an (object) name, builds a corresponding factory object name such that
            the return value can be used as a lookup name for a factory object.
            </summary>
            <param name="objectName">
            The name to be used to build the resulting factory object name.
            </param>
            <returns>
            The <paramref name="objectName"/> transformed into its factory object name
            equivalent.
            </returns>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectFactoryUtils.IsFactoryDereference(System.String)">
            <summary>
            Return whether this name is a factory dereference (beginning with
            the factory dereference prefix).
            </summary>
            <param name="name">The name to check.</param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectInitializationException">
            <summary>
            Exception that an object implementation is suggested to throw if its own
            factory-aware initialization code fails.
            <see cref="T:Spring.Objects.ObjectsException"/> thrown by object factory methods
            themselves should simply be propagated as-is.
            </summary>
            <remarks>
            <p>
            Note that non-factory-aware initialization methods like AfterPropertiesSet ()
            or a custom "init-method" can throw any exception.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectInitializationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectIsAbstractException">
            <summary>
            ObjectIsAbstractException is thrown in response to an attempt to
            retrieve an object from a factory where the definition for said object
            is marked as <b>abstract</b>.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: ObjectIsAbstractException.cs,v 1.4 2005/03/30 17:00:02 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsAbstractException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsAbstractException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsAbstractException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsAbstractException"/> class.
            </summary>
            <param name="name">
            The name of the object definition that has been marked
            as <b>abstract</b>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsAbstractException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsAbstractException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsAbstractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Factory.ObjectIsAbstractException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsAbstractException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectIsNotAFactoryException">
            <summary>
            Exception thrown when an object is not a factory, but a user tries to get at the
            factory for the given object name. Whether an object is a factory is determined
            by whether it implements the <see cref="T:Spring.Objects.Factory.IFactoryObject"/>
            interface.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="T:Spring.Objects.Factory.ObjectNotOfRequiredTypeException">
            <summary>
            Thrown when an object doesn't match the required <see cref="T:System.Type"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="name">
            Name of the object requested.
            </param>
            <param name="requiredType">
            The required <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </param>
            <param name="actualInstance">
            The instance actually returned, whose class did not match the
            expected <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectNotOfRequiredTypeException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ActualType">
            <summary>
            The actual <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.RequiredType">
            <summary>
            The required <see cref="T:System.Type"/> of the actual object
            instance that was retrieved.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ActualInstance">
            <summary>
            The instance actually returned, whose class did not match the
            expected <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Spring.Objects.Factory.ObjectNotOfRequiredTypeException.ObjectName">
            <summary>
            The name of the object requested.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor">
            <summary>
            Creates a new instance of the ObjectIsNotAFactoryException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String)">
            <summary>
            Creates a new instance of the ObjectIsNotAFactoryException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the ObjectIsNotAFactoryException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the ObjectIsNotAFactoryException class.
            </summary>
            <param name="name">
            The name of the object that was being retrieved from the factory.
            </param>
            <param name="actualInstance">
            The object instance that was retrieved.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.ObjectIsNotAFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the ObjectIsNotAFactoryException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Factory.UnsatisfiedDependencyException">
            <summary>
            Exception thrown when an object depends on other objects or simple properties
            that were not specified in the object factory definition, although dependency
            checking was enabled.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.String,System.Int32,System.Type,System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="name">
            The name of the object that has the unsatisfied dependency.
            </param>
            <param name="argumentIndex">
            The constructor argument index at which the dependency is
            unsatisfied.
            </param>
            <param name="argumentType">
            The <see cref="T:System.Type"/> of the constructor argument at
            which the dependency is unsatisfied.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="resourceDescription">
            The description of the resource associated with the object.
            </param>
            <param name="name">
            The name of the object that has the unsatisfied dependency.
            </param>
            <param name="propertyName">
            The name identifying the property on which the dependency is
            unsatisfied.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.Factory.UnsatisfiedDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the UnsatisfiedDependencyException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.Navigation.DateLiteralNode">
            <summary>
            Represents parsed node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: DateLiteralNode.cs,v 1.2 2005/03/30 17:00:41 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.Navigation.NavigationNode">
            <summary>
            Represents single parsed node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>            <version>$Id: NavigationNode.cs,v 1.3 2005/02/17 23:02:37 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationNode.ResolveParameters(System.Object,Spring.Objects.Navigation.NodeParameter[])">
            <summary>
            Converts parameters array into array of parameter values, evaluating any nested 
            expressions along the way if necessary.
            </summary>
            <param name="context">Root context for nested expressions.</param>
            <param name="parameters">Parameter definitions to resolve.</param>
            <returns>Array of parameter values.</returns>
        </member>
        <member name="P:Spring.Objects.Navigation.NavigationNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="M:Spring.Objects.Navigation.DateLiteralNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.DateLiteralNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.DateLiteralNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.DateLiteralNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.IndexerNode">
            <summary>
            Represents parsed indexer node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: IndexerNode.cs,v 1.3 2005/02/27 19:30:45 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.IndexerNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.IndexerNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.IndexerNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.IndexerNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.MethodNode">
            <summary>
            Represents parsed node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>            <version>$Id: MethodNode.cs,v 1.3 2005/03/30 17:00:42 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.MethodNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.MethodNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.MethodNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.MethodNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.NavigationExpression">
            <summary>
            Container object for the parsed object navigation expression.
            </summary>
            <remarks>
            <p>
            Preparing this object once and reusing it many times for expression
            evaluation can result in significant performance improvements, as most expensive
            reflection lookups are only performed once when this object is created.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>            <version>$Id: NavigationExpression.cs,v 1.6 2005/03/30 17:00:45 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationExpression.#ctor(System.Object,System.String)">
            <summary>
            Creates parsed expression using specified parameters.
            </summary>
            <param name="root">Root object expression is evaluated against.</param>
            <param name="expression">Expression to parse.</param>
            <exception cref="T:System.ArgumentNullException">If specified root is null.</exception>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationExpression.GetValue(System.Object)">
            <summary>
            Evaluates this expression for the specified root object and returns 
            value of the last node.
            </summary>
            <param name="root">Root object to evaluate expression against.</param>
            <returns>Value of the last node.</returns>
            <exception cref="T:System.ArgumentNullException">If specified root object is null.</exception>
        </member>
        <member name="M:Spring.Objects.Navigation.NavigationExpression.SetValue(System.Object,System.Object)">
            <summary>
            Evaluates this expression for the specified root object and sets 
            value of the last node.
            </summary>
            <param name="root">Root object to evaluate expression against.</param>
            <param name="newValue">Value to set last node to.</param>
            <exception cref="T:System.ArgumentNullException">If specified root object is null.</exception>
        </member>
        <member name="P:Spring.Objects.Navigation.NavigationExpression.ExpressionType">
            <summary>
            Returns type of the expression as a whole, which basically resolves to
            the type of the last node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.ExpressionParser">
            <summary>
            Poor man's expression parser. It does have a lot of limitations, but it can get most of the
            work done. We might want to implement AST-based parsing some time in the future...
            </summary>
        </member>
        <member name="M:Spring.Objects.Navigation.ExpressionParser.Parse(System.Object,System.String)">
            <summary>
            Parses expression and creates appropriate NavigationNode instances.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to parse.</param>
            <returns>Array of navigation nodes.</returns>
        </member>
        <member name="T:Spring.Objects.Navigation.NodeParameter">
            <summary>
            Represents either method or indexer parameter.
            </summary>
            <remarks>
            <p>
            
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>            <version>$Id: NodeParameter.cs,v 1.2 2005/03/30 17:00:45 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.NodeParameter.#ctor(System.Object)">
            <summary>
            Creates instance of node parameter.
            </summary>
            <param name="param">Parameter value.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.NodeParameter.GetValue(System.Object)">
            <summary>
            Returns parameter value.
            </summary>
            <param name="context">Context to use if parameter is nested expression.</param>
            <returns>Resolved parameter value.</returns>
        </member>
        <member name="T:Spring.Objects.Navigation.NumericLiteralNode">
            <summary>
            Represents parsed node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: NumericLiteralNode.cs,v 1.1 2005/02/28 11:27:43 aseovic Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.NumericLiteralNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.NumericLiteralNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.NumericLiteralNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.NumericLiteralNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.ObjectNavigator">
            <summary>
            Utility class that enables easy object navigation.
            </summary>
            <remarks>
            <p>
            This class allows users to get or set properties, as well as execute methods
            by navigating object graph using simple string expressions.
            </p>
            <p>
            Object navigator can properly navigate not only simply objects, but also collections,
            lists, dictionaries, etc.
            </p>
            </remarks>
            <example>
                // returns value of Xyz property
                ObjectNavigator.GetValue(object, "MyProperty.MyMap['myKey'].MyList[1].Xyz");
                
                // sets value of Xyz property
                ObjectNavigator.SetValue(object, "MyProperty.MyMap['myKey'].MyList[1].Xyz", newValue);
            </example>
            <author>Aleksandar Seovic</author>            <version>$Id: ObjectNavigator.cs,v 1.4 2005/03/30 17:00:46 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.ObjectNavigator.GetValue(System.Object,System.String)">
            <summary>
            Navigates root object using specified expression and returns value of 
            the last expression node.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.ObjectNavigator.GetValue(System.Object,Spring.Objects.Navigation.NavigationExpression)">
            <summary>
            Navigates root object using specified expression and returns value of 
            the last expression node.
            </summary>
            <remarks>
            <p>
            This version of the GetValue method uses parsed expression for evaluation,
            which can result in significant performance improvements as it avoids expression
            parsing and node resolution every time it is called. 
            </p>
            <p>
            If you plan to reuse same expression many times you should prepare
            parsed expression once and then use this method to evaluate it.
            </p>
            </remarks>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.ObjectNavigator.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Navigates root object using specified expression and returns value of 
            the last expression node.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.ObjectNavigator.SetValue(System.Object,Spring.Objects.Navigation.NavigationExpression,System.Object)">
            <summary>
            Navigates root object using specified expression and returns value of 
            the last expression node.
            </summary>
            <remarks>
            <p>
            This version of the GetValue method uses parsed expression for evaluation,
            which can result in significant performance improvements as it avoids expression
            parsing and node resolution every time it is called. 
            </p>
            <p>
            If you plan to reuse same expression many times you should prepare
            parsed expression once and then use this method to evaluate it.
            </p>
            </remarks>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="newValue">Value to set last node to.</param>
        </member>
        <member name="T:Spring.Objects.Navigation.PropertyOrFieldNode">
            <summary>
            Represents node that navigates to object's property or public field.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: PropertyOrFieldNode.cs,v 1.5 2005/02/27 15:26:01 springboy Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.PropertyOrFieldNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.PropertyOrFieldNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.PropertyOrFieldNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.PropertyOrFieldNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.SelectorNode">
            <summary>
            Represents parsed selector node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>            <version>$Id: SelectorNode.cs,v 1.3 2005/03/30 17:00:46 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.SelectorNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.SelectorNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.SelectorNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.SelectorNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Navigation.StringLiteralNode">
            <summary>
            Represents parsed node in the navigation expression.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: StringLiteralNode.cs,v 1.2 2005/03/30 17:00:46 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Navigation.StringLiteralNode.#ctor(System.Object,System.String)">
            <summary>
            Creates instance of the node.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="nodeExpression">This node's expression.</param>
        </member>
        <member name="M:Spring.Objects.Navigation.StringLiteralNode.GetValue(System.Object)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="M:Spring.Objects.Navigation.StringLiteralNode.SetValue(System.Object,System.Object)">
            <summary>
            Sets node's value for the given context.
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="newValue">New value for this node.</param>
        </member>
        <member name="P:Spring.Objects.Navigation.StringLiteralNode.NodeType">
            <summary>
            Returns the <see cref="T:System.Type"/> of the underlying object for the node.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AbstractEventHandlerValue">
            <summary>
            Base class implementation for classes that describe an event handler.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: AbstractEventHandlerValue.cs,v 1.5 2005/03/30 17:00:47 markpollack Exp $</version>
        </member>
        <member name="T:Spring.Objects.IEventHandlerValue">
            <summary>
            Describes an event handler.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: IEventHandlerValue.cs,v 1.4 2005/03/30 17:00:14 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.IEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.Source">
            <summary>
            The source of the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.IEventHandlerValue.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractEventHandlerValue"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AbstractEventHandlerValue.ToString">
            <summary>
            Returns a stringified representation of this object.
            </summary>
            <returns>A stringified representation of this object.</returns>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.Source">
            <summary>
            The source of the event (may be unresolved, as in the case
            of a <see cref="T:Spring.Objects.Factory.Config.RuntimeObjectReference"/>
            value).
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AbstractEventHandlerValue.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AbstractWiringEventHandlerValue">
            <summary>
            Base class for all <see cref="T:Spring.Objects.IEventHandlerValue"/>
            implemenations that actually perform event wiring.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: AbstractWiringEventHandlerValue.cs,v 1.5 2005/03/30 17:00:47 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractWiringEventHandlerValue"/> class.
            </summary>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AbstractWiringEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
            <remarks>
            <p>
            This is an <see langword="abstract"/> class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the
            supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a
            <see cref="T:System.Type"/>, etc).
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.AbstractWiringEventHandlerValue.ResolveHandlerMethod(System.Type,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Resolves the method metadata that describes the method that is to be used
            as the argument to a delegate constructor.
            </summary>
            <param name="handlerType">
            The <see cref="T:System.Type"/> exposing the method.
            </param>
            <param name="delegateType">
            The <see cref="T:System.Type"/> of the delegate (e.g. System.EventHandler).
            </param>
            <param name="flags">
            The custom binding flags to use when searching for the method.
            </param>
            <returns>The method metadata.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the method could not be found.
            </exception>
        </member>
        <member name="T:Spring.Objects.Support.AutoWiringEventHandlerValue">
            <summary>
            Describes an <see cref="T:Spring.Objects.IEventHandlerValue"/> implementation
            that autowires events to handler methods.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: AutoWiringEventHandlerValue.cs,v 1.6 2005/03/30 17:00:49 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AutoWiringEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.Wire(System.Object,System.Object)">
            <summary>
            Wires up the specified handler to the named event on the supplied event source.
            </summary>
            <param name="source">
            The object (an object instance, a <see cref="T:System.Type"/>, etc)
            exposing the named event.
            </param>
            <param name="handler">
            The handler for the event (an object instance, a <see cref="T:System.Type"/>,
            etc).
            </param>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer">
            <summary>
            Performs the matching up of handler methods to one or more source events.
            </summary>
            <remarks>
            <p>
            This class merely marshals the matching of handler methods to the events exposed
            by an event source, and then delegates to a concrete
            <see cref="T:Spring.Objects.IEventHandlerValue"/> implementation (such as
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> or
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/>) to do the heavy lifting of
            actually wiring a handler method to an event.
            </p>
            <p>
            Note : the order in which handler's are wired up to events is non-deterministic.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer"/> class.
            </summary>
            <param name="source">
            The object exposing the event (s) being wired up.
            </param>
            <param name="eventName">
            The name of the event that is being wired up.
            </param>
            <param name="handler">
            The object exposing the method (s) being wired to the event.
            </param>
            <param name="methodName">
            The name of the method that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Wire">
            <summary>
            Wires up events on the source to methods exposed on the handler.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.WireEvent(System.Reflection.EventInfo)">
            <summary>
            Wires up the supplied event to any handler methods that match the event
            signature.
            </summary>
            <param name="theEvent">The event being wired up.</param>
        </member>
        <member name="M:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.GetMethodNameCustomisedForEvent(System.String)">
            <summary>
            Only replaces the <b>first</b> occurrence of the placeholder.
            </summary>
            <param name="eventName">The event whose name is going to be used.</param>
            <returns>
            The method name customised for the name of the supplied event.
            </returns>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Source">
            <summary>
            The object exposing the event (s) being wired up.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.Handler">
            <summary>
            The object exposing the method (s) being wired to an event source.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.HandlerType">
            <summary>
            The <see cref="T:System.Type"/> of the object that is handling any events.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.MethodName">
            <summary>
            The name of the method that is going to handle the event.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.AutoWiringEventHandlerValue.AutoWirer.EventName">
            <summary>
            The name of the event that is being wired up.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.ComposedCriteria">
            <summary>
            A <see cref="T:Spring.Core.ICriteria"/> implementation that represents
            a composed collection of <see cref="T:Spring.Core.ICriteria"/> instances.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ComposedCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.ComposedCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ComposedCriteria.#ctor(Spring.Core.ICriteria)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.ComposedCriteria"/> class.
            </summary>
            <param name="criteria">
            A user-defined (child) criteria that will be composed into this instance.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.ComposedCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The data to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.ComposedCriteria.Add(Spring.Core.ICriteria)">
            <summary>
            Adds the supplied <parameref name="criteria"/> into the criteria composed within
            this instance.
            </summary>
            <param name="criteria">
            The <see cref="T:Spring.Core.ICriteria"/> to be added.
            </param>
        </member>
        <member name="T:Spring.Objects.Support.CriteriaMemberFilter">
            <summary>
            Convenience class that exposes a signature that matches the
            <see cref="T:System.Reflection.MemberFilter"/> delegate.
            </summary>
            <remarks>
            <p>
            Useful when filtering <see cref="T:System.Type"/> members via the
            <see cref="T:Spring.Core.ICriteria"/> mechanism.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <version>$Id: CriteriaMemberFilter.cs,v 1.3 2005/03/30 17:00:50 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.CriteriaMemberFilter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.CriteriaMemberFilter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.CriteriaMemberFilter.FilterMemberByCriteria(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Returns true if the supplied <see cref="T:System.Reflection.MemberInfo"/> instance
            satisfies the supplied <paramref name="filterCriteria"/> (which must be an
            <see cref="T:Spring.Core.ICriteria"/> implementation).
            </summary>
            <param name="member">
            The <see cref="T:System.Reflection.MemberInfo"/> instance that will be checked to see if
            it matches the supplied <paramref name="filterCriteria"/>.
            </param>
            <param name="filterCriteria">
            The criteria against which to filter the supplied
            <see cref="T:System.Reflection.MemberInfo"/> instance.
            </param>
            <returns>
            True if the supplied <see cref="T:System.Reflection.MemberInfo"/> instance
            satisfies the supplied <paramref name="filterCriteria"/> (which must be an
            <see cref="T:Spring.Core.ICriteria"/> implementation); false if not or the
            supplied <paramref name="filterCriteria"/> is not an
            <see cref="T:Spring.Core.ICriteria"/> implementation or is null.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.InstanceEventHandlerValue">
            <summary>
            Describes an event handler for an object instance.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: InstanceEventHandlerValue.cs,v 1.4 2005/03/09 13:25:08 fspinazzi Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.InstanceEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.InstanceEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.ISortDefinition">
            <summary>
            Definition for sorting object instances by a property.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.Property">
            <summary>
            The name of the property to sort by.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.IgnoreCase">
            <summary>
            Whether upper and lower case in string values should be ignored.
            </summary>
            <value>
            True if the sorting should be performed in a case-insensitive fashion.
            </value>
        </member>
        <member name="P:Spring.Objects.Support.ISortDefinition.Ascending">
            <summary>
            If the sorting should be ascending or descending.
            </summary>
            <value>
            True if the sorting should be in the ascending order.
            </value>
        </member>
        <member name="T:Spring.Objects.Support.MethodParametersCountCriteria">
            <summary>
            Criteria that is satisfied if the number of parameters to a given
            <see cref="T:System.Reflection.MethodBase"/> matches an arbitrary number.
            </summary>
            <remarks>
            <p>
            This class supports checking the parameter count of both methods and
            constructors.
            </p>
            <p>
            Default parameters, etc need to taken into account.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <version>$Id: MethodParametersCountCriteria.cs,v 1.4 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCountCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodParametersCountCriteria"/> class.
            </summary>
            <remarks>
            <p>
            This constructor sets the
            <see cref="P:Spring.Objects.Support.MethodParametersCountCriteria.ExpectedParameterCount"/>
            property to zero (0).
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCountCriteria.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodParametersCountCriteria"/> class.
            </summary>
            <param name="expectedParameterCount">
            The number of parameters that a <see cref="T:System.Reflection.MethodInfo"/>
            must have to satisfy this criteria.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="expectedParameterCount"/> is less
            than zero.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCountCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Objects.Support.MethodParametersCountCriteria.ExpectedParameterCount">
            <summary>
            The number of parameters that a <see cref="T:System.Reflection.MethodInfo"/>
            must have to satisfy this criteria.
            </summary>
            <exception cref="T:System.ArgumentException">
            If the supplied value is less than zero.
            </exception>
        </member>
        <member name="T:Spring.Objects.Support.MethodParametersCriteria">
            <summary>
            Criteria that is satisfied if the <see cref="T:System.Type"/> of each of the
            parameters of a given <see cref="T:System.Reflection.MethodInfo"/> matches each
            of the parameter <see cref="T:System.Type"/>s of a given
            <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <remarks>
            <p>
            If no <see cref="T:System.Type"/> array is passed to the overloaded constructor,
            any method that has no parameters will satisfy an instance of this
            class. The same effect could be achieved by passing the
            <see cref="F:System.Type.EmptyTypes"/> array to the overloaded constructor.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <version>$Id: MethodParametersCriteria.cs,v 1.7 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodParametersCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCriteria.#ctor(System.Type[])">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodParametersCriteria"/> class.
            </summary>
            <remarks>
            <p>
            If the supplied <paramref name="parameters"/> array is null, then this
            constructor uses the <see cref="F:System.Type.EmptyTypes"/> array.
            </p>
            </remarks>
            <param name="parameters">
            The <see cref="T:System.Type"/> array that this criteria will use to
            check parameter <see cref="T:System.Type"/>s.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MethodParametersCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <remarks>
            <p>
            This implementation respects the inheritance chain of any parameter
            <see cref="T:System.Type"/>s... i.e. methods that have a base type (or
            interface) that is assignable to the <see cref="T:System.Type"/> in the
            same corresponding index of the parameter types will satisfy this
            criteria instance.
            </p>
            </remarks>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.MethodReturnTypeCriteria">
            <summary>
            Criteria that is satisfied if the return <see cref="T:System.Type"/> of a given
            <see cref="T:System.Reflection.MethodInfo"/> matches a given <see cref="T:System.Type"/>.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: MethodReturnTypeCriteria.cs,v 1.4 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Support.MethodReturnTypeCriteria.DefaultType">
            <summary>
            The return <see cref="T:System.Type"/> to match against if no
            <see cref="T:System.Type"/> is provided explictly.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MethodReturnTypeCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodReturnTypeCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MethodReturnTypeCriteria.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MethodReturnTypeCriteria"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that the return type of a given
            <see cref="T:System.Reflection.MethodInfo"/> must match in order to satisfy
            this criteria.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MethodReturnTypeCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="P:Spring.Objects.Support.MethodReturnTypeCriteria.ReturnType">
            <summary>
            The <see cref="T:System.Type"/> that the return type of a given
            <see cref="T:System.Reflection.MethodInfo"/> must match in order to satisfy
            this criteria.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.MutableSortDefinition">
            <summary>
            Mutable implementation of the
            <see cref="T:Spring.Objects.Support.ISortDefinition"/> interface that
            supports toggling the ascending value on setting the same property again.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Jean-Pierre Pawlak</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(Spring.Objects.Support.ISortDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class using
            the specified <see cref="T:Spring.Objects.Support.ISortDefinition"/>.
            </summary>
            <param name="source">
            The <see cref="T:Spring.Objects.Support.ISortDefinition"/> to use
            as a source for initial property values.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
            <param name="name">
            The name of the property to sort by.
            </param>
            <param name="ignoreCase">
            Whether upper and lower case in string values should be ignored.
            </param>
            <param name="ascending">
            Whether or not the sorting should be ascending or descending.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.MutableSortDefinition"/> class.
            </summary>
            <param name="toggleAscendingOnSameProperty">
            Whether or not the
            <see cref="P:Spring.Objects.Support.MutableSortDefinition.Ascending"/>
            property should be toggled if the same name is set on the
            <see cref="P:Spring.Objects.Support.MutableSortDefinition.Property"/>
            property.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.Equals(System.Object)">
            <summary>
            Overrides the default <see cref="M:System.Object.Equals(System.Object)"/> method
            </summary>
            <param name="obj">
            The object to test against this instance for equality.
            </param>
            <returns>
            True if the supplied <paramref name="obj"/> is equal to this instance.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.MutableSortDefinition.GetHashCode">
            <summary>
            Overrides the default <see cref="M:System.Object.GetHashCode"/> method.
            </summary>
            <returns>The hashcode for this instance.</returns>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.Property">
            <summary>
            The name of the property to sort by.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.IgnoreCase">
            <summary>
            Whether upper and lower case in string values should be ignored.
            </summary>
            <value>
            True if the sorting should be performed in a case-insensitive fashion.
            </value>
        </member>
        <member name="P:Spring.Objects.Support.MutableSortDefinition.Ascending">
            <summary>
            If the sorting should be ascending or descending.
            </summary>
            <value>
            True if the sorting should be in the ascending order.
            </value>
        </member>
        <member name="T:Spring.Objects.Support.ObjectFactoryHandler">
            <summary>
            Creates a <see cref="T:Spring.Objects.Factory.IObjectFactory"/> instance
            populated with the object definitions supplied in the configuration
            section. 
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.Support.ObjectFactoryHandler.#ctor">
            <summary>
            Creates a new instance of the ObjectFactoryHandler class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.ObjectFactoryHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:Spring.Objects.Factory.IObjectFactory"/> instance
            populated with the object definitions supplied in the configuration
            section.
            </summary>
            <param name="parent">
            The configuration settings in a corresponding parent
            configuration section.
            </param>
            <param name="configContext">
            The configuration context when called from the ASP.NET
            configuration system. Otherwise, this parameter is reserved and
            is a null reference.
            </param>
            <param name="section">
            The <see cref="T:System.Xml.XmlNode"/> for the section.
            </param>
            <returns>
            A <see cref="T:Spring.Objects.Factory.IObjectFactory"/> instance
            populated with the object definitions supplied in the configuration
            section.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.PropertyComparator">
            <summary>
            Performs a comparison of two objects, using the specified object property via
            an <see cref="T:Spring.Objects.IObjectWrapper"/>.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Jean-Pierre Pawlak</author>
            <author>Simon White (.NET)</author>
            <version>$Id: PropertyComparator.cs,v 1.6 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.#ctor(Spring.Objects.Support.ISortDefinition)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.PropertyComparator"/> class.
            </summary>
            <param name="definition">
            The <see cref="T:Spring.Objects.Support.ISortDefinition"/> to use for any
            sorting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="definition"/> is null.
            </exception>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less
            than, equal to or greater than the other.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns><see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/></returns>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.GetPropertyValue(System.Object)">
            <summary>
            Get the <see cref="T:Spring.Objects.Support.ISortDefinition"/>'s property
            value for the given object.
            </summary>
            <param name="obj">The object to get the property value for.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Spring.Objects.Support.PropertyComparator.Sort(System.Collections.IList,Spring.Objects.Support.ISortDefinition)">
            <summary>
            Sort the given <see cref="T:System.Collections.IList"/> according to the
            given sort definition.
            </summary>
            <param name="source">
            The <see cref="T:System.Collections.IList"/> to be sorted.
            </param>
            <param name="sortDefinition">The parameters to sort by.</param>
            <exception cref="T:Spring.Objects.ObjectsException">
            In the case of a missing property name.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="sortDefinition"/> is null.
            </exception>
        </member>
        <member name="T:Spring.Objects.Support.RegexCriteria">
            <summary>
            A base class for all <see cref="T:Spring.Core.ICriteria"/>
            implementations that are regex based.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: RegexCriteria.cs,v 1.7 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Support.RegexCriteria.MatchAnyThingPattern">
            <summary>
            The default pattern... matches absolutely anything.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexCriteria"/> class.
            </summary>
            <param name="pattern">
            The regular expression pattern to be applied.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.RegexCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="M:Spring.Objects.Support.RegexCriteria.IsMatch(System.String)">
            <summary>
            Convenience method that calls the
            <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
            on the supplied <paramref name="input"/>.
            </summary>
            <param name="input">The input to match against.</param>
            <returns>True if the <paramref name="input"/> matches.</returns>
        </member>
        <member name="P:Spring.Objects.Support.RegexCriteria.Pattern">
            <summary>
            The regular expression pattern to be applied.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.RegexCriteria.Options">
            <summary>
            The regular expression options to be applied.
            </summary>
        </member>
        <member name="P:Spring.Objects.Support.RegexCriteria.Expression">
            <summary>
            The regular expression to be applied.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.RegexEventNameCriteria">
            <summary>
            Criteria that is satisfied if the <c>Name</c> property an
            <see cref="T:System.Reflection.EventInfo"/> instance matches a
            supplied regular expression pattern.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: RegexEventNameCriteria.cs,v 1.4 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Support.RegexEventNameCriteria.MatchAnyEventNamePattern">
            <summary>
            The default event name pattern... matches pretty much any event name.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexEventNameCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexEventNameCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexEventNameCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexEventNameCriteria"/> class.
            </summary>
            <param name="eventNamePattern">
            The pattern that <see cref="T:System.Reflection.EventInfo"/> names
            must match against in order to satisfy this criteria.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.RegexEventNameCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.RegexMethodNameCriteria">
            <summary>
            Criteria that is satisfied if the <c>Name</c> property an
            <see cref="T:System.Reflection.MethodInfo"/> instance matches a
            supplied regular expression pattern.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: RegexMethodNameCriteria.cs,v 1.4 2005/03/30 17:00:51 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.Support.RegexMethodNameCriteria.MatchAnyMethodNamePattern">
            <summary>
            The default method name pattern... matches pretty much any method name.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexMethodNameCriteria.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexMethodNameCriteria"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.RegexMethodNameCriteria.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.RegexMethodNameCriteria"/> class.
            </summary>
            <param name="methodNamePattern">
            The pattern that <see cref="T:System.Reflection.MethodInfo"/> names
            must match against in order to satisfy this criteria.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.RegexMethodNameCriteria.IsSatisfied(System.Object)">
            <summary>
            Does the supplied <paramref name="datum"/> satisfy the criteria encapsulated by
            this instance?
            </summary>
            <param name="datum">The datum to be checked by this criteria instance.</param>
            <returns>
            True if the supplied <paramref name="datum"/> satisfies the criteria encapsulated
            by this instance; false if not or the supplied <paramref name="datum"/> is null.
            </returns>
        </member>
        <member name="T:Spring.Objects.Support.StaticEventHandlerValue">
            <summary>
            Describes an event handler for a static class method.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: StaticEventHandlerValue.cs,v 1.3 2005/03/30 17:00:52 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.Support.StaticEventHandlerValue"/> class.
            </summary>
            <param name="source">
            The object (possibly unresolved) that is exposing the event.
            </param>
            <param name="methodName">
            The name of the method on the handler that is going to handle the event.
            </param>
        </member>
        <member name="M:Spring.Objects.Support.StaticEventHandlerValue.GetHandler(System.Object,System.Reflection.EventInfo)">
            <summary>
            Gets the event handler.
            </summary>
            <param name="instance">
            The instance that is registering for the event notification.
            </param>
            <param name="info">
            Event metadata about the event.
            </param>
            <returns>
            The event handler.
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.CustomNumberConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for any
            primitive numeric type like Int32, Single, Double.
            </summary>
            <remarks>
            <p>
            Can use a given <see cref="T:System.Globalization.NumberFormatInfo"/> for
            (locale-specific) parsing and rendering.
            </p>
            <p>
            This is not meant to be used as a system
            <see cref="T:System.ComponentModel.TypeConverter"/> but rather as a
            locale-specific number converter within custom controller code, to parse
            user-entered number strings into number properties of objects, and render
            them in the UI form.
            </p>
            </remarks>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
        </member>
        <member name="M:Spring.Objects.TypeConverters.CustomNumberConverter.#ctor(System.Type,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            Creates a new instance of the CustomNumberConverter class.
            </summary>
            <param name="type">
            The primitive numeric <see cref="T:System.Type"/> to convert to.
            </param>
            <param name="format">
            The <see cref="T:System.Globalization.NumberFormatInfo"/> to use for
            (locale-specific) parsing and rendering
            </param>
            <param name="allowEmpty">
            Is an empty string allowed to be converted; if true, an empty string
            will be converted to numeric 0.</param>
        </member>
        <member name="M:Spring.Objects.TypeConverters.CustomNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.CustomNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object (a string) to the required primitive type.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="val">
            The value that is to be converted.
            </param>
            <returns>A primitive representation of the string value.</returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.FileInfoConverter">
            <summary>
            Converter for <see cref="T:System.IO.FileInfo"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.TypeConverters.FileInfoConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.TypeConverters.FileInfoConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.FileInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.FileInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.IO.FileInfo"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.IO.FileInfo"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.NameValueConverter">
            <summary>
            Custom <see cref="T:System.ComponentModel.TypeConverter"/> implementation for
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
            <remarks>
            <p>
            Handles conversion from a string to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> object.
            Also handles <see cref="T:System.Collections.IDictionary"/> to
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> conversion, for
            populating a <see cref="T:System.Collections.Specialized.NameValueCollection"/> object
            via XML "map" entries.
            </p>
            <p>
            This converter must be registered before it will be available. Standard
            converters in this namespace are automatically registered by the
            <see cref="T:Spring.Objects.ObjectWrapper"/> class.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Simon White (.NET)</author>
            <version>$Id: NameValueConverter.cs,v 1.3 2005/03/30 17:00:56 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.TypeConverters.NameValueConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.TypeConverters.NameValueConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.NameValueConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.NameValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/>
            if successful. 
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.ResourceManagerConverter">
            <summary>
            Converts a two part string, (resource name, assembly name)
            to a ResourceManager instance.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.ResourceManagerConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.TypeConverters.ResourceManagerConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.ResourceManagerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a
            <see cref="T:System.Resources.ResourceManager"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.ResourceManagerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a
            <see cref="T:System.Resources.ResourceManager"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Resources.ResourceManager"/>
            if successful. 
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.RGBColorConverter">
            <summary>
            Converter for Color from a comma separated list of RBG values
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RGBColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.FileInfo"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RGBColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object (a string with comma separate RGB values) 
            to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture: ignored
            </param>
            <param name="value">
            The value that is to be converted, in "R,G,B" format
            </param>
            <returns>A <see cref="T:System.Drawing.Color"/> representation of the string value.</returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.RuntimeTypeConverter">
            <summary>
            A custom <see cref="T:System.ComponentModel.TypeConverter"/> for
            runtime type references.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion to and from a
            <see cref="T:System.String"/>.
            </p>
            </remarks>
            <author>Rick Evans (.NET)</author>
            <version>$Id: RuntimeTypeConverter.cs,v 1.3 2005/03/30 17:00:57 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RuntimeTypeConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.TypeConverters.RuntimeTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RuntimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to the <see cref="T:System.Type"/>
            of this converter.
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RuntimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert to.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RuntimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.RuntimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type,
            using the specified context and culture information.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the
            <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.StreamConverter">
            <summary>
            Converter for <see cref="T:System.IO.Stream"/> to directly set a
            <see cref="T:System.IO.Stream"/> property.
            </summary>
            <author>Jurgen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StreamConverter.#ctor">
            <summary>
            Create a new StreamConverter using the default
            <see cref="T:Spring.Core.IO.ResourceConverter"/>.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StreamConverter.#ctor(Spring.Core.IO.ResourceConverter)">
            <summary>
            Create a new StreamConverter using the given
            <see cref="T:Spring.Core.IO.ResourceConverter"/>.
            </summary>
            <param name="resourceConverter">
            The <see cref="T:Spring.Core.IO.ResourceConverter"/> to use.</param>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StreamConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StreamConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="val">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Objects.TypeConverters.StringArrayConverter">
            <summary>
            Convert a CSV <see cref="T:System.String"/> to a <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            This <see cref="T:System.ComponentModel.TypeConverter"/> should be
            automatically registered with any <see cref="T:Spring.Objects.IObjectWrapper"/>
            implementations.
            </p>
            </remarks>
            <author></author>
            <version>$Id: StringArrayConverter.cs,v 1.5 2005/03/30 17:00:59 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StringArrayConverter.#ctor">
            <summary>            Create a new instance of the StringArrayConverter class.            </summary>        </member>
        <member name="M:Spring.Objects.TypeConverters.StringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can we convert from a the sourcetype to a
            <see cref="T:System.String"/> array?
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.StringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.String"/> array.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture (currently ignored). 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.String"/> array if successful.
            An empty zero length <see cref="T:System.String"/> if
            <paramref name="value"/> is null.
            </returns>        
        </member>
        <member name="T:Spring.Objects.TypeConverters.UriConverter">
            <summary>
            Converter for <see cref="T:System.Uri"/> instances.
            </summary>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: UriConverter.cs,v 1.5 2005/03/30 17:00:59 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.TypeConverters.UriConverter.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.TypeConverters.UriConverter"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeConverters.UriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one
            <see cref="T:System.Type"/> to a <see cref="T:System.Uri"/>
            </summary>
            <remarks>
            <p>
            Currently only supports conversion from a
            <see cref="T:System.String"/> instance.
            </p>
            </remarks>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the
            <see cref="T:System.Type"/> you want to convert from.
            </param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Spring.Objects.TypeConverters.UriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from a string value to a <see cref="T:System.Uri"/> instance.
            </summary>
            <param name="context">
            A <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>
            that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use
            as the current culture. 
            </param>
            <param name="value">
            The value that is to be converted.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> if successful. 
            </returns>
        </member>
        <member name="T:Spring.Objects.InvalidPropertyException">
            <summary>
            Thrown in response to referring to an invalid property (most often via reflection).
            </summary>
            <author>Rick Evans</author>
            <version>$Id: InvalidPropertyException.cs,v 1.4 2005/03/30 17:00:19 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </param>
            <param name="propertyName">
            The name of the offending property.
            </param>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Objects.InvalidPropertyException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.InvalidPropertyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.InvalidPropertyException.ObjectType">
            <summary>
            The <see cref="T:System.Type"/> that is (or rather was) the source of the
            offending property.
            </summary>
        </member>
        <member name="P:Spring.Objects.InvalidPropertyException.OffendingPropertyName">
            <summary>
            The name of the offending property.
            </summary>
        </member>
        <member name="T:Spring.Objects.IObjectWrapper">
            <summary> 
            The central interface of Spring.NET's low-level object infrastructure.
            </summary>
            <remarks>
            <p>
            Typically not directly used by application code but rather implicitly
            via an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>.
            </p>
            <p>
            Implementing classes have the ability to get and set property values
            (individually or in bulk), get property descriptors and query the
            readability and writability of properties.
            </p>
            <p>
            This interface supports <b>nested properties</b> enabling the setting
            of properties on subproperties to an unlimited depth.
            </p>
            <p>
            If a property update causes an exception, a
            <see cref="T:Spring.Objects.PropertyAccessException"/> will be thrown. Bulk
            updates continue after exceptions are encountered, throwing an exception
            wrapping <b>all</b> exceptions encountered during the update.
            </p>
            <p>
            <see cref="T:Spring.Objects.IObjectWrapper"/> implementations can be used
            repeatedly, with their "target" or wrapped object changed.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: IObjectWrapper.cs,v 1.9 2005/03/30 17:00:16 markpollack Exp $
            </version>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all propertiees of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">The <see cref="T:System.Type"/> of property.</param>
            <param name="converter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.FindCustomConverter(System.Type,System.String)">
            <summary>
            Find a custom <see cref="T:System.ComponentModel.TypeConverter"/> for the
            given type and property.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of the property, can be null if a property
            is given but should be specified in any case for consistency checking.
            </param>
            <param name="path">
            The path of the property (name or nested path), or null if looking for an
            <see cref="T:System.ComponentModel.TypeConverter"/> for all properties of the
            given <see cref="T:System.Type"/>.
            </param>
            <returns>
            The registered <see cref="T:System.ComponentModel.TypeConverter"/>, or null
            if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyValue(System.String)">
            <summary>Get the value of a property.</summary>
            <param name="theProperty">
            The name of the property to get the value of. May be nested.
            </param>
            <returns>The value of the property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            if the property isn't readable, or if the getting the value throws
            an exception.
            </exception>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyInfo(System.String)">
            <summary>
            Get the <see cref="T:System.Reflection.PropertyInfo"/> for a particular
            property.
            </summary>
            <param name="theProperty">
            The property to be retrieved.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the particular
            property.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.GetPropertyInfos">
            <summary>
            Get all of the <see cref="T:System.Reflection.PropertyInfo"/> instances for
            all of the properties of the wrapped object.
            </summary>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/> instances.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)">
            <summary>
            Set a property value.
            </summary>
            <remarks>
            <p>
            <b>This is the preferred way to update an individual property.</b>
            </p>
            </remarks>
            <param name="propertyValue">The new property value.</param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set a property value.
            </summary>
            <remarks>
            <p>
            This method is provided for convenience only. The
            <see cref="M:Spring.Objects.IObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)"/>
            method is more powerful.
            </p>
            </remarks>
            <param name="theProperty">
            The name of the property to set value of.</param>
            <param name="propertyValue">The new property value.</param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues)">
            <summary>Set a number of property values in bulk.</summary>
            <remarks>
            <p>
            This is the preferred way to perform a bulk update.
            </p>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type
            mismatch, but <b>not</b> an invalid property name or the like) is
            encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing
            all the individual errors. This exception can be examined later to see all
            binding errors. Properties that were successfully updated stay changed.
            </p>
            <p>Does not allow the setting of unknown fields. Equivalent to
            <see cref="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)"/>
            with an argument of <c>false</c> for the second parameter.
            </p>
            </remarks>
            <param name="values">
            The collection of <see cref="T:Spring.Objects.PropertyValue"/> instances to
            set on the wrapped object.
            </param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)">
            <summary>
            Set a number of property values in bulk with full control over behavior.
            </summary>
            <remarks>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type
            mismatch, but <b>not</b> an invalid property name or the like) is
            encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing
            all the individual errors. This exception can be examined later to see all
            binding errors. Properties that were successfully updated stay changed.
            </p>
            <p>Does not allow the setting of unknown fields.
            </p>
            </remarks>
            <param name="values">
            The <see cref="T:Spring.Objects.IPropertyValues"/> to set on the target object
            </param>
            <param name="ignoreUnknown">
            Should we ignore unknown values (not found in the object!?)
            </param>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.IsWritableProperty(System.String)">
            <summary>Is the named property writable?</summary>
            <remarks>
            <p>
            Returns false if the property doesn't exist.
            </p>
            </remarks>
            <param name="theProperty">
            The property to check the write status of.
            </param>
            <returns>
            True if the named property is writable.
            </returns>
        </member>
        <member name="M:Spring.Objects.IObjectWrapper.IsReadableProperty(System.String)">
            <summary>Is the named property readable?</summary>
            <remarks>
            <p>
            Returns false if the property doesn't exist.
            </p>
            </remarks>
            <param name="theProperty">
            The property to check the read status of.
            </param>
            <returns>
            True if the named property is readable.
            </returns>
        </member>
        <member name="P:Spring.Objects.IObjectWrapper.WrappedInstance">
            <summary>
            The object wrapped by the wrapper (cannot be null).
            </summary>
            <remarks>
            <p>
            Implementations are required to allow the type of the wrapped 
            object to change.
            </p>
            </remarks>
            <returns>The object wrapped by this wrapper.</returns>
        </member>
        <member name="P:Spring.Objects.IObjectWrapper.WrappedType">
            <summary>
            Convenience method to return the <see cref="T:System.Type"/>
            of the wrapped object.
            </summary>
            <returns>The <see cref="T:System.Type"/> of the wrapped object.</returns>
        </member>
        <member name="T:Spring.Objects.IPropertyValues">
            <summary>
            A collection style container for <see cref="T:Spring.Objects.PropertyValue"/>
            instances.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET) </author>
            <version>$Id: IPropertyValues.cs,v 1.5 2005/03/30 17:00:18 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.GetPropertyValue(System.String)">
            <summary>
            Return the <see cref="T:Spring.Objects.PropertyValue"/> instance with the
            given name.
            </summary>
            <param name="propertyName">The name to search for.</param>
            <returns>the <see cref="T:Spring.Objects.PropertyValue"/>, or null if a 
            the <see cref="T:Spring.Objects.PropertyValue"/> with the supplied
            <paramref name="propertyName"/> did not exist in this collection.
            </returns>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.Contains(System.String)">
            <summary>
            Is there a <see cref="T:Spring.Objects.PropertyValue"/> instance for this
            property name?
            </summary>
            <param name="propertyName">The name to search for.</param>
            <returns>
            True if there is a <see cref="T:Spring.Objects.PropertyValue"/> instance for
            the supplied <paramref name="propertyName"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.IPropertyValues.ChangesSince(Spring.Objects.IPropertyValues)">
            <summary>
            Return the difference (changes, additions, but not removals) of
            property values between the supplied argument and the values
            contained in the collection.
            </summary>
            <remarks>
            <p>
            Subclasses should also override <c>Equals</c>.
            </p>
            </remarks>
            <param name="old">The old property values.</param>
            <returns>
            An <see cref="T:Spring.Objects.IPropertyValues"/> containing any changes, or
            an empty <see cref="T:Spring.Objects.IPropertyValues"/> instance if there were
            no changes.
            </returns>
        </member>
        <member name="P:Spring.Objects.IPropertyValues.PropertyValues">
            <summary>
            Return an array of the <see cref="T:Spring.Objects.PropertyValue"/> objects
            held in this object.</summary>
            <returns>
            An array of the <see cref="T:Spring.Objects.PropertyValue"/> objects held
            in this object.
            </returns>
        </member>
        <member name="T:Spring.Objects.MethodInvocationException">
            <summary>
            Thrown when a method (typically a property getter or setter invoked via reflection)
            throws an exception, analogous to a <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>  $Id: MethodInvocationException.cs,v 1.4 2005/02/20 12:01:43 springboy Exp $
            </version>
        </member>
        <member name="T:Spring.Objects.PropertyAccessException">
            <summary> Superclass for exceptions related to a property access,
            such as type mismatch or invocation target exception.
            </summary>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>  $Id: PropertyAccessException.cs,v 1.6 2005/03/30 17:00:22 markpollack Exp $
            </version>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor(System.String,Spring.Objects.PropertyChangeEventArgs)">
            <summary>
            Create a new PropertyAccessException instance
            </summary>
            <param name="msg">Text message describing the exception.</param>
            <param name="propertyChangeEvent">Describes the change attempted on the property</param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor(System.String,Spring.Objects.PropertyChangeEventArgs,System.Exception)">
            <summary>
            Create a new PropertyAcessException instance.
            </summary>
            <param name="msg">Text message describing the exception</param>
            <param name="propertyChangeEvent">Describes the change attempted on the property</param>
            <param name="ex">The underling exception</param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor(System.String)">
            <summary>
            Creates a new instance of the PropertyAccessException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Objects.PropertyAccessException.PropertyChangeArgs">
            <summary> Return the PropertyChangeEventArgs that resulted in the problem.</summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessException.ErrorCode">
            <summary>
            The string error code used to classify the error.
            </summary>
        </member>
        <member name="M:Spring.Objects.MethodInvocationException.#ctor">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.MethodInvocationException.#ctor(System.String)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.MethodInvocationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.MethodInvocationException.#ctor(System.Exception,Spring.Objects.PropertyChangeEventArgs)">
            <summary>
            Constructor to use when an exception results from a
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </summary>
            <param name="ex">
            The <see cref="T:System.Exception"/> raised by the invoked property.
            </param>
            <param name="argument">
            The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that
            resulted in an exception.
            </param>
        </member>
        <member name="M:Spring.Objects.MethodInvocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the MethodInvocationException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Objects.MethodInvocationException.ErrorCode">
            <summary>
            The error code string for this exception.
            </summary>
        </member>
        <member name="T:Spring.Objects.MutablePropertyValues">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.IPropertyValues"/>
            interface.
            </summary>
            <remarks>
            <p>
            Allows simple manipulation of properties, and provides constructors to
            support deep copy and construction from a number of collection types such as
            <see cref="T:System.Collections.IDictionary"/> and
            <see cref="T:System.Collections.IList"/>.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: MutablePropertyValues.cs,v 1.9 2005/03/30 17:00:19 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.MutablePropertyValues._propertyValuesList">
            <summary>List of <see cref="T:Spring.Objects.PropertyValue"/> objects.</summary>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <remarks>
            <p>
            The returned instance is initially empty...
            <see cref="T:Spring.Objects.PropertyValue"/>s can be added with the various
            overloaded <see cref="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)"/> and
            <see cref="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IDictionary)"/> methods.
            </p>
            </remarks>
            <seealso cref="M:Spring.Objects.MutablePropertyValues.Add(Spring.Objects.PropertyValue)"/>
            <seealso cref="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)"/>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor(Spring.Objects.IPropertyValues)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <remarks>
            <p>
            Deep copy constructor. Guarantees <see cref="T:Spring.Objects.PropertyValue"/>
            references are independent, although it can't deep copy objects currently
            referenced by individual <see cref="T:Spring.Objects.PropertyValue"/> objects.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.MutablePropertyValues"/>
            class.
            </summary>
            <param name="map">
            The <see cref="T:System.Collections.IDictionary"/> with property values
            keyed by property name, which must be a <see cref="T:System.String"/>.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Add(System.String,System.Object)">
            <summary>
            Overloaded version of <c>Add</c> that takes a property name and a property value.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="propertyValue">
            The value of the property.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Add(Spring.Objects.PropertyValue)">
            <summary>
            Add the supplied <see cref="T:Spring.Objects.PropertyValue"/> object,
            replacing any existing one for the respective property.
            </summary>
            <param name="pv">
            The <see cref="T:Spring.Objects.PropertyValue"/> object to add.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IDictionary)">
            <summary>
            Add all property values from the given
            <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="map">
            The map of property values, the keys of which must be
            <see cref="T:System.String"/>s.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.AddAll(System.Collections.IList)">
            <summary>
            Add all property values from the given
            <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="values">
            The list of <see cref="T:Spring.Objects.PropertyValue"/>s to be added.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Remove(Spring.Objects.PropertyValue)">
            <summary>
            Remove the given <see cref="T:Spring.Objects.PropertyValue"/>, if contained.
            </summary>
            <param name="pv">
            The <see cref="T:Spring.Objects.PropertyValue"/> to remove.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Remove(System.String)">
            <summary>
            Removes the named <see cref="T:Spring.Objects.PropertyValue"/>, if contained.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.SetPropertyValueAt(Spring.Objects.PropertyValue,System.Int32)">
            <summary>
            Modify a <see cref="T:Spring.Objects.PropertyValue"/> object held in this object. Indexed from 0.
            </summary>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.GetPropertyValue(System.String)">
            <summary>
            Return the property value given the name.
            </summary>
            <remarks>
            The property name is checked in a <c>case-insensitive</c> fashion.
            </remarks>
            <param name="propertyName">
            The name of the property.
            </param>
            <returns>
            The property value.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.Contains(System.String)">
            <summary>
            Does the container of properties contain one of this name.
            </summary>
            <param name="propertyName">The name of the property to search for.</param>
            <returns>
            True if the property is contained in this collection, false otherwise.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.ChangesSince(Spring.Objects.IPropertyValues)">
            <summary>
            Return the difference (changes, additions, but not removals) of
            property values between the supplied argument and the values
            contained in the collection.
            </summary>
            <param name="old">Another property values collection.</param>
            <returns>
            The collection of property values that are different than the supplied one.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can iterate
            through a collection.
            </summary>
            <remarks>
            <p>
            The returned <see cref="T:System.Collections.IEnumerator"/> is the
            <see cref="T:System.Collections.IEnumerator"/> exposed by the
            <see cref="P:Spring.Objects.MutablePropertyValues.PropertyValues"/>
            property.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can iterate through a
            collection.
            </returns>
        </member>
        <member name="M:Spring.Objects.MutablePropertyValues.ToString">
            <summary>
            Convert the object to a string representation.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
        </member>
        <member name="P:Spring.Objects.MutablePropertyValues.PropertyValues">
            <summary>
            Property to retrieve the array of property values.
            </summary>
        </member>
        <member name="T:Spring.Objects.NotWritablePropertyException">
            <summary>
            Thrown in response to a failed attempt to write a property.
            </summary>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class
            summarizing what property was not writable.
            </summary>
            <param name="theProperty">
            The name of the property that is not writable.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Creates new NotWritablePropertyException with a root cause.
            </summary>
            <param name="theProperty">
            The name of the property that is not writable.
            </param>
            <param name="type">
            The <see cref="T:System.Type"/> in which the property is not writable.
            </param>
            <param name="ex">
            The root cause indicating why the property was not writable.
            </param>
        </member>
        <member name="M:Spring.Objects.NotWritablePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the NotWritablePropertyException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Spring.Objects.NullValueInNestedPathException">
            <summary>
            Thrown in response to encountering a null value while traversing a nested path
            expression.
            </summary>        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.#ctor">
            <summary>
            Creates a new instance of the NullValueInNestedPathException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.#ctor(System.String)">
            <summary>
            Creates a new instance of the NullValueInNestedPathException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the NullValueInNestedPathException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.#ctor(System.Type,System.String)">
            <summary>
            Create the exception giving the type of object and property name that was
            not found.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the object where the property was not found.
            </param>
            <param name="theProperty">The name of the property not found.</param>
        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the NullValueInNestedPathException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.NullValueInNestedPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="P:Spring.Objects.NullValueInNestedPathException.PropertyName">
            <summary>            The name of the offending property            </summary>        </member>
        <member name="P:Spring.Objects.NullValueInNestedPathException.ObjectType">
            <summary>            The type of the class where the property was last looked for.            </summary>        </member>
        <member name="T:Spring.Objects.ObjectUtils">
            <summary>
            Helper methods with regard to objects, types, properties, etc.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: ObjectUtils.cs,v 1.13 2005/03/30 17:00:19 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.ObjectUtils.EmptyObjects">
            <summary>
            An empty object array.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spring.Objects.ObjectUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.InstantiateType(System.Type)">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            its no-arg constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate types by name, it should
            avoid type loading issues.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to instantiate</param>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the <see cref="T:System.Type"/> could not be instantiated.
            </exception>
            <returns>A new instance of the <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.InstantiateType(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Convenience method to instantiate a <see cref="T:System.Type"/> using
            the given constructor.
            </summary>
            <remarks>
            <p>
            As this method doesn't try to instantiate types by name, it should
            avoid type loading issues.
            </p>
            </remarks>
            <param name="constructor">
            The constructor to use for the instantiation.
            </param>
            <param name="arguments">
            The arguments to be passed to the constructor.
            </param>
            <returns>A new instance.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.IsAssignableAndNotTransparentProxy(System.Type,System.Object)">
            <summary>
            When dealing with server-activated remote objects the object is of the 
            type TransparentProxy and regular 'is' testing for assignable types 
            does not work.  The TransparentProxy always returns true.  This method
            only checks if the object is assignable to the type if it is not
            a TransparentProxy
            </summary>
            <param name="type">The target <see cref="T:System.Type"/></param>
            <param name="obj">The value that should be assigned to the type.</param>
            <returns>false if the </returns>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.IsAssignable(System.Type,System.Object)">
            <summary>
            Determine if the given <see cref="T:System.Type"/> is assignable from the
            given value, assuming setting by reflection.
            </summary>
            <remarks>
            <p>
            Considers primitive wrapper classes as assignable to the
            corresponding primitive types.
            </p>
            <p>
            For example used in an object factory's constructor resolution.
            </p>
            </remarks>
            <param name="type">The target <see cref="T:System.Type"/>.</param>
            <param name="obj">The value that should be assigned to the type.</param>
            <returns>True if the type is assignable from the value.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.IsSimpleProperty(System.Type)">
            <summary>
            Check if the given <see cref="T:System.Type"/> represents a
            "simple" property,
            i.e. a primitive, a <see cref="T:System.String"/>, a
            <see cref="T:System.Type"/>, or a corresponding array.
            </summary>
            <remarks>
            <p>
            Used to determine properties to check for a "simple" dependency-check.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to check.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.IsPrimitiveArray(System.Type)">
            <summary>
            Check if the given class represents a primitive array,
            i.e. boolean, byte, char, short, int, long, float, or double.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type could not be resolved.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.NullSafeEquals(System.Object,System.Object)">
            <summary>
            Determine if the given objects are equal, returning true if both
            are null respectively false if only one is null.
            </summary>
            <param name="o1">The first object to compare.</param>
            <param name="o2">The second object to compare.</param>
            <returns>True if the given objects are equal.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.EnumerateFirstElement(System.Collections.IEnumerator)">
            <summary>
            Returns first element in the supplied <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements.
            </param>
            <returns>
            The first element in the supplied <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the supplied <paramref name="enumerator"/> did not have any elements.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectUtils.EnumerateElementAtIndex(System.Collections.IEnumerator,System.Int32)">
            <summary>
            Returns the element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </summary>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> to use to enumerate
            elements until the supplied <paramref name="index"/> is reached.
            </param>
            <param name="index">
            The index of the element in the enumeration to return.
            </param>
            <returns>
            The element at the specified index using the supplied
            <paramref name="enumerator"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> was less than zero, or the
            supplied <paramref name="enumerator"/> did not contain enough elements
            to be able to reach the supplied <paramref name="index"/>.
            </exception>
        </member>
        <member name="T:Spring.Objects.ObjectWrapper">
            <summary>
            Default implementation of the <see cref="T:Spring.Objects.IObjectWrapper"/>
            interface that should be sufficient for all normal uses. Caches introspection
            results for efficiency.
            </summary>
            <remarks>
            <p>
            Note: Auto-registers all default property converters (not the custom ones)
            in the <see cref="N:Spring.Objects.TypeConverters"/> namespace.
            Applications can call the instance's
            <see cref="M:Spring.Objects.ObjectWrapper.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)"/> method to
            register a converter for the particular instance.
            </p>
            <p>
            ObjectWrapper will convert <see cref="T:System.Collections.IList"/> and array
            values to the corresponding target arrays, if necessary. Custom
            <see cref="T:System.ComponentModel.TypeConverter"/>s that deal with
            <see cref="T:System.Collections.IList"/>s or arrays can be written against a
            comma delimited <see cref="T:System.String"/> as <see cref="T:System.String"/>
            arrays are converted in such a format if the array itself is not assignable.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller </author>
            <author>Jean-Pierre Pawlak</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: ObjectWrapper.cs,v 1.40 2005/03/30 17:00:19 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.NestedPropertySeparator">
            <summary>
            The path separator for nested properties.
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.PropertyKeyPrefix">
            <summary>
            Marker that indicates the start of a property key for an indexed or
            mapped property like "person.addresses[0]".
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.PropertyKeySuffix">
            <summary>
            Marker that indicates the end of a property key for an indexed or
            mapped property like "person.addresses[0]".
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.PropertyResolutionFlags">
            <summary>
            The <see cref="T:System.Reflection.BindingFlags"/> used during the setting and
            searching for of properties.
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper._wrappedObject">
            <summary>The wrapped object </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper._nestedPath">
            <summary>The nested path of the object </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper._nestedObjectWrappers">
            <summary>
            Dictionary  with cached nested ObjectWrappers
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper._customConverters">
            <summary>Map with custom TypeConverter instances </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper._defaultConverters">
            <summary>
            The default converters used to convert string to object types.
            </summary>
        </member>
        <member name="F:Spring.Objects.ObjectWrapper.log">
            <summary>
            The ILog instance for this class. We'll create a lot of these objects,
            so we don't want a new instance every time.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor">
            <summary> 
            Create new empty ObjectWrapper. Wrapped instance needs to be set afterwards.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor(System.Object)">
            <summary>
            Create new ObjectWrapper for the given object.
            </summary>
            <param name="obj">
            The object wrapped by this ObjectWrapper.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If the object cannot be wrapped.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor(System.Object,System.String)">
            <summary>
            Create new ObjectWrapper for the given object, registering a nested path that
            the object is in.
            </summary>
            <param name="instance">
            The object wrapped by this ObjectWrapper.
            </param>
            <param name="nestedPath">
            The nested path of the object.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#ctor(System.Type)">
            <summary>
            Create new ObjectWrapper for the given object, instantiating a new
            instance of the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to instantiate and wrap.
            </param>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the <see cref="T:System.Type"/> could not be wrapped.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.#cctor">
            <summary>
            Initialize the default converters.
            </summary>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.RegisterCustomConverter(System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of property.
            </param>
            <param name="typeConverter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.RegisterCustomConverter(System.Type,System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Register the given custom <see cref="T:System.ComponentModel.TypeConverter"/>
            for all properties of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of property.
            </param>
            <param name="typeConverter">
            The <see cref="T:System.ComponentModel.TypeConverter"/> to register.
            </param>
            <param name="propertyPath">
            The location of the property.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.IsNestedProperty(System.String)">
            <summary>
            Is the property nested? That is, does it contain the nested property
            separator (usually ".").
            </summary>
            <param name="path">The property path.</param>
            <returns>True if the property is nested.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetFinalPath(System.String)">
            <summary>
            Get the last component of the path. Also works if not nested.
            </summary>
            <param name="nestedPath">
            The property path we know is nested.
            </param>
            <returns>
            The last component of the path (the property on the target object).
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetObjectWrapperForPropertyPath(System.String)">
            <summary>
            Recursively navigate to return a <see cref="T:Spring.Objects.ObjectWrapper"/>
            for the nested property path.
            </summary>
            <param name="propertyPath">
            The property property path, which may be nested.
            </param>
            <returns>
            A <see cref="T:Spring.Objects.ObjectWrapper"/> for the target object.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.FindCustomConverter(System.Type,System.String)">
            <summary>
            Find a custom <see cref="T:System.ComponentModel.TypeConverter"/> for the
            given <see cref="T:System.Type"/> and property.</summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> of the property, can be null if a property
            is given but should be specified in any case for consistency checking.
            </param>
            <param name="propertyPath">
            The path of the property (name or nested path), or null if looking for a
            <see cref="T:System.ComponentModel.TypeConverter"/> for all properties of
            the given <see cref="T:System.Type"/>.
            </param>
            <returns>
            The registered <see cref="T:System.ComponentModel.TypeConverter"/>, or null
            if none.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)">
            <summary>
            Update a property value.
            </summary>
            <remarks>
            <p>
            <b>This is the preferred way to update an individual property.</b>
            </p>
            </remarks>
            <param name="pv">
            The object containing new property value.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues)">
            <summary>
            The preferred way to perform a bulk update.
            </summary>
            <remarks>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type mismatch,
            but <b>not</b> an invalid fieldname or the like) is encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing
            all the individual errors.
            </p>
            <p>
            This exception can be examined later to see all binding errors. Properties
            that were successfully updated stay changed.
            </p>
            <p>
            Does not allow unknown fields. Equivalent to
            <see cref="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues)"/> with false
            and null parameters.
            </p>
            </remarks>
            <param name="pvs">
            The <see cref="T:Spring.Objects.IPropertyValues"/> to set on the target
            object.
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValues(Spring.Objects.IPropertyValues,System.Boolean)">
            <summary>
            Perform a bulk update with full control over behavior.
            </summary>
            <remarks>
            <p>
            Note that performing a bulk update differs from performing a single update,
            in that an implementation of this class will continue to update properties
            if a <b>recoverable</b> error (such as a vetoed property change or a type mismatch,
            but <b>not</b> an invalid fieldname or the like) is encountered, throwing a
            <see cref="T:Spring.Objects.PropertyAccessExceptionsException"/> containing all the
            individual errors.
            </p>
            <p>
            This exception can be examined later to see all binding errors. Properties that were
            successfully updated stay changed. Does not allow unknown fields.
            </p>
            </remarks>
            <param name="propertyValues">
            The <see cref="T:Spring.Objects.PropertyValue"/>s to set on the target object.
            </param>
            <param name="ignoreUnknown">
            Should we ignore unknown values (not found in the object!?).
            </param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetNestedObjectWrapper(System.String)">
            <summary>
            Retrieve an <see cref="T:Spring.Objects.ObjectWrapper"/> for the given nested property.
            </summary>
            <remarks>
            <p>
            Creates a new one if not found in the cache.
            </p>
            <p>
            Note: Caching nested <see cref="T:Spring.Objects.ObjectWrapper"/>s is necessary now,
            to keep registered custom type converters for nested properties.
            </p>
            </remarks>
            <param name="nestedProperty">
            The property to create the <see cref="T:Spring.Objects.ObjectWrapper"/> for.
            </param>
            <returns>
            The <see cref="T:Spring.Objects.ObjectWrapper"/> instance, either cached or newly created.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyValue(System.String)">
            <summary>Get the value of a property.</summary>
            <param name="propertyName">
            The name of the property to get the value of.
            </param>
            <returns>The value of the property.</returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If there is no such property, if the property isn't readable, or
            if getting the property value throws an exception.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.SetPropertyValue(System.String,System.Object)">
            <summary>
            Set a property value.
            </summary>
            <remarks>
            <p>
            This method is provided for convenience only. The
            <see cref="M:Spring.Objects.ObjectWrapper.SetPropertyValue(Spring.Objects.PropertyValue)"/>
            method is more powerful.
            </p>
            </remarks>
            <param name="propertyName">
            The name of the property to set value of.
            </param>
            <param name="val">The new value.</param>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.FindDefaultConverter(System.Type)">
            <summary>
            Look for a default <see cref="T:System.ComponentModel.TypeConverter"/>
            to handle common cases.
            </summary>
            <param name="requiredType">
            The <see cref="T:System.Type"/> that is registered to be converted.
            </param>
            <returns>
            The default <see cref="T:System.ComponentModel.TypeConverter"/> for the
            supplied <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.DoTypeConversionIfNecessary(System.Object,System.Type)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary from a string).
            </summary>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <exception cref="T:Spring.Objects.ObjectsException">
            If there is an internal error.
            </exception>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.DoTypeConversionIfNecessary(System.String,System.String,System.Object,System.Object,System.Type)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary
            from a <see cref="T:System.String"/>), for the specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="fullPropertyName">
            Legacy, not used.  Will refactor out later.
            </param>
            <param name="oldValue">
            The previous value, if available (may be null).
            </param>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we are trying to convert to.
            </param>
            <returns>
            The new value, possibly the result of type conversion.
            </returns>
            <exception cref="T:Spring.Objects.ObjectsException">
            If there is an internal error.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.CreatePropertyChangeEventArgs(System.String,System.Object,System.Object)">
            <summary>
            Utility method to create a property change event.
            </summary>
            <param name="fullPropertyName">
            The full name of the property that has changed.
            </param>
            <param name="oldValue">The property old value</param>
            <param name="newValue">The property new value</param>
            <returns>
            A new <see cref="T:Spring.Objects.PropertyChangeEventArgs"/>.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyInfo(System.String)">
            <summary>
            Get the <see cref="T:System.Reflection.PropertyInfo"/> for the named property.
            </summary>
            <remarks>
            <p>
            The search for the named property is performed in a case insensitive fashion, so
            'Age' is the dame as 'agE' is the same as 'AGE'.
            </p>
            </remarks>
            <param name="propertyName">
            The name of the property to search for.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the named property.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.GetPropertyInfos">
            <summary>
            Get the properties of the wrapped object.
            </summary>
            <returns>
            An array of <see cref="T:System.Reflection.PropertyInfo"/>s.
            </returns>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.IsWritableProperty(System.String)">
            <summary>
            Is the named property writeable?
            </summary>
            <param name="propertyName">
            The property to check the writeable status of.
            </param>
            <returns>
            True if the named property is writeable; false if the property
            does not exist.
            </returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the <paramref name="propertyName"/> is a null or zero length string.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.IsReadableProperty(System.String)">
            <summary>
            Is the named property readable?
            </summary>
            <param name="propertyName">
            The property to check status for.
            </param>
            <returns>
            True if this property is readable, or false if the property doesn't exist.
            </returns>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the <paramref name="propertyName"/> is a null or zero length string.
            </exception>
        </member>
        <member name="M:Spring.Objects.ObjectWrapper.ToString">
            <summary>
            This method is expensive! Only call for diagnostics and debugging reasons,
            not in production.
            </summary>
            <returns>
            A string describing the state of this object.
            </returns>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.WrappedInstance">
            <summary>
            Switches the target object, replacing the cached introspection results only
            if the class of the new object is different to that of the replaced object.
            </summary>
            <exception cref="T:Spring.Objects.FatalObjectException">
            If the object cannot be changed.
            </exception>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.WrappedType">
            <summary>
            Convenience method to return the <see cref="T:System.Type"/> of the wrapped object.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> of the wrapped object.
            </returns>
        </member>
        <member name="P:Spring.Objects.ObjectWrapper.PropertyDescriptors">
            <summary>
            Return the collection of property descriptors.
            </summary>
        </member>
        <member name="T:Spring.Objects.PropertyAccessExceptionsException">
            <summary>
            Combined exception, composed of individual binding propertyAccessExceptions.
            </summary>
            <remarks>
            <p>
            An object of this class is created at the beginning of the binding
            process, and errors added to it as necessary.
            </p>
            <p>
            The binding process continues when it encounters application-level
            propertyAccessExceptions, applying those changes that can be applied and storing
            rejected changes in an object of this class.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.String)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(Spring.Objects.IObjectWrapper,Spring.Objects.PropertyAccessException[])">
            <summary>
            Create new empty PropertyAccessExceptionsException.
            We'll add errors to it as we attempt to bind properties.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the PropertyAccessExceptionsException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate
            with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>)
            for this serialization.
            </param>
        </member>
        <member name="F:Spring.Objects.PropertyAccessExceptionsException._objectWrapper">
            <summary>IObjectWrapper wrapping the target object for binding </summary>
        </member>
        <member name="F:Spring.Objects.PropertyAccessExceptionsException._propertyAccessExceptions">
            <summary>List of PropertyAccessException objects </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.GetPropertyAccessException(System.String)">
            <summary>
            Return the <see cref="T:Spring.Objects.PropertyAccessException"/>
            for this field, or null if there isn't one.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyAccessExceptionsException.ToString">
            <summary>
            Describe the number of exceptions contained in this container class.
            </summary>
            <returns>A description of the instance contents.</returns>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.ObjectWrapper">
            <summary>
            Return the <see cref="T:Spring.Objects.IObjectWrapper"/> that generated
            this exception.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.BindObject">
            <summary>
            Return the object we're binding to.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.ExceptionCount">
            <summary>
            If this returns 0, no errors were encountered during binding.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.PropertyAccessExceptions">
            <summary>
            Return an array of the <see cref="T:Spring.Objects.PropertyAccessException"/>s
            stored in this object.
            </summary>
            <remarks>
            <p>
            Will return the empty array (not null) if there were no errors.
            </p>
            </remarks>
        </member>
        <member name="P:Spring.Objects.PropertyAccessExceptionsException.Message">
            <summary>
            Describe the group of exceptions. 
            </summary>
        </member>
        <member name="T:Spring.Objects.PropertyChangeEventArgs">
            <summary>
            Describe the change of a property similar to how it is done in java.beans.PropertyChangeEvent.
            </summary>
        </member>
        <member name="M:Spring.Objects.PropertyChangeEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Create a new PropertyChangeEventArgs instance.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">the new value of the property.</param>
        </member>
        <member name="P:Spring.Objects.PropertyChangeEventArgs.OldValue">
            <summary>
            Get the old value for the property.
            </summary>
        </member>
        <member name="P:Spring.Objects.PropertyChangeEventArgs.NewValue">
            <summary>
            Get the new value of the property.
            </summary>
        </member>
        <member name="T:Spring.Objects.PropertyValue">
            <summary>
            Class to hold information and value for an individual property.
            </summary>
            <remarks>
            <p>
            Using an object here, rather than just storing all properties in a
            map keyed by property name, allows for more flexibility, and the
            ability to handle indexed properties etc in a special way if necessary.
            </p>
            <p>
            Note that the value doesn't need to be the final required type:
            A <see cref="T:Spring.Objects.IObjectWrapper"/> implementation should
            handle any necessary conversion, as this object doesn't know anything
            about the objects it will be applied to.
            </p>
            </remarks>
            <author>Rod Johnson</author>
            <author>Mark Pollack (.NET)</author>
            <version>$Id: PropertyValue.cs,v 1.4 2005/03/30 17:00:40 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Objects.PropertyValue._name">
            <summary>Property name </summary>
        </member>
        <member name="F:Spring.Objects.PropertyValue._val">
            <summary>Value of the property </summary>
        </member>
        <member name="M:Spring.Objects.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the PropertyValue class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="val">
            The value of the property (possibly before type conversion).
            </param>
        </member>
        <member name="M:Spring.Objects.PropertyValue.ToString">
            <summary>
            Print a string representation of the property.
            </summary>
            <returns>A string representation of the property.</returns>
        </member>
        <member name="M:Spring.Objects.PropertyValue.Equals(System.Object)">
            <summary>
            Test if another object is equal in value to this one.
            </summary>
            <param name="other">The other instance.</param>
            <returns>True if they are equal in content, false otherwise.</returns>
        </member>
        <member name="M:Spring.Objects.PropertyValue.GetHashCode">
            <summary>
            The hashcode of the property
            </summary>
            <returns>The hashcode of the property.</returns>
        </member>
        <member name="P:Spring.Objects.PropertyValue.Name">
            <summary>Gets the name of the property.</summary>
            <returns>The name of the property.</returns>
        </member>
        <member name="P:Spring.Objects.PropertyValue.Value">
            <summary>
            Return the value of the property.
            </summary>
            <remarks>
            <p>
            Note that type conversion will <i>not</i> have occurred here.
            It is the responsibility of the
            <see cref="T:Spring.Objects.IObjectWrapper"/> implementation to
            perform type conversion.
            </p>
            </remarks>
            <returns>The value of the property.</returns>
        </member>
        <member name="T:Spring.Objects.TypeMismatchException">
            <summary>
            Exception thrown on a <see cref="T:System.Type"/> mismatch when trying to set a property
            or resolve an argument to a method invocation.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Mark Pollack (.NET)</author>
            <version>
            $Id: TypeMismatchException.cs,v 1.6 2005/03/30 17:00:40 markpollack Exp $
            </version>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="rootCause">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor(Spring.Objects.PropertyChangeEventArgs,System.Type)">
            <summary>
            Create a new TypeMismatchException describing the property and required type that could not used
            to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">Description of the property that was to be changed.</param>
            <param name="requiredType">The target conversion type.</param>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor(Spring.Objects.PropertyChangeEventArgs,System.Type,System.Exception)">
            <summary>
            Create a new TypeMismatchException describing the property , required type, and underlying
            exception that could not be used to set a property on the target object.
            </summary>
            <param name="propertyChangeEventArgs">Description of the property that was to be changed.</param>
            <param name="requiredType">The target conversion type.</param>
            <param name="ex">The underlying exception.</param>
        </member>
        <member name="M:Spring.Objects.TypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the TypeMismatchException class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Spring.Objects.TypeMismatchException.ErrorCode">
            <summary>
            The string error code used to classify the exception.
            </summary>
        </member>
        <member name="T:Spring.Pool.ClosedPoolAccessedExceptionFactory">
            <summary>
            exception raised if a SpringPool does not have any valid items per its factory
            </summary>
        </member>
        <member name="M:Spring.Pool.ClosedPoolAccessedExceptionFactory.New(Spring.Pool.IObjectPool)">
            <summary>
            factory method
            </summary>
        </member>
        <member name="T:Spring.Pool.IObjectPool">
            <summary>
            Pool interface, along the lines of commons-pool ObjectPool
            </summary>
            <author>Federico Spinazzi</author>
            <version>$Id: IObjectPool.cs,v 1.1 2004/11/12 10:27:11 fspinazzi Exp $</version>
            <seealso cref="T:Spring.Pool.IPoolableObjectFactory"></seealso>
        </member>
        <member name="M:Spring.Pool.IObjectPool.BorrowObject">
            <summary>
            Get an object from the pool
            </summary>
            <returns>an activated object </returns>
            <exception cref="T:Spring.Pool.PoolException">In case the pool is unusable</exception>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)"></seealso>
        </member>
        <member name="M:Spring.Pool.IObjectPool.ReturnObject(System.Object)">
            <summary>
            return an object to the pool
            </summary>
            <param name="target">the instance to be returned to the pool</param>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"></seealso>
        </member>
        <member name="M:Spring.Pool.IObjectPool.Close">
            <summary>
            passivate active objects and destroy all objects
            </summary>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)"></seealso>
            <seealso cref="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)"></seealso>
        </member>
        <member name="P:Spring.Pool.IObjectPool.NumActive">
            <summary>
            How many borrowed instances ?
            </summary>
        </member>
        <member name="P:Spring.Pool.IObjectPool.NumIdle">
            <summary>
            How many available instances ?
            </summary>
        </member>
        <member name="T:Spring.Pool.IPoolableObjectFactory">
            <summary>
            <p>An interface defining life-cycle 
            methods for instances to be used in an IObjectPool
            </p>
            <p>Clearly copied from jakarta commons-pool</p>
            </summary>
            <author>Federico Spinazzi</author>
            <version>$Id: IPoolableObjectFactory.cs,v 1.1 2004/11/12 10:27:11 fspinazzi Exp $</version>
            <seealso cref="T:Spring.Pool.IObjectPool"/>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.MakeObject">
            <summary>
            The method to call whenever a new instance is needed.
            </summary>
            <returns>a new object to add to the pool</returns>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.DestroyObject(System.Object)">
            <summary>
            invoked on every instance when it is being "dropped" from the pool 
            (whether due to the response from validateObject, or for 
            reasons specific to the pool implementation.)
            </summary>
            <param name="o">the instance to be destroyed</param>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.ValidateObject(System.Object)">
            <summary>
            invoked in an implementation-specific fashion to determine if an 
            instance is still valid to be returned by the pool. 
            It will only be invoked on an "activated" instance.
            </summary>
            <param name="o">the instance to validate</param>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.ActivateObject(System.Object)">
            <summary>
            invoked on every instance before it is returned from the pool.
            </summary>
            <param name="o">the instance to be activated</param>
        </member>
        <member name="M:Spring.Pool.IPoolableObjectFactory.PassivateObject(System.Object)">
            <summary>
            invoked on every instance when it is returned 
            to the pool.
            </summary>
            <param name="o">the instance returned to the pool</param>
        </member>
        <member name="T:Spring.Pool.NamespaceDoc">
            <summary>
            This package contains implementations of the IPool interface.
            
            <p>All the code owes much to Doug Lea's util concurrent package</p>
            
            <p>The simplest implementation is the SimplePool. This should be normally appropriate.</p>
            
            </summary>
        </member>
        <member name="T:Spring.Pool.NoMoreValidItemsInPoolExceptionFactory">
            <summary>
            exception raised if a SpringPool does not have any valid items per its factory
            </summary>
        </member>
        <member name="M:Spring.Pool.NoMoreValidItemsInPoolExceptionFactory.New(Spring.Pool.IObjectPool)">
            <summary>
            factory method
            </summary>
        </member>
        <member name="T:Spring.Pool.PoolException">
            <summary>
            base pool exception
            </summary>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor">
            <summary>
            required by Spring
            </summary>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.String)">
            <summary>
            required by Spring
            </summary>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.String,System.Exception)">
            <summary>
            required by Spring
            </summary>
        </member>
        <member name="M:Spring.Pool.PoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            required by Spring
            </summary>
        </member>
        <member name="T:Spring.Pool.SimplePool">
            <summary>
            Pool along the lines of Doug Lea Pool (Concurrent programming in java, 2nd ed.)
            </summary>
            <author>Doug Lea</author>
            <author>Federico Spinazzi</author>
            <version>$Id: SimplePool.cs,v 1.4 2005/03/30 17:01:11 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Pool.SimplePool.available">
            <summary>
            Set of permits
            </summary>
        </member>
        <member name="M:Spring.Pool.SimplePool.#ctor(Spring.Pool.IPoolableObjectFactory,System.Int32)">
            <summary>
            
            </summary>
            <param name="factory">the factory used to instantiate and manage lyfecycle of pooles object</param>
            <param name="size">size of the pool</param>
        </member>
        <member name="M:Spring.Pool.SimplePool.BorrowObject">
            <summary>
            get an object from the pool
            </summary>
        </member>
        <member name="M:Spring.Pool.SimplePool.ReturnObject(System.Object)">
            <summary>
            return the object to the pool
            </summary>
            <param name="o">the object to be returned</param>
        </member>
        <member name="M:Spring.Pool.SimplePool.DoBorrow">
            <summary>
            synchronized borrow logic
            </summary>
        </member>
        <member name="M:Spring.Pool.SimplePool.DoReturn(System.Object)">
            <summary>
            synchronized release logic 
            </summary>
            <param name="o">the object to release to the pool</param>
            <returns>false if the object was not a busy one</returns>
        </member>
        <member name="M:Spring.Pool.SimplePool.InitItems(System.Int32)">
            <summary>
            build intances of objects
            </summary>
            <param name="n">number of object to build</param>
        </member>
        <member name="M:Spring.Pool.SimplePool.Close">
            <summary>
            <p>passivate busy objects then destroy all objects</p>
            </summary>
        </member>
        <member name="M:Spring.Pool.SimplePool.MakeNotUsable">
            <summary>
            Make the pool no more usable
            </summary>
        </member>
        <member name="P:Spring.Pool.SimplePool.NumActive">
            <summary>
            number of active objects
            </summary>
        </member>
        <member name="P:Spring.Pool.SimplePool.NumIdle">
            <summary>
            number of idle objects
            </summary>
        </member>
        <member name="T:Spring.Threading.BoundedBuffer">
            <summary> Efficient array-based bounded buffer class.
            </summary>
        </member>
        <member name="T:Spring.Threading.IBoundedChannel">
            <summary> A channel that is known to have a capacity, signifying
            that <code>put</code> operations may block when the
            capacity is reached. Various implementations may have
            intrinsically hard-wired capacities, capacities that are fixed upon
            construction, or dynamically adjustable capacities.
            </summary>
            <seealso cref="T:Spring.Threading.DefaultChannelCapacity">
            
            </seealso>
        </member>
        <member name="T:Spring.Threading.IChannel">
            <summary> Main interface for buffers, queues, pipes, conduits, etc.
            <p>
            A Channel represents anything that you can put items
            into and take them out of. As with the Sync 
            interface, both
            blocking (Put(x), Take),
            and timeouts (Offer(x, msecs), Poll(msecs)) policies
            are provided. Using a
            zero timeout for offer and poll results in a pure balking policy.
            </p>
            <p>
            To aid in efforts to use Channels in a more typesafe manner,
            this interface extends IPuttable and ITakable. You can restrict
            arguments of instance variables to this type as a way of
            guaranteeing that producers never try to take, or consumers put.
            </p>
            <p>
            A given channel implementation might or might not have bounded
            capacity or other insertion constraints, so in general, you cannot tell if
            a given put will block. However, channels that are designed to 
            have an element capacity (and so always block when full)
            should implement the BoundedChannel subinterface.
            </p>
            <p>
            Channels may hold any kind of item. However,
            insertion of null is not in general supported. Implementations
            may (all currently do) throw IllegalArgumentExceptions upon attempts to
            insert null. 
            </p>
            <p>
            By design, the <see cref="T:Spring.Threading.IChannel"/> interface does not support any methods to determine
            the current number of elements being held in the channel.
            This decision reflects the fact that in
            concurrent programming, such methods are so rarely useful
            that including them invites misuse; at best they could 
            provide a snapshot of current
            state, that could change immediately after being reported.
            It is better practice to instead use poll and offer to try
            to take and put elements without blocking. For example,
            to empty out the current contents of a channel, you could write:
            </p>
            <p>
            However, it is possible to determine whether an item
            exists in a <see cref="T:Spring.Threading.IChannel"/> via <see cref="M:Spring.Threading.IChannel.Peek"/>, which returns
            but does NOT remove the next item that can be taken (or null
            if there is no such item). The peek operation has a limited
            range of applicability, and must be used with care. Unless it
            is known that a given thread is the only possible consumer
            of a channel, and that no time-out-based <code>offer</code> operations
            are ever invoked, there is no guarantee that the item returned
            by peek will be available for a subsequent take.
            </p>
            <p>
            When appropriate, you can define an IsEmpty method to
            return whether <see cref="M:Spring.Threading.IChannel.Peek"/> returns null.
            </p>
            <p>
            Also, as a compromise, even though it does not appear in interface,
            implementation classes that can readily compute the number
            of elements support a <code>size()</code> method. This allows careful
            use, for example in queue length monitors, appropriate to the
            particular implementation constraints and properties.</p>
            <p>
            All channels allow multiple producers and/or consumers.
            They do not support any kind of <em>Close</em> method
            to shut down operation or indicate completion of particular
            producer or consumer threads. 
            If you need to signal completion, one way to do it is to
            create a class such as
            <pre>
            class EndOfStream { 
            // Application-dependent field/methods
            }
            </pre>
            And to have producers put an instance of this class into
            the channel when they are done. The consumer side can then
            check this via
            <pre>
            object x = aChannel.Take();
            if (x is EndOfStream) 
            // special actions; perhaps terminate
            else
            // process normally
            </pre>
            </p>
            <p>
            In time-out based methods (poll(msecs) and offer(x, msecs), 
            time bounds are interpreted in
            a coarse-grained, best-effort fashion. Since there is no
            way in Java to escape out of a wait for a synchronized
            method/block, time bounds can sometimes be exceeded when
            there is a lot contention for the channel. Additionally,
            some Channel semantics entail a ``point of
            no return'' where, once some parts of the operation have completed,
            others must follow, regardless of time bound.
            </p>
            <p>
            Interruptions are in general handled as early as possible
            in all methods. Normally, InterruptionExceptions are thrown
            in put/take and offer(msec)/poll(msec) if interruption
            is detected upon entry to the method, as well as in any
            later context surrounding waits. 
            </p>
            <p>
            If a put returns normally, an offer
            returns true, or a put or poll returns non-null, the operation
            completed successfully. 
            In all other cases, the operation fails cleanly -- the
            element is not put or taken.</p>
            </summary>
            <seealso cref="T:Spring.Threading.ISync">
            </seealso>
            <seealso cref="T:Spring.Threading.IBoundedChannel">
            
            </seealso>
        </member>
        <member name="T:Spring.Threading.IPuttable">
            <summary> This interface exists to enable stricter type checking
            for channels. A method argument or instance variable
            in a producer object can be declared as only a Puttable
            rather than a Channel, in which case a Java compiler
            will disallow take operations.
            <p>
            Full method descriptions appear in the Channel interface.</p>
            </summary>
            <seealso cref="T:Spring.Threading.IChannel">
            </seealso>
            <seealso cref="T:Spring.Threading.ITakable">
            
            </seealso>
        </member>
        <member name="M:Spring.Threading.IPuttable.Put(System.Object)">
            <summary> Place item in the channel, possibly waiting indefinitely until
            it can be accepted. Channels implementing the BoundedChannel
            subinterface are generally guaranteed to block on puts upon
            reaching capacity, but other implementations may or may not block.
            </summary>
            <param name="item">the element to be inserted. Should be non-null.
            </param>
            <exception cref="T:System.Threading.ThreadInterruptedException">  if the current thread has
            been interrupted at a point at which interruption
            is detected, in which case the element is guaranteed not
            to be inserted. Otherwise, on normal return, the element is guaranteed
            to have been inserted.
            
            </exception>
        </member>
        <member name="M:Spring.Threading.IPuttable.Offer(System.Object,System.Int64)">
            <summary> Place item in channel only if it can be accepted within
            msecs milliseconds. The time bound is interpreted in
            a coarse-grained, best-effort fashion. 
            </summary>
            <param name="item">the element to be inserted. Should be non-null.
            </param>
            <param name="msecs">the number of milliseconds to wait. If less than
            or equal to zero, the method does not perform any timed waits,
            but might still require
            access to a synchronization lock, which can impose unbounded
            delay if there is a lot of contention for the channel.
            </param>
            <returns> true if accepted, else false
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if the current thread has
            been interrupted at a point at which interruption
            is detected, in which case the element is guaranteed not
            to be inserted (i.e., is equivalent to a false return).
            
            </exception>
        </member>
        <member name="T:Spring.Threading.ITakable">
            <summary> This interface exists to enable stricter type checking
            for channels. A method argument or instance variable
            in a consumer object can be declared as only a Takable
            rather than a Channel, in which case a Java compiler
            will disallow put operations.
            <p>
            Full method descriptions appear in the Channel interface.</p>
            </summary>
            <seealso cref="T:Spring.Threading.IChannel">
            </seealso>
            <seealso cref="T:Spring.Threading.IPuttable">
            
            </seealso>
        </member>
        <member name="M:Spring.Threading.ITakable.Take">
            <summary> Return and remove an item from channel, 
            possibly waiting indefinitely until
            such an item exists.
            </summary>
            <returns>  some item from the channel. Different implementations
            may guarantee various properties (such as FIFO) about that item
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if the current thread has
            been interrupted at a point at which interruption
            is detected, in which case state of the channel is unchanged.
            </exception>
        </member>
        <member name="M:Spring.Threading.ITakable.Poll(System.Int64)">
            <summary> Return and remove an item from channel only if one is available within
            msecs milliseconds. The time bound is interpreted in a coarse
            grained, best-effort fashion.
            </summary>
            <param name="msecs">the number of milliseconds to wait. If less than
            or equal to zero, the operation does not perform any timed waits,
            but might still require
            access to a synchronization lock, which can impose unbounded
            delay if there is a lot of contention for the channel.
            </param>
            <returns> some item, or null if the channel is empty.
            </returns>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if the current thread has
            been interrupted at a point at which interruption
            is detected, in which case state of the channel is unchanged
            (i.e., equivalent to a false return).
            </exception>			
        </member>
        <member name="M:Spring.Threading.IChannel.Peek">
            <summary> Return, but do not remove object at head of Channel,
            or null if it is empty.
            </summary>			
        </member>
        <member name="P:Spring.Threading.IBoundedChannel.Capacity">
            <summary> Return the maximum number of elements that can be held.</summary>
            <returns> the capacity of this channel.
            
            </returns>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.array_">
            <summary>
            the elements
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.takePtr_">
            <summary>
            circular index for take mechanics
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.putPtr_">
            <summary>
            circular index for put mechanics
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.usedSlots_">
            <summary>
            length
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.emptySlots_">
            <summary>
            capacity - length
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedBuffer.putMonitor_">
            <summary> Helper monitor to handle puts. 
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.#ctor(System.Int32)">
            <summary> Create a BoundedBuffer with the given capacity.</summary>
            <exception cref="T:System.ArgumentException"> if capacity less or equal to zero
            </exception>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.#ctor">
            <summary> Create a buffer with the current default capacity
            </summary>		
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.IncEmptySlots">
            <summary>
            safely increment empty slots
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.IncUsedSlots">
            <summary>
            safely increment used slots
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Insert(System.Object)">
            <summary>
            mechanics of put
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Extract">
            <summary>
            mechanics of take
            </summary>
            <returns>the next available item in the buffer</returns>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Peek">
            <summary>
            <see cref="M:Spring.Threading.IChannel.Peek"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Put(System.Object)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Put(System.Object)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Offer(System.Object,System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Offer(System.Object,System.Int64)"/>
            </summary>
            <returns><code>true</code> if the object has been inserted, <code>false</code> otherwise</returns>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Take">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Take"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedBuffer.Poll(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Poll(System.Int64)"/>
            </summary>
        </member>
        <member name="P:Spring.Threading.BoundedBuffer.Size">
            <summary>
            The current buffer size
            </summary>
        </member>
        <member name="P:Spring.Threading.BoundedBuffer.Capacity">
            <summary>
            The capacity of this buffer
            </summary>
        </member>
        <member name="T:Spring.Threading.BoundedLinkedQueue">
            <summary> A bounded variant of 
            LinkedQueue 
            class. 
            <p>This class may be
            preferable to 
            BoundedBuffer 
            because it allows a bit more
            concurency among puts and takes,  because it does not
            pre-allocate fixed storage for elements, and allows 
            capacity to be dynamically reset.
            On the other hand, since it allocates a node object
            on each put, it can be slow on systems with slow
            allocation and GC.</p>
            <p>Also, it may be
            preferable to 
            LinkedQueue 
            when you need to limit
            the capacity to prevent resource exhaustion. This protection
            normally does not hurt much performance-wise: when the
            queue is not empty or full, most puts and
            takes are still usually able to execute concurrently.</p>
            </summary>
            <seealso cref="T:Spring.Threading.LinkedQueue"/>
            <seealso cref="T:Spring.Threading.BoundedBuffer"/>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.head_">
            <summary> Dummy header node of list. The first actual node, if it exists, is always 
            at head_.next. After each take, the old first node becomes the head.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.last_">
            <summary> The last node of list. Put() appends to list, so modifies last_
            
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.putGuard_">
            <summary> Helper monitor. Ensures that only one put at a time executes.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.takeGuard_">
            <summary> Helper monitor. Protects and provides wait queue for takes
            
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.capacity_">
            <summary>Number of elements allowed *</summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.putSidePutPermits_">
            <summary> One side of a split permit count. 
            <p>The counts represent permits to do a put. (The queue is full when zero).
            Invariant: putSidePutPermits_ + takeSidePutPermits_ = capacity_ - length.
            (The length is never separately recorded, so this cannot be
            checked explicitly.)</p>
            <p>To minimize contention between puts and takes, the
            put side uses up all of its permits before transfering them from
            the take side.</p>
            <p>The take side just increments the count upon each take.
            Thus, most puts and take can run independently of each other unless
            the queue is empty or full.</p>
            Initial value is queue capacity.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.BoundedLinkedQueue.takeSidePutPermits_">
            <summary>Number of takes since last reconcile *</summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.#ctor(System.Int32)">
            <summary> Create a queue with the given capacity</summary>
            <exception cref="T:System.ArgumentException"> if capacity less or equal to zero
            
            </exception>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.#ctor">
            <summary> Create a queue with the current default capacity
            
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.ReconcilePutPermits">
            <summary> Move put permits from take side to put side; 
            return the number of put side permits that are available.
            Call only under synch on puGuard_ AND this.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Extract">
            <summary>Main mechanics for take/poll *</summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Peek">
            <summary>
            <see cref="M:Spring.Threading.IChannel.Peek"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Take">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Take"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Poll(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Poll(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.AllowTake">
            <summary>Notify a waiting take if needed *</summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Insert(System.Object)">
            <summary> Create and insert a node.
            Call only under synch on putGuard_
            
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Put(System.Object)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Put(System.Object)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.BoundedLinkedQueue.Offer(System.Object,System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Offer(System.Object,System.Int64)"/>
            </summary>
        </member>
        <member name="P:Spring.Threading.BoundedLinkedQueue.Capacity">
            <summary> Reset the capacity of this queue.
            If the new capacity is less than the old capacity,
            existing elements are NOT removed, but
            incoming puts will not proceed until the number of elements
            is less than the new capacity.
            </summary>
            <exception cref="T:System.ArgumentException"> if capacity less or equal to zero
            
            </exception>
        </member>
        <member name="P:Spring.Threading.BoundedLinkedQueue.IsEmpty">
            <summary>
            Utility method to avoid to call <see cref="M:Spring.Threading.BoundedLinkedQueue.Peek"/>
            </summary>
            <returns><c>true</c> if there are no items in the queue</returns>
        </member>
        <member name="P:Spring.Threading.BoundedLinkedQueue.Size">
            <summary> Return the number of elements in the queue.
            This is only a snapshot value, that may be in the midst 
            of changing. The returned value will be unreliable in the presence of
            active puts and takes, and should only be used as a heuristic
            estimate, for example for resource monitoring purposes.
            
            </summary>
        </member>
        <member name="T:Spring.Threading.DefaultChannelCapacity">
            <summary> A utility class to set the default capacity of
            <see cref="T:Spring.Threading.IBoundedChannel"></see>
            implementations that otherwise require a capacity argument
            </summary>
            <seealso cref="T:Spring.Threading.IBoundedChannel"/>
            <remarks>Not intended to be used outside <c>Spring.NET</c></remarks>
        </member>
        <member name="F:Spring.Threading.DefaultChannelCapacity.InitialDefaultCapacity">
            <summary>The initial value of the default capacity is 1024 *</summary>
        </member>
        <member name="F:Spring.Threading.DefaultChannelCapacity.defaultCapacity_">
            <summary>the current default capacity *</summary>
        </member>
        <member name="P:Spring.Threading.DefaultChannelCapacity.DefaultCapacity">
            <summary> The default capacity used in 
            default (no-argument) constructor for BoundedChannels
            that otherwise require a capacity argument.
            </summary>
            <exception cref="T:System.ArgumentException"> if capacity less or equal to zero
            </exception>
        </member>
        <member name="T:Spring.Threading.DirectExecutor">
            <summary> 
            An implementation of IExecutor that 
            invokes the run method of the supplied command and then returns.
            </summary>
        </member>
        <member name="T:Spring.Threading.IExecutor">
            <author>Doug Lea </author>
            <author>Federico Spinazzi (.NET)</author>
            <summary> Interface for objects that execute Runnables,
            as well as various objects that can be wrapped
            as Runnables.
            The main reason to use Executor throughout a program or
            subsystem is to provide flexibility: You can easily
            change from using thread-per-task to using pools or
            queuing, without needing to change most of your code that
            generates tasks.
            <p>
            The general intent is that execution be asynchronous,
            or at least independent of the caller. 
            This interface allows implementations that instead
            employ queueing or pooling, or perform additional
            bookkeeping.</p>
            </summary>
        </member>
        <member name="M:Spring.Threading.IExecutor.Execute(Spring.Threading.IRunnable)">
            <summary> Execute the given command. This method is guaranteed
            only to arrange for execution, that may actually
            occur sometime later; for example in a new
            thread. However, in fully generic use, callers
            should be prepared for execution to occur in
            any fashion at all, including immediate direct
            execution.
            <p>
            The method is defined not to throw 
            any checked exceptions during execution of the command. Generally,
            any problems encountered will be asynchronous and
            so must be dealt with via callbacks or error handler
            objects. If necessary, any context-dependent 
            catastrophic errors encountered during
            actions that arrange for execution could be accompanied
            by throwing context-dependent unchecked exceptions.
            </p>
            <p>
            However, the method does throw InterruptedException:
            It will fail to arrange for execution
            if the current thread is currently interrupted.
            Further, the general contract of the method is to avoid,
            suppress, or abort execution if interruption is detected
            in any controllable context surrounding execution.
            </p>
            </summary>
        </member>
        <member name="M:Spring.Threading.DirectExecutor.Execute(Spring.Threading.IRunnable)">
            <summary> Execute the given command directly in the current thread.
            
            </summary>
        </member>
        <member name="T:Spring.Threading.IRunnable">
            <summary>
            Interface for executables. It is the same of java Runnable, but 
            in the context of <code>Spring.Threading</code> its use is 
            also task/command oriented
            </summary>
        </member>
        <member name="M:Spring.Threading.IRunnable.Run">
            <summary>
            The entry point
            </summary>
        </member>
        <member name="T:Spring.Threading.ISync">
            <summary>
            <p>Acquire/Release protocol, base of many concurrency utilities.</p>
            
            <p>Stolen from Doug Lea:</p>
            
            <p>Sync objects isolate waiting and notification for particular logical 
            states, resource availability, events, and the like that are shared 
            across multiple threads.</p>
            
            <p>Use of ISyncs sometimes (but by no means always) adds 
            flexibility and efficiency compared to the use of plain 
            .Net monitor methods and locking, and are sometimes (but by no means 
            always) simpler to program with.</p>
            </summary>
            
            <author>Doug Lea</author>
            <author>Federico Spinazzi (.Net)</author>
            <version>$Id: ISync.cs,v 1.2 2005/01/13 21:35:53 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Threading.ISync.Acquire">
            <summary>  Wait (possibly forever) until successful passage.
            Fail only upon interuption. Interruptions always result in
            `clean' failures. On failure,  you can be sure that it has not 
            been acquired, and that no 
            corresponding release should be performed. Conversely,
            a normal return guarantees that the acquire was successful.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.ISync.Release">
            <summary> Potentially enable others to pass.
            <p>
            Because release does not raise exceptions, 
            it can be used in `finally' clauses without requiring extra
            embedded try/catch blocks. But keep in mind that
            as with any java method, implementations may 
            still throw unchecked exceptions such as Error or NullPointerException
            when faced with uncontinuable errors. However, these should normally
            only be caught by higher-level error handlers.
            </p>
            </summary>
        </member>
        <member name="M:Spring.Threading.ISync.Attempt(System.Int64)">
            <summary>
            Wait at most msecs to pass; report whether passed. 
            <p>
            The method has best-effort semantics:
            The msecs bound cannot
            be guaranteed to be a precise upper bound on wait time in Java.
            Implementations generally can only attempt to return as soon as possible
            after the specified bound. Also, timers in Java do not stop during garbage
            collection, so timeouts can occur just because a GC intervened.
            So, msecs arguments should be used in
            a coarse-grained manner. Further,
            implementations cannot always guarantee that this method
            will return at all without blocking indefinitely when used in
            unintended ways. For example, deadlocks may be encountered
            when called in an unintended context.
            </p>
            </summary>
            <param name="msecs">the number of milleseconds to wait
            An argument less than or equal to zero means not to wait at all. 
            However, this may still require
            access to a synchronization lock, which can impose unbounded
            delay if there is a lot of contention among threads.
            </param>
            <returns>true if acquired</returns>
        </member>
        <member name="T:Spring.Threading.IThreadFactory">
            <summary> Interface describing any class that can generate
            new Thread objects. Using ThreadFactories removes
            hardwiring of calls to <code>new Thread</code>, enabling
            applications to use special threads, default
            prioritization settings, etc.
            </summary>
        </member>
        <member name="M:Spring.Threading.IThreadFactory.NewThread(Spring.Threading.IRunnable)">
            <summary> Create a new thread that will run the given command when started
            
            </summary>
        </member>
        <member name="T:Spring.Threading.Latch">
            <summary> A latch is a boolean condition that is set at most once, ever.
            Once a single release is issued, all acquires will pass.
            <p>
            <b>Sample usage.</b> Here are a set of classes that use
            a latch as a start signal for a group of worker threads that
            are created and started beforehand, and then later enabled.
            </p>
            <pre>
            class Worker implements Runnable {
            private final Latch startSignal;
            Worker(Latch l) { startSignal = l; }
            public void run() {
            startSignal.acquire();
            doWork();
            }
            void doWork() { ... }
            }
            
            class Driver { // ...
            void main() {
            Latch go = new Latch();
            for (int i = 0; i &lt; N; ++i) // make threads
            new Thread(new Worker(go)).start();
            doSomethingElse();         // don't let run yet 
            go.release();              // let all threads proceed
            } 
            }
            </pre>
            </summary>
            <author>Doug Lea</author>
            <author>Federico Spinazzi (.Net)</author>
            <version>$Id: Latch.cs,v 1.4 2005/03/30 17:01:16 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Threading.Latch.latched_">
            <summary>
            can acquire ?
            </summary>
        </member>
        <member name="M:Spring.Threading.Latch.Acquire">
            <summary>
            Method mainly used by clients who are trying to get the latch
            </summary>
        </member>
        <member name="M:Spring.Threading.Latch.Attempt(System.Int64)">
            <summary>Wait at most msecs millisconds for a permit</summary>
        </member>
        <member name="M:Spring.Threading.Latch.Release">
            <summary>
            Enable all current and future acquires to pass 
            </summary>
        </member>
        <member name="T:Spring.Threading.LinkedNode">
            <summary>A standard linked list node used in various queue classes *</summary>
        </member>
        <member name="F:Spring.Threading.LinkedNode.Value">
            <summary>
            The object paired to this node
            </summary>
        </member>
        <member name="F:Spring.Threading.LinkedNode.Next">
            <summary>
            The next linked node
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedNode.#ctor">
            <summary>
            Creates a node, with no <see cref="F:Spring.Threading.LinkedNode.Value"/> and no <see cref="F:Spring.Threading.LinkedNode.Next"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedNode.#ctor(System.Object)">
            <summary>
            Creates a node
            </summary>
            <param name="x">the object paired to this node</param>
        </member>
        <member name="M:Spring.Threading.LinkedNode.#ctor(System.Object,Spring.Threading.LinkedNode)">
            <summary>
            Creates a node
            </summary>
            <param name="x">the object paired to this node</param>
            <param name="n">a node to link to</param>
        </member>
        <member name="T:Spring.Threading.LinkedQueue">
            <summary> A linked list based channel implementation.
            The algorithm avoids contention between puts
            and takes when the queue is not empty. 
            Normally a put and a take can proceed simultaneously. 
            (Although it does not allow multiple concurrent puts or takes.)
            This class tends to perform more efficently than
            other Channel implementations in producer/consumer
            applications.
            </summary>
        </member>
        <member name="F:Spring.Threading.LinkedQueue.head_">
            <summary> Dummy header node of list. The first actual node, if it exists, is always 
            at head_.next. After each take, the old first node becomes the head.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.LinkedQueue.putLock_">
            <summary> Helper monitor for managing access to last node.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.LinkedQueue.last_">
            <summary> The last node of list. Put() appends to list, so modifies last_
            
            </summary>
        </member>
        <member name="F:Spring.Threading.LinkedQueue.waitingForTake_">
            <summary> The number of threads waiting for a take.
            Notifications are provided in put only if greater than zero.
            The bookkeeping is worth it here since in reasonably balanced
            usages, the notifications will hardly ever be necessary, so
            the call overhead to notify can be eliminated.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.#ctor">
            <summary>
            creates a new queue with a node not paired to any object
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.insert(System.Object)">
            <summary>Main mechanics for put/offer *</summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Extract">
            <summary>Main mechanics for take/poll *</summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Put(System.Object)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Put(System.Object)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Offer(System.Object,System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Offer(System.Object,System.Int64)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Take">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Take"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Peek">
            <summary>
            <see cref="M:Spring.Threading.IChannel.Peek"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.LinkedQueue.Poll(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Poll(System.Int64)"/>
            </summary>
        </member>
        <member name="P:Spring.Threading.LinkedQueue.IsEmpty">
            <summary>
            Utility method to avoid to call <see cref="M:Spring.Threading.LinkedQueue.Peek"/>
            </summary>
            <returns><code>true</code> if there are no items in the queue</returns>
        </member>
        <member name="T:Spring.Threading.NullRunnable">
            <summary>
            A do-nothing runnable used to signal shutdown
            </summary>
        </member>
        <member name="M:Spring.Threading.NullRunnable.Run">
            <summary>
            <see cref="M:Spring.Threading.IRunnable.Run"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor">
            <summary> A tunable, extensible thread pool class. The main supported public
            method is <see cref="M:Spring.Threading.PooledExecutor.Execute(Spring.Threading.IRunnable)"/>, which can be
            called instead of directly creating threads to execute commands.
            
            <p>
            Thread pools can be useful for several, usually intertwined
            reasons:</p>
            
            <list type="bullet">
            <item>
             To bound resource use. A limit can be placed on the maximum
            number of simultaneously executing threads.
            </item>
            <item>
            To manage concurrency levels. A targeted number of threads
            can be allowed to execute simultaneously.
            </item>
            <item>
            To manage a set of threads performing related tasks.
            </item>
            <item>
            To minimize overhead, by reusing previously constructed
            Thread objects rather than creating new ones.  (Note however
            that pools are hardly ever cure-alls for performance problems
            associated with thread construction, especially on JVMs that
            themselves internally pool or recycle threads.)  
            </item>
            </list>
            <p>
            These goals introduce a number of policy parameters that are
            encapsulated in this class. All of these parameters have defaults
            and are tunable, either via get/set methods, or, in cases where
            decisions should hold across lifetimes, via methods that can be
            easily overridden in subclasses.  The main, most commonly set
            parameters can be established in constructors.  Policy choices
            across these dimensions can and do interact.  Be careful, and
            please read this documentation completely before using!  See also
            the usage examples below.
            </p>
            
            <p>Queueing</p>
            
            <p>By default, this pool uses queueless synchronous channels to
            to hand off work to threads. This is a safe, conservative policy
            that avoids lockups when handling sets of requests that might
            have internal dependencies. (In these cases, queuing one task
            could lock up another that would be able to continue if the
            queued task were to run.)  If you are sure that this cannot
            happen, then you can instead supply a queue of some sort (for
            example, a BoundedBuffer or LinkedQueue) in the constructor.
            This will cause new commands to be queued in cases where all
            MaximumPoolSize threads are busy. Queues are sometimes
            appropriate when each task is completely independent of others,
            so tasks cannot affect each others execution.  For example, in an
            http server.</p> 
            <p>
            When given a choice, this pool always prefers adding a new thread
            rather than queueing if there are currently fewer than the
            current getMinimumPoolSize threads running, but otherwise always
            prefers queuing a request rather than adding a new thread. Thus,
            if you use an unbounded buffer, you will never have more than
            getMinimumPoolSize threads running. (Since the default
            minimumPoolSize is one, you will probably want to explicitly
            setMinimumPoolSize.)</p>   
            <p>
            While queuing can be useful in smoothing out transient bursts of
            requests, especially in socket-based services, it is not very
            well behaved when commands continue to arrive on average faster
            than they can be processed.  Using bounds for both the queue and
            the pool size, along with run-when-blocked policy is often a
            reasonable response to such possibilities.  
            </p>
            
            <p>
            Queue sizes and maximum pool sizes can often be traded off for
            each other. Using large queues and small pools minimizes CPU
            usage, OS resources, and context-switching overhead, but can lead
            to artifically low throughput. Especially if tasks frequently
            block (for example if they are I/O bound), a JVM and underlying
            OS may be able to schedule time for more threads than you
            otherwise allow. Use of small queues or queueless handoffs
            generally requires larger pool sizes, which keeps CPUs busier but
            may encounter unacceptable scheduling overhead, which also
            decreases throughput.  
            </p>
            
            <p>Maximum Pool size</p>
            
            <p> The maximum number of threads to use, when needed.  The pool
            does not by default preallocate threads.  Instead, a thread is
            created, if necessary and if there are fewer than the maximum,
            only when an <see cref="M:Spring.Threading.IExecutor.Execute(Spring.Threading.IRunnable)"/> request arrives.  The default
            value is (for all practical purposes) infinite --
            <see cref="F:System.Int32.MaxValue"/>, so should be set in the
            constructor or the set method unless you are just using the pool
            to minimize construction overhead.  Because task handoffs to idle
            worker threads require synchronization that in turn relies on 
            scheduling policies to ensure progress, it is possible that a new
            thread will be created even though an existing worker thread has
            just become idle but has not progressed to the point at which it
            can accept a new task. 
            </p>
            
            <p>Minimum Pool size</p>
            
            <p>The minimum number of threads to use, when needed (default
            1).  When a new request is received, and fewer than the minimum
            number of threads are running, a new thread is always created to
            handle the request even if other worker threads are idly waiting
            for work. Otherwise, a new thread is created only if there are
            fewer than the maximum and the request cannot immediately be
            queued.</p>
            
            <p>Preallocation</p>
            
            <p> You can override lazy thread construction policies via
            method <see cref="M:Spring.Threading.PooledExecutor.CreateThreads(System.Int32)"/>, 
            which establishes a given number of warm
            threads. Be aware that these preallocated threads will time out
            and die (and later be replaced with others if needed) if not used
            within the keep-alive time window. If you use preallocation, you
            probably want to increase the keepalive time.  The difference
            between <see cref="P:Spring.Threading.PooledExecutor.MinimumPoolSize"/> and 
            <see cref="M:Spring.Threading.PooledExecutor.CreateThreads(System.Int32)"/> is that
            <see cref="M:Spring.Threading.PooledExecutor.CreateThreads(System.Int32)"/> immediately establishes threads, 
            while setting the
            minimum pool size waits until requests arrive.  
            </p>
            
            <p>Keep-alive time</p>
            
            <p>If the pool maintained references to a fixed set of threads
            in the pool, then it would impede garbage collection of otherwise
            idle threads. This would defeat the resource-management aspects
            of pools. One solution would be to use weak references.  However,
            this would impose costly and difficult synchronization issues.
            Instead, threads are simply allowed to terminate and thus be
            GCable if they have been idle for the given keep-alive time.  The
            value of this parameter represents a trade-off between GCability
            and construction time. The default keep-alive value is one minute, which
            means that the time needed to construct and then GC a thread is
            expended at most once per minute.  
            </p>
            <p> 
            To establish worker threads permanently, use a <em>negative</em>
            argument to <see cref="P:Spring.Threading.PooledExecutor.KeepAliveTime"/>.  </p>
            
            <p>Blocked execution policy</p>
            
            <p> If the maximum pool size or queue size is bounded, then it
            is possible for incoming <c>execute</c> requests to
            block. There are four supported policies for handling this
            problem, and mechanics (based on the Strategy Object pattern) to
            allow others in subclasses: </p>
            
            <list type="bullet">
            <item>
            <term> 
            Run (the default)
            </term>
            <description>
            The thread making the <c>execute</c> request
            runs the task itself. This policy helps guard against lockup. 
            </description> 
            </item>
            <item>
            <term> 
            Wait
            </term>
            <description>
            Wait until a thread becomes available.  This
            policy should, in general, not be used if the minimum number of
            of threads is zero, in which case a thread may never become
            available.
            </description> 
            </item>
            <item>
            <term> 
            Abort
            </term>
            <description>
            Throw a RuntimeException
            </description> 
            </item>
            <item>
            <term> 
            Discard 
            </term>
            <description>
            Throw away the current request and return.
            </description> 
            </item>
            <item>
            <term> 
            DiscardOldest
            </term>
            <description>
            Throw away the oldest request and return.
            </description> 
            </item>
            </list>
            
            <p>
            Other plausible policies include raising the maximum pool size
            after checking with some other objects that this is OK.</p>
            
            <p>
            These cases can never occur if the maximum pool size is unbounded
            or the queue is unbounded.  In these cases you instead face
            potential resource exhaustion.)  The execute method does not
            throw any checked exceptions in any of these cases since any
            errors associated with them must normally be dealt with via
            handlers or callbacks. (Although in some cases, these might be
            associated with throwing unchecked exceptions.)  You may wish to
            add special implementations even if you choose one of the listed
            policies. For example, the supplied Discard policy does not
            inform the caller of the drop. You could add your own version
            that does so.  Since choice of policies is normally a system-wide
            decision, selecting a policy affects all calls to
            <c>execute</c>.  If for some reason you would instead like
            to make per-call decisions, you could add variant versions of the
            <c>execute</c> method (for example,
            <c>executeIfWouldNotBlock</c>) in subclasses.
            </p>
            
            <p>Thread construction parameters</p>
            
            <p> A settable ThreadFactory establishes each new thread.  By
            default, it merely generates a new instance of class Thread, but
            can be changed to use a Thread subclass, to set priorities,
            ThreadLocals, etc.</p>
            
            <p>Interruption policy</p>
            
            <p> Worker threads check for interruption after processing each
            command, and terminate upon interruption.  Fresh threads will
            replace them if needed. Thus, new tasks will not start out in an
            interrupted state due to an uncleared interruption in a previous
            task. Also, unprocessed commands are never dropped upon
            interruption. It would conceptually suffice simply to clear
            interruption between tasks, but implementation characteristics of
            interruption-based methods are uncertain enough to warrant this
            conservative strategy. It is a good idea to be equally
            conservative in your code for the tasks running within pools.
            </p>
            
            <p> Shutdown policy</p>
            
            <p> The interruptAll method interrupts, but does not disable the
            pool. Two different shutdown methods are supported for use when
            you do want to (permanently) stop processing tasks. Method
            shutdownAfterProcessingCurrentlyQueuedTasks waits until all
            current tasks are finished. The shutDownNow method interrupts
            current threads and leaves other queued requests unprocessed.
            </p>
            
            <p>Handling requests after shutdown</p>
            
            <p> When the pool is shutdown, new incoming requests are handled
            by the blockedExecutionHandler. By default, the handler is set to
            discard new requests, but this can be set with an optional
            argument to method
            shutdownAfterProcessingCurrentlyQueuedTasks.
            </p>
             <p> Also, if you are
            using some form of queuing, you may wish to call method drain()
            to remove (and return) unprocessed commands from the queue after
            shutting down the pool and its clients. If you need to be sure
            these commands are processed, you can then run() each of the
            commands in the list returned by drain().
            </p>
            
            <p>Usage examples.</p>
            
            Probably the most common use of pools is in statics or singletons
            accessible from a number of classes in a package; for example:
            
            <code>
            class MyPool {
            // initialize to use a maximum of 8 threads.
            static PooledExecutor pool = new PooledExecutor(8);
            }
            </code>
            Here are some sample variants in initialization:
            <list type="number">
            <item> Using a bounded buffer of 10 tasks, at least 4 threads (started only
            when needed due to incoming requests), but allowing
            up to 100 threads if the buffer gets full.
            <code>
            pool = new PooledExecutor(new BoundedBuffer(10), 100);
            pool.MinimumPoolSize = 4;
            </code>
            </item>
            <item> Same as (1), except pre-start 9 threads, allowing them to
            die if they are not used for five minutes.
            <code>
            pool = new PooledExecutor(new BoundedBuffer(10), 100);
            pool.MinimumPoolSize = 4;
            pool.KeepAliveTime = 1000 * 60 * 5;
            pool.CreateThreads(9);
            </code>
            </item>
            <item> Same as (2) except clients abort if both the buffer is full and
            all 100 threads are busy:
            <code>
            pool = new PooledExecutor(new BoundedBuffer(10), 100);
            pool.MinimumPoolSize = 4;
            pool.KeepAliveTime = 1000 * 60 * 5;
            pool.AbortWhenBlocked();
            pool.CreateThreads(9);
            </code>
            </item>
            <item> An unbounded queue serviced by exactly 5 threads:
            <code>
            pool = new PooledExecutor(new LinkedQueue());
            pool.KeepAliveTime = -1; // live forever
            pool.CreateThreads(5);
            </code>
            </item>
            </list>
            
            <p>Usage notes.</p>
            
            <p>
            Pools do not mesh well with using thread-specific storage
            via <see cref="T:System.LocalDataStoreSlot"/>.
            <see cref="T:System.LocalDataStoreSlot"/> relies on the identity of a
            thread executing a particular task. Pools use the same thread to
            perform different tasks.  </p>
            <p>
            If you need a policy not handled by the parameters in this class
            consider writing a subclass.  </p>
            </summary>
        </member>
        <member name="T:Spring.Threading.ThreadFactoryUser">
            <summary> 
            Base class for Executors and related classes that rely on thread factories.
            Generally intended to be used as a mixin-style abstract class, but
            can also be used stand-alone.
            </summary>
        </member>
        <member name="F:Spring.Threading.ThreadFactoryUser.threadFactory_">
            <summary>
            the <see cref="T:Spring.Threading.IThreadFactory"/> used by this instance
            </summary>
        </member>
        <member name="P:Spring.Threading.ThreadFactoryUser.ThreadFactory">
            <summary> The factory for creating new threads.
            By default, new threads are created without any special priority,
            threadgroup, or status parameters.
            You can use a different factory
            to change the kind of Thread class used or its construction
            parameters.
            </summary>		
        </member>
        <member name="T:Spring.Threading.ThreadFactoryUser.DefaultThreadFactory">
            <summary>
            The thread factory that intantiates standard <see cref="T:System.Threading.Thread"/>
            objects
            </summary>
        </member>
        <member name="M:Spring.Threading.ThreadFactoryUser.DefaultThreadFactory.NewThread(Spring.Threading.IRunnable)">
            <summary>
            A sort of factory method that creates intances of 
            <see cref="T:System.Threading.Thread"/> that will run the given runnable object
            </summary>
            <param name="runnable">the runnable object to start</param>
            <returns>new Thread(new ThreadStart(runnable.Run))</returns>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.DEFAULT_MINIMUMPOOLSIZE">
            <summary> The minimum pool size; used if not otherwise specified.  Default
            value is 1.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.DEFAULT_KEEPALIVETIME">
            <summary> The maximum time to keep worker threads alive waiting for new
            tasks; used if not otherwise specified. Default value is one
            minute (60000 milliseconds).
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.DefaultMaximumPoolSize">
            <summary> The maximum pool size; used if not otherwise specified.  Default
            value is essentially infinite (<see cref="F:System.Int32.MaxValue"/>)
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.maximumPoolSize_">
            <summary>The maximum number of threads allowed in pool. *</summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.minimumPoolSize_">
            <summary>The minumum number of threads to maintain in pool. *</summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.poolSize_">
            <summary>Current pool size.  *</summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.keepAliveTime_">
            <summary>The maximum time for an idle thread to wait for new task. *</summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.shutdown_">
            <summary> Shutdown flag - latches true when a shutdown method is called 
            in order to disable queuing/handoffs of new tasks.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.handOff_">
            <summary> The channel used to hand off the command to a thread in the pool.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.threads_">
            <summary> The set of active threads, declared as a map from workers to
            their threads.  This is needed by the interruptAll method.  It
            may also be useful in subclasses that need to perform other
            thread management chores.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.blockedExecutionHandler_">
            <summary>The current handler for unserviceable requests. *</summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.#ctor">
            <summary> Create a new pool with all default settings
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.#ctor(System.Int32)">
            <summary> Create a new pool with all default settings except
            for maximum pool size.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.#ctor(Spring.Threading.IChannel)">
            <summary> Create a new pool that uses the supplied Channel for queuing, and
            with all default parameter settings.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.#ctor(Spring.Threading.IChannel,System.Int32)">
            <summary> Create a new pool that uses the supplied Channel for queuing, and
            with all default parameter settings except for maximum pool size.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.AddThread(Spring.Threading.IRunnable)">
            <summary> Create and start a thread to handle a new command.  Call only
            when holding lock.
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.CreateThreads(System.Int32)">
            <summary> Create and start up to numberOfThreads threads in the pool.
            Return the number created. This may be less than the number
            requested if creating more would exceed maximum pool size bound.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.InterruptAll">
            <summary> Interrupt all threads in the pool, causing them all to
            terminate. Assuming that executed tasks do not disable (clear)
            interruptions, each thread will terminate after processing its
            current task. Threads will terminate sooner if the executed tasks
            themselves respond to interrupts.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.ShutdownNow">
            <summary> Interrupt all threads and disable construction of new
            threads. Any tasks entered after this point will be discarded. A
            shut down pool cannot be restarted.
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.ShutdownNow(Spring.Threading.PooledExecutor.IBlockedExecutionHandler)">
            <summary> Interrupt all threads and disable construction of new
            threads. Any tasks entered after this point will be handled by
            the given BlockedExecutionHandler.  A shut down pool cannot be
            restarted.
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.ShutdownAfterProcessingCurrentlyQueuedTasks">
            <summary> Terminate threads after processing all elements currently in
            queue. Any tasks entered after this point will be discarded. A
            shut down pool cannot be restarted.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.ShutdownAfterProcessingCurrentlyQueuedTasks(Spring.Threading.PooledExecutor.IBlockedExecutionHandler)">
            <summary> Terminate threads after processing all elements currently in
            queue. Any tasks entered after this point will be handled by the
            given BlockedExecutionHandler.  A shut down pool cannot be
            restarted.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.AwaitTerminationAfterShutdown(System.Int64)">
            <summary> Wait for a shutdown pool to fully terminate, or until the timeout
            has expired. This method may only be called <em>after</em>
            invoking shutdownNow or
            shutdownAfterProcessingCurrentlyQueuedTasks.
            
            </summary>
            <param name="maxWaitTime"> the maximum time in milliseconds to wait
            </param>
            <returns> <c>true</c> if the pool has terminated within the max wait period
            </returns>
            <exception cref="T:System.InvalidOperationException"> if shutdown has not been requested
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if the current thread has been interrupted in the course of waiting
            </exception>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.AwaitTerminationAfterShutdown">
            <summary> Wait for a shutdown pool to fully terminate.  This method may
            only be called <em>after</em> invoking shutdownNow or
            shutdownAfterProcessingCurrentlyQueuedTasks.
            
            </summary>
            <exception cref="T:System.InvalidOperationException"> if shutdown has not been requested
            </exception>
            <exception cref="T:System.Threading.ThreadInterruptedException"> if the current thread has been interrupted in the course of waiting
            </exception>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.Drain">
            <summary> Remove all unprocessed tasks from pool queue, and return them in
            a <see cref="T:System.Collections.IList"/>. This method should be used only when there are
            not any active clients of the pool. Otherwise you face the
            possibility that the method will loop pulling out tasks as
            clients are putting them in.  This method can be useful after
            shutting down a pool (via shutdownNow) to determine whether there
            are any pending tasks that were not processed.  You can then, for
            example execute all unprocessed commands via code along the lines
            of:
            <code>
            List tasks = pool.Drain();
            foreach (IRunnable r in tasks) 
                r.Run();
            </code>
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.WorkerDone(Spring.Threading.PooledExecutor.Worker)">
            <summary> Cleanup method called upon termination of worker thread.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.RunWhenBlocked">
            <summary> Set the policy for blocked execution to be that the current
            thread executes the command if there are no available threads in
            the pool.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.WaitWhenBlocked">
            <summary> Set the policy for blocked execution to be to wait until a thread
            is available, unless the pool has been shut down, in which case
            the action is discarded.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.DiscardWhenBlocked">
            <summary> Set the policy for blocked execution to be to return without
            executing the request.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.AbortWhenBlocked">
            <summary> Set the policy for blocked execution to be to
            throw a RuntimeException.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.DiscardOldestWhenBlocked">
            <summary> Set the policy for blocked execution to be to discard the oldest
            unhandled request
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.Execute(Spring.Threading.IRunnable)">
            <summary> Arrange for the given command to be executed by a thread in this
            pool.  The method normally returns when the command has been
            handed off for (possibly later) execution.
            
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.MaximumPoolSize">
            <summary> Return the maximum number of threads to simultaneously execute
            New unqueued requests will be handled according to the current
            blocking policy once this limit is exceeded.
            
            </summary>
            <summary> Set the maximum number of threads to use. Decreasing the pool
            size will not immediately kill existing threads, but they may
            later die when idle.
            </summary>
            <exception cref="T:System.ArgumentException">  if less or equal to zero.
            (It is
            not considered an error to set the maximum to be less than than
            the minimum. However, in this case there are no guarantees
            about behavior.)
            
            </exception>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.MinimumPoolSize">
            <summary>The minimum number of threads to simultaneously execute.
            (Default value is <see cref="F:Spring.Threading.PooledExecutor.DEFAULT_MINIMUMPOOLSIZE"/>).  
            If fewer than the mininum number are
            running upon reception of a new request, a new thread is started
            to handle this request.
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.PoolSize">
            <summary> Return the current number of active threads in the pool.  This
            number is just a snaphot, and may change immediately upon
            returning
            
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.KeepAliveTime">
            <summary> The number of milliseconds to keep threads alive waiting
            for new commands. A negative value means to wait forever. A zero
            value means not to wait at all.
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.TerminatedAfterShutdown">
            <summary> Return true if a shutDown method has succeeded in terminating all
            threads.
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.Task">
            <summary> Get a task from the handoff queue, or null if shutting down.
            
            </summary>
        </member>
        <member name="P:Spring.Threading.PooledExecutor.BlockedExecutionHandler">
            <summary>The handler for blocked execution *</summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.Worker">
            <summary> Class defining the basic run loop for pooled threads.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.PooledExecutor.Worker.firstTask_">
            <summary>
            The first task to execute
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.Worker.#ctor(Spring.Threading.PooledExecutor,Spring.Threading.IRunnable)">
            <summary>
            <see cref="T:Spring.Threading.PooledExecutor"/> helper class
            </summary>
            <param name="executor">pooled executor</param>
            <param name="firstTask">the first task to execute</param>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.Worker.Run">
            <summary>
            <see cref="M:Spring.Threading.IRunnable.Run"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.IBlockedExecutionHandler">
            <summary> Class for actions to take when execute() blocks. Uses Strategy
            pattern to represent different actions. You can add more in
            subclasses, and/or create subclasses of these. If so, you will
            also want to add or modify the corresponding methods that set the
            current blockedExectionHandler_.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)">
            <summary> Return true if successfully handled so, execute should
            terminate; else return false if execute loop should be retried.
            
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.RunWhenBlocked_">
            <summary>Class defining Run action. *</summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.RunWhenBlocked_.BlockedAction(Spring.Threading.IRunnable)">
            <summary>
            <see cref="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)"/>
            </summary>
            <returns><c>true</c></returns>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.WaitWhenBlocked_">
            <summary>Class defining Wait action. *</summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.WaitWhenBlocked_.#ctor(Spring.Threading.PooledExecutor)">
            <summary>
            Creates new instance tied to the given <see cref="T:Spring.Threading.PooledExecutor"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.WaitWhenBlocked_.BlockedAction(Spring.Threading.IRunnable)">
            <summary>
            <see cref="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.DiscardWhenBlocked_">
            <summary>Class defining Discard action. *</summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.DiscardWhenBlocked_.BlockedAction(Spring.Threading.IRunnable)">
            <summary>
            <see cref="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.AbortWhenBlocked_">
            <summary>Class defining Abort action. *</summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.AbortWhenBlocked_.BlockedAction(Spring.Threading.IRunnable)">
            <summary>
            <see cref="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.PooledExecutor.DiscardOldestWhenBlocked_">
            <summary> Class defining DiscardOldest action.  Under this policy, at most
            one old unhandled task is discarded.  If the new task can then be
            handed off, it is.  Otherwise, the new task is run in the current
            thread (i.e., RunWhenBlocked is used as a backup policy.)
            
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.DiscardOldestWhenBlocked_.#ctor(Spring.Threading.PooledExecutor)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Spring.Threading.PooledExecutor.DiscardOldestWhenBlocked_.BlockedAction(Spring.Threading.IRunnable)">
            <summary>
            <see cref="M:Spring.Threading.PooledExecutor.IBlockedExecutionHandler.BlockedAction(Spring.Threading.IRunnable)"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.QueuedExecutor">
            <summary> 
            An implementation of Executor that queues incoming
            requests until they can be processed by a single background
            thread.
            <p>
            The thread is not actually started until the first 
            <code>execute</code> request is encountered. Also, if the
            thread is stopped for any reason (for example, after hitting
            an unrecoverable exception in an executing task), one is started 
            upon encountering a new request, or if <code>restart()</code> is
            invoked.</p>
            <p>
            Beware that, especially in situations
            where command objects themselves invoke execute, queuing can
            sometimes lead to lockups, since commands that might allow
            other threads to terminate do not run at all when they are in the queue.
            </p>
            </summary>
        </member>
        <member name="F:Spring.Threading.QueuedExecutor.thread_">
            <summary>The thread used to process commands *</summary>
        </member>
        <member name="F:Spring.Threading.QueuedExecutor.endTask_">
            <summary>Special queue element to signal termination *</summary>
        </member>
        <member name="F:Spring.Threading.QueuedExecutor.shutdown_">
            <summary>true if thread should shut down after processing current task *</summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.ClearThread">
            <summary>set thread_ to null to indicate termination *</summary>
        </member>
        <member name="F:Spring.Threading.QueuedExecutor.queue_">
            <summary>The queue *</summary>
        </member>
        <member name="F:Spring.Threading.QueuedExecutor.runLoop_">
            <summary>
            support for running <see cref="T:Spring.Threading.IRunnable">s</see> in background 
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.#ctor(Spring.Threading.IChannel)">
            <summary> Construct a new QueuedExecutor that uses
            the supplied Channel as its queue. 
            <p>
            This class does not support any methods that 
            reveal this queue. If you need to access it
            independently (for example to invoke any
            special status monitoring operations), you
            should record a reference to it separately.
            </p>
            </summary>		
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.#ctor">
            <summary> Construct a new QueuedExecutor that uses
            a <see cref="T:Spring.Threading.BoundedLinkedQueue"/> with the current
            <see cref="T:Spring.Threading.DefaultChannelCapacity"/> as its queue.
            
            </summary>		
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.#ctor(Spring.Threading.IRunnable)">
            <summary> Construct a new QueuedExecutor that uses
            the given <see cref="T:Spring.Threading.IRunnable"/> to be used to shut down 
            the executor thread. 
            </summary>
            <param name="endTask"></param>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.Restart">
            <summary> Start (or restart) the background thread to process commands. It has
            no effect if a thread is already running. This
            method can be invoked if the background thread crashed
            due to an unrecoverable exception.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.Execute(Spring.Threading.IRunnable)">
            <summary> Arrange for execution of the command in the
            background thread by adding it to the queue. 
            The method may block if the channel's put
            operation blocks.
            <p>
            If the background thread
            does not exist, it is created and started.
            </p>
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.ShutdownAfterProcessingCurrentlyQueuedTasks">
            <summary> Terminate background thread after it processes all
            elements currently in queue. Any tasks entered after this point will
            not be processed. A shut down thread cannot be restarted.
            This method may block if the task queue is finite and full.
            Also, this method 
            does not in general apply (and may lead to comparator-based
            exceptions) if the task queue is a priority queue.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.ShutdownAfterProcessingCurrentTask">
            <summary> Terminate background thread after it processes the 
            current task, removing other queued tasks and leaving them unprocessed.
            A shut down thread cannot be restarted.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.ShutdownNow">
            <summary> Terminate background thread even if it is currently processing
            a task. <p>This method uses Thread.Interrupt, so relies on tasks
            themselves responding appropriately to interruption.</p>
            <p>If the current tasks does not terminate on interruption, then the 
            thread will not terminate until processing current task.</p>
            A shut down thread cannot be restarted.
            
            </summary>
        </member>
        <member name="P:Spring.Threading.QueuedExecutor.Thread">
            <summary> Return the thread being used to process commands, or
            null if there is no such thread. You can use this
            to invoke any special methods on the thread, for
            example, to interrupt it.
            
            </summary>
        </member>
        <member name="T:Spring.Threading.QueuedExecutor.RunLoop">
            <summary> The runloop is isolated in its own Runnable class
            just so that the main
            class need not implement Runnable,  which would
            allow others to directly invoke run, which would
            never make sense here.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.RunLoop.#ctor(Spring.Threading.QueuedExecutor)">
            <summary>
            Initializes a new instance of RunLoop connected to the given executor
            </summary>
            <param name="executor">the executor from which to dequeue the <see cref="T:Spring.Threading.IRunnable">s</see></param>
        </member>
        <member name="M:Spring.Threading.QueuedExecutor.RunLoop.Run">
            <summary>
            <see cref="M:Spring.Threading.IRunnable.Run"/>
            </summary>
        </member>
        <member name="P:Spring.Threading.QueuedExecutor.RunLoop.Executor">
            <summary>
            The enclosing Executor
            </summary>
        </member>
        <member name="T:Spring.Threading.Semaphore">
             <summary>
             <p>Stolen from Doug Lea:</p>
             <p>Base class for counting semaphores</p>
             
             <p>Conceptually, a semaphore 
             maintains a set of permits. Each acquire() blocks if 
             necessary until a permit is available, and then takes it.</p>
             
             <p>Each release adds a permit. However, no actual permit objects are used; 
             the Semaphore just keeps a count of the number available 
             and acts accordingly.</p>
             
            <p>A semaphore initialized to 1 can serve as a mutual exclusion lock. </p>
            
             </summary>
             <author>Doug Lea</author>
             <author>Federico Spinazzi (.Net)</author>
             <version>$Id: Semaphore.cs,v 1.3 2005/03/30 17:01:17 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Threading.Semaphore.permits">
            <summary>
            current number of available permits
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.#ctor(System.Int64)">
            <summary>
            <p>Create a Semaphore with the given initial number of permits.</p>
            <p>Using a seed of 1 makes the semaphore act as a mutual 
            exclusion lock.</p>
            
            <p>Negative seeds are also allowed, 
            in which case no acquires will proceed until the number of 
            releases has pushed the number of permits past 0.</p>
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Release">
            <summary>
            Release a permit
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Acquire">
            <summary>
            Acquire a permit
            </summary>
        </member>
        <member name="M:Spring.Threading.Semaphore.Attempt(System.Int64)">
            <summary>
            Wait at most msecs millisconds for a permit
            </summary>
            <param name="msecs">number of ms to wait</param>
            <returns>true if aquired</returns>
        </member>
        <member name="T:Spring.Threading.SyncHolder">
            <summary>
            Utility class to use an <see cref="T:Spring.Threading.ISync"/> with the 
            C# <c>using () {}</c> idiom
            </summary>
        </member>
        <member name="M:Spring.Threading.SyncHolder.#ctor(Spring.Threading.ISync)">
            <summary>
            Creates a new <see cref="T:Spring.Threading.SyncHolder"/> instance.
            </summary>
            <param name="sync">the <see cref="T:Spring.Threading.ISync"/> to be held</param>
        </member>
        <member name="M:Spring.Threading.SyncHolder.Dispose">
            <summary>
            Releases the held <see cref="T:Spring.Threading.ISync"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.SynchronousChannel">
            <summary> A rendezvous channel, similar to those used in CSP and Ada.
            
            <p>Each put must wait for a take, and vice versa.</p>
            
            <p>Synchronous channels
            are well suited for handoff designs, in which an object running in
            one thread must synch up with an object running in another thread
            in order to hand it some information, event, or task. 
            </p>  
            </summary>  	
        </member>
        <member name="F:Spring.Threading.SynchronousChannel.Cancelled">
            <summary> Special marker used in queue nodes to indicate that
            the thread waiting for a change in the node has timed out
            or been interrupted.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.SynchronousChannel.waitingPuts">
            <summary>
            put queue
            </summary>
        </member>
        <member name="F:Spring.Threading.SynchronousChannel.waitingTakes">
            <summary>
            take queue
            </summary>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Peek">
            <returns><c>null</c>: synchronous channels do 
            not hold contents unless actively taken
            </returns>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Put(System.Object)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Put(System.Object)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Take">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Take"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Offer(System.Object,System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.IPuttable.Offer(System.Object,System.Int64)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Poll(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ITakable.Poll(System.Int64)"/>
            </summary>
        </member>
        <member name="P:Spring.Threading.SynchronousChannel.Capacity">
            <summary>
            <see cref="P:Spring.Threading.IBoundedChannel.Capacity"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.SynchronousChannel.Queue">
            <summary> Simple FIFO queue class to hold waiting puts/takes.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.SynchronousChannel.Queue.head">
            <summary>
            Queue's head
            </summary>
        </member>
        <member name="F:Spring.Threading.SynchronousChannel.Queue.last">
            <summary>
            Queue's end
            </summary>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Queue.Enq(Spring.Threading.LinkedNode)">
            <summary>
            Enqueue
            </summary>
            <param name="p">node to enqueue</param>
        </member>
        <member name="M:Spring.Threading.SynchronousChannel.Queue.Deq">
            <summary>
            Dequeue
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spring.Threading.ThreadedExecutor">
            <summary> 
            An implementation of Executor that creates a new
            Thread that invokes the run method of the supplied command.
            </summary>
        </member>
        <member name="M:Spring.Threading.ThreadedExecutor.Execute(Spring.Threading.IRunnable)">
            <summary> 
            Execute the given command in a new thread.
            </summary>
        </member>
        <member name="T:Spring.Threading.TimeoutException">
            <summary> Thrown by synchronization classes that report
            timeouts via exceptions. The exception is treated
            as a form (subclass) of InterruptedException. This both
            simplifies handling, and conceptually reflects the fact that
            timed-out operations are artificially interrupted by timers.
            
            </summary>
        </member>
        <member name="F:Spring.Threading.TimeoutException._duration">
            <summary> The approximate time that the operation lasted before 
            this timeout exception was thrown.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.String)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class with the
            specified message.
            </summary>
            <param name="message">
            A message about the exception.
            </param>
            <param name="innerException">
            The root exception that is being wrapped.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Threading.TimeoutException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override of GetObjectData to allow for private serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Int64)">
            <summary> Constructs a TimeoutException with given duration value.
            
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutException.#ctor(System.Int64,System.String)">
            <summary> Constructs a TimeoutException with the
            specified duration value and detail message.
            </summary>
        </member>
        <member name="P:Spring.Threading.TimeoutException.Duration">
            <summary> 
            Gets the approximate time that the operation lasted before 
            this timeout exception was thrown.
            </summary>
        </member>
        <member name="T:Spring.Threading.TimeoutSync">
            <summary> A TimeoutSync is an adaptor class that transforms all
            calls to acquire to instead invoke attempt with a predetermined
            timeout value.
            </summary>
            <seealso cref="T:Spring.Threading.ISync"/>		
        </member>
        <member name="F:Spring.Threading.TimeoutSync.sync_">
            <summary>
            the adapted sync
            </summary>
        </member>
        <member name="F:Spring.Threading.TimeoutSync.timeout_">
            <summary>
            timeout value
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.#ctor(Spring.Threading.ISync,System.Int64)">
            <summary> Create a TimeoutSync using the given Sync object, and
            using the given timeout value for all calls to acquire.
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Acquire">
            <summary>
            Try to acquire the sync before the timeout
            </summary>
            <exception cref="T:Spring.Threading.TimeoutException">In case a time out occurred</exception>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Attempt(System.Int64)">
            <summary>
            <see cref="M:Spring.Threading.ISync.Attempt(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.TimeoutSync.Release">
            <summary>
            <see cref="M:Spring.Threading.ISync.Release"/>
            </summary>
        </member>
        <member name="T:Spring.Threading.Utils">
            <summary>
            Support to account for differences between java nad .NET:
            <ul>
            </ul>
            </summary>
        </member>
        <member name="M:Spring.Threading.Utils.FailFastIfInterrupted">
            <summary>
            .NET threads have not a method to check if they have been interrupted.
            Moreover, differently from java threads, when entering <code>lock</code>ed
            blocks, Monitor, Sleep, SpinWait and so on, a <see cref="T:System.Threading.ThreadInterruptedException"/> 
            will be raised by the runtime.
            <p>Spring.Threading classes usually call this method before entering a lock block, to mirror java code</p>
            <p>Usually this is non issue because the same exception will be raised entering the monitor 
            associated with the lock (<seealso href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemthreadingmonitorclassentertopic.asp"/>) 
            </p>
            </summary>
            <exception cref="T:System.Threading.ThreadInterruptedException">if the thread has been interrupted</exception>
        </member>
        <member name="P:Spring.Threading.Utils.CurrentTimeMillis">
            <summary>
            Placeholder for java <code>System.currentTimeMillis</code>
            </summary>
            <returns>The current machine time in milliseconds</returns>
        </member>
        <member name="T:Spring.Threading.WaitableRunnable">
            <summary>
            A runnable object that can be waited.
            Runs the embeeded runnable and release an (optionally given) 
            <see cref="T:Spring.Threading.ISync"/> object.
            <p>Its main use is to wait for object executed by 
            an executor using a secondary thread.
            </p>
            </summary>
            <seealso cref="T:Spring.Threading.ThreadedExecutor"/>
            <seealso cref="T:Spring.Threading.QueuedExecutor"/>
        </member>
        <member name="M:Spring.Threading.WaitableRunnable.#ctor(Spring.Threading.IRunnable)">
            <summary>
            Initialize a new instance with the given <see cref="T:Spring.Threading.IRunnable"/>
            and a <see cref="T:Spring.Threading.Latch"/> as the waitable <see cref="T:Spring.Threading.ISync"/>
            </summary>
            <param name="runnable">the embeeded <see cref="T:Spring.Threading.IRunnable"/></param>
        </member>
        <member name="M:Spring.Threading.WaitableRunnable.#ctor(Spring.Threading.IRunnable,Spring.Threading.ISync)">
            <summary>
            Initialize a new instance with the given <see cref="T:Spring.Threading.IRunnable"/>
            and <see cref="T:Spring.Threading.ISync"/>
            </summary>
            <param name="runnable">the embeeded <see cref="T:Spring.Threading.IRunnable"/></param>
            <param name="sync">the synchronizing <see cref="T:Spring.Threading.ISync"/></param>
        </member>
        <member name="M:Spring.Threading.WaitableRunnable.Run">
            <summary>
            Will execute its <see cref="T:Spring.Threading.IRunnable"/> and then 
            will release its <see cref="T:Spring.Threading.ISync"/>
            <see cref="M:Spring.Threading.IRunnable.Run"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.WaitableRunnable.Wait">
            <summary>
            Indefinitely waits the execution of the embeeded <see cref="T:Spring.Threading.IRunnable"/>
            </summary>
        </member>
        <member name="M:Spring.Threading.WaitableRunnable.Wait(System.Int64)">
            <summary>
            Waits the execution of the embeeded <see cref="T:Spring.Threading.IRunnable"/> for a given amount
            of time
            </summary>
            <param name="msecs">how long to wait in milliseconds</param>
        </member>
        <member name="T:Spring.Util.ArrayUtils">
            <summary>
            Various utility methods relating to the manipulation of arrays.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: ArrayUtils.cs,v 1.7 2005/03/30 17:01:17 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Util.ArrayUtils.AreEqual(System.Object[],System.Object[])">
            <summary>
            Tests equality of two single-dimensional arrays by checking each element
            for equality.
            </summary>
            <param name="a">The first array to be checked.</param>
            <param name="b">The second array to be checked.</param>
            <returns>True if arrays are the same, false otherwise.</returns>
        </member>
        <member name="T:Spring.Util.AssertUtils">
            <summary>
            Assertion utility methods that simplify things such as parameter checks, etc.
            </summary>
            <author>Aleksandar Seovic</author>
            <version>$Id: AssertUtils.cs,v 1.5 2005/03/30 17:01:21 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws a
            <see cref="T:System.ArgumentNullException"/> if it is <c>null</c>
            (<c>Nothing</c> in Visual Basic.NET).
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <c>null</c> (<c>Nothing</c>
            in Visual Basic.NET).</exception>
        </member>
        <member name="M:Spring.Util.AssertUtils.ArgumentNotNull(System.Object,System.String,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws a
            <see cref="T:System.ArgumentNullException"/> if it is <c>null</c>
            (<c>Nothing</c> in Visual Basic.NET).
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentNullException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <c>null</c> (<c>Nothing</c>
            in Visual Basic.NET).</exception>
        </member>
        <member name="T:Spring.Util.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/>
            by it's (possibly assembly qualified) name, and caches the
            <see cref="T:System.Type"/> instance against the name.
            </summary>
            <version>$Id: CachedTypeResolver.cs,v 1.2 2004/09/21 08:02:07 springboy Exp $</version>
        </member>
        <member name="T:Spring.Util.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this class is to centralise the
            resolution of type names to <see cref="T:System.Type"/> instances beyond that
            offered by the plain vanilla <see cref="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)"/> method call.
            </p>
            </remarks>
            <version>$Id: TypeResolver.cs,v 1.9 2005/03/30 17:01:43 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Util.TypeResolver.#ctor">
            <summary>
            Creates a new instance of the TypeResolver class.
            </summary>
        </member>
        <member name="M:Spring.Util.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type could not be resolved.
            </exception>
        </member>
        <member name="T:Spring.Util.TypeResolver.TypeAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeResolver.TypeAssemblyInfo.TypeAssemblySeparator">
            <summary>
            The string that separates <see cref="T:System.Type"/> names
            from their attendant <see cref="T:System.Reflection.Assembly"/>
            names in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:Spring.Util.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyInfo class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:Spring.Util.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:Spring.Util.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:Spring.Util.TypeResolver.TypeAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="M:Spring.Util.CachedTypeResolver.#ctor">
            <summary>
            Creates a new instance of the CachedTypeResolver class.
            </summary>
        </member>
        <member name="M:Spring.Util.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type could not be resolved.
            </exception>
        </member>
        <member name="P:Spring.Util.CachedTypeResolver.TypeCache">
            <summary>
            The cache, mapping type names against a <see cref="T:System.Type"/>
            instance.
            </summary>
        </member>
        <member name="T:Spring.Util.DelegateInfo">
            <summary>
            Provides sweet and easy access to metadata about a delegate.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: DelegateInfo.cs,v 1.6 2005/02/24 00:28:01 springboy Exp $</version>
        </member>
        <member name="F:Spring.Util.DelegateInfo.InvocationMethod">
            <summary>
            The name of the CLR method associated with a delegate.
            </summary>
        </member>
        <member name="M:Spring.Util.DelegateInfo.#ctor(System.Reflection.EventInfo)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Util.DelegateInfo"/> class.
            </summary>
            <param name="eventMeta">
            The event used to extract the delegate <see cref="T:System.Type"/> from.
            </param>
        </member>
        <member name="M:Spring.Util.DelegateInfo.#ctor(System.Type)">
            <summary>
            Creates a new instance of the
            <see cref="T:Spring.Util.DelegateInfo"/> class.
            </summary>
            <param name="type">
            The delegate <see cref="T:System.Type"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the supplied <see cref="T:System.Type"/> is not a subclass of the
            <see cref="T:System.Delegate"/> class, or is null.
            </exception>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsSignatureCompatible(System.Reflection.MethodInfo)">
            <summary>
            Checks to see if the method encapsulated by the supplied method
            metadata is compatible with the method signature associated with
            this delegate type.
            </summary>
            <param name="method">The method to be checked.</param>
            <returns>
            True if the method signature is compatible with the
            signature of this delegate; false if not, or the
            supplied <paramref name="method"/> parameter is null.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetParameterTypes">
            <summary>
            Gets the <see cref="T:System.Type"/>s of the parameters of the
            method signature associated with this delegate type.
            </summary>
            <remarks>
            <p>
            This method is guaranteed to return a non null <see cref="T:System.Type"/>
            array instance. Said array instance may be empty, but it most certainly
            will not be null. 100% satisfaction is guaranteed, yessir.
            </p>
            </remarks>
            <returns>
            A <see cref="T:System.Type"/> array of the parameter
            <see cref="T:System.Type"/>s; or the <see cref="F:System.Type.EmptyTypes"/>
            array if the method signature has no parameters.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetReturnType">
            <summary>
            Gets the return <see cref="T:System.Type"/> of the 
            method signature associated with this delegate type.
            </summary>
            <returns>The return <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.GetMethod">
            <summary>
            Gets the metadata about the method signature associated
            with this delegate type.
            </summary>
            <returns>Said metadata.</returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsDelegate(System.Type)">
            <summary>
            Determines whether the supplied <see cref="T:System.Type"/>
            is a <see cref="T:System.Delegate"/> type.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to be checked.
            </param>
            <returns>
            True if the supplied <see cref="T:System.Type"/> is a
            <see cref="T:System.Delegate"/> <see cref="T:System.Type"/>;
            false if not or the <paramref name="type"/> parameter is null.
            </returns>
        </member>
        <member name="M:Spring.Util.DelegateInfo.IsSignatureCompatible(System.Reflection.EventInfo,System.Reflection.MethodInfo)">
            <summary>
            Checks if the signature of the supplied <paramref name="handlerMethod"/>
            is compatible with the signature expected by the supplied
            <paramref name="eventMeta"/>.
            </summary>
            <param name="eventMeta">The event to be checked against.</param>
            <param name="handlerMethod">
            The method signature to check for compatibility.
            </param>
            <returns>
            True if the signature of the supplied <paramref name="handlerMethod"/> is
            compatible with the signature expected by the supplied
            <paramref name="eventMeta"/>;/ false if not or either of the
            parameters is null. 
            </returns>
        </member>
        <member name="P:Spring.Util.DelegateInfo.DelegateType">
            <summary>
            The <see cref="T:System.Type"/> of the delegate.
            </summary>
        </member>
        <member name="T:Spring.Util.EventRaiser">
            <summary>
            A utility  class for raising events in a generic and consistent fashion.
            </summary>
            <author>Rick Evans</author>
            <version>$Id: EventUtils.cs,v 1.3 2005/02/27 14:46:53 springboy Exp $</version>
        </member>
        <member name="M:Spring.Util.EventRaiser.Raise(System.Delegate,System.Object[])">
            <summary>
            Raises the event encapsulated by the supplied
            <paramref name="source"/>, passing the supplied <paramref name="arguments"/>
            to the event.
            </summary>
            <param name="source">The event to be raised.</param>
            <param name="arguments">The arguments to the event.</param>
        </member>
        <member name="M:Spring.Util.EventRaiser.Invoke(System.Delegate,System.Object[])">
            <summary>
            Invokes the supplied <paramref name="sink"/>, passing the supplied
            <paramref name="arguments"/> to the sink.
            </summary>
            <param name="sink">The sink to be invoked.</param>
            <param name="arguments">The arguments to the sink.</param>
        </member>
        <member name="T:Spring.Util.DefensiveEventRaiser">
            <summary>
            Raises events <b>defensively</b>.
            </summary>
            <remarks>
            <p>
            Raising events defensively means that as the raised event is passed to each handler,
            any <see cref="T:System.Exception"/> thrown by a handler will be caught and silently
            ignored.
            </p>
            </remarks>
            <author>Rick Evans</author>
            <version>$Id: EventUtils.cs,v 1.3 2005/02/27 14:46:53 springboy Exp $</version>
        </member>
        <member name="M:Spring.Util.DefensiveEventRaiser.Invoke(System.Delegate,System.Object[])">
            <summary>
            <b>Defensively</b> invokes the supplied <paramref name="sink"/>, passing the
            supplied <paramref name="arguments"/> to the sink.
            </summary>
            <param name="sink">The sink to be invoked.</param>
            <param name="arguments">The arguments to the sink.</param>
        </member>
        <member name="T:Spring.Util.Properties">
            <summary>
            An implementation of the Java Properties class.
            </summary>
            <author>Simon White</author>
        </member>
        <member name="M:Spring.Util.Properties.#ctor">
            <summary>
            Creates an empty property list with no default values.
            </summary>
        </member>
        <member name="M:Spring.Util.Properties.#ctor(Spring.Util.Properties)">
            <summary>
            Creates a property list with the specified initial properties.
            </summary>
            <param name="p">The initial properties.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.IO.Stream)">
            <summary>
            Reads a property list (key and element pairs) from the input stream.
            </summary>
            <param name="stream">The stream to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.IO.TextReader)">
            <summary>
            Reads a property list (key and element pairs) from a text reader.
            </summary>
            <param name="textReader">The text reader to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.Collections.IDictionary,System.IO.Stream)">
            <summary>
            Reads a property list (key and element pairs) from the input stream.
            </summary>
            <param name="dictionary">the dictionary to put it in</param>
            <param name="stream">The stream to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.Load(System.Collections.IDictionary,System.IO.TextReader)">
            <summary>
            Reads a property list (key and element pairs) from a text reader.
            </summary>
            <param name="dictionary">the dictionary to put it in</param>
            <param name="textReader">The text reader to load from.</param>
        </member>
        <member name="M:Spring.Util.Properties.ConvertEscapedCharacters(System.String)">
            <summary>
            Converts escaped characters (for example "\t") within a string
            to their real character.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Spring.Util.Properties.RemoveLeadingWhitespace(System.String)">
            <summary>
            Strips whitespace from the front of the specified string.
            </summary>
            <param name="line">The string.</param>
            <returns>The string with all leading whitespace removed.</returns>
        </member>
        <member name="M:Spring.Util.Properties.SplitLine(System.String)">
            <summary>
            Splits the specified string into a key / value pair.
            </summary>
            <param name="line">The line to split.</param>
            <returns>An array containing the key / value pair.</returns>
        </member>
        <member name="M:Spring.Util.Properties.GetProperty(System.String)">
            <summary>
            Searches for the property with the specified key in this property list.
            </summary>
            <param name="key">The key.</param>
            <returns>The property, or null if the key was not found.</returns>
        </member>
        <member name="M:Spring.Util.Properties.GetProperty(System.String,System.String)">
            <summary>
            Searches for the property with the specified key in this property list.
            </summary>
            <param name="key">The key.</param>
            <param name="def">
            The default value to be returned if the key is not found.
            </param>
            <returns>The property, or the default value.</returns>
        </member>
        <member name="M:Spring.Util.Properties.List(System.IO.Stream)">
            <summary>
            Writes this property list out to the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Spring.Util.Properties.SetProperty(System.String,System.String)">
            <summary>
            Sets the specified property key / value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="theValue">The value.</param>
        </member>
        <member name="M:Spring.Util.Properties.Store(System.IO.Stream,System.String)">
            <summary>
            Writes the properties in this instance out to the supplied stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="header">Arbitrary header information.</param>
        </member>
        <member name="M:Spring.Util.Properties.Remove(System.Object)">
            <summary>
            Removes the key / value pair identified by the supplied key.
            </summary>
            <param name="key">
            The key identifying the key / value pair to be removed.
            </param>
        </member>
        <member name="M:Spring.Util.Properties.Add(System.Object,System.Object)">
            <summary>
            Adds the specified key / object pair to this collection.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Spring.Util.Properties.Item(System.Object)">
            <summary>
            Adds the specified key / object pair to this collection.
            </summary>
        </member>
        <member name="T:Spring.Util.ReflectionUtils">
            <summary>
            Miscellaneous reflection utility methods that are missing from the standard library.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Aleksandar Seovic (.Net)</author>
            <version>$Id: ReflectionUtils.cs,v 1.15 2005/03/30 17:01:40 markpollack Exp $</version>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetSignature(System.Type,System.String,System.Type[])">
            <summary>
            Returns signature for the specified <see cref="T:System.Type"/>, method name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the method is in.</param>
            <param name="method">The method name.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s.
            </param>
            <returns>The method signature.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Returns method for the specified <see cref="T:System.Type"/>, method name and argument
            <see cref="T:System.Type"/>s.
            </summary>
            <param name="targetType">
            The target <see cref="T:System.Type"/> to find the method on.
            </param>
            <param name="method">The method to find.</param>
            <param name="argumentTypes">
            The argument <see cref="T:System.Type"/>s.
            </param>
            <returns>The target method.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            Returns an array of parameter <see cref="T:System.Type"/>s for the specified method.
            </summary>
            <param name="methodInfo">The method.</param>
            <returns>An array containing the parameter <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="methodInfo"/> is <c>null</c> (<c>Nothing</c> in Visual Basic.NET).
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            Returns array of parameter <see cref="T:System.Type"/>s for the specified parameter
            info array.
            </summary>
            <param name="args">The parameter info array.</param>
            <returns>An array containing parameter <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="args"/> is <c>null</c> (<c>Nothing</c> in Visual Basic.NET).
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetMostSpecificMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Given a method, which may come from an interface, and a targetClass
            used in the current AOP invocation, find the most specific method
            if there is one.
            </summary>
            <remarks>
            <p>
            For example, the method may be <c>IFoo.Bar()</c> and the target class may be
            <c>DefaultFoo</c>. In this case, the method may be <c>DefaultFoo.Bar()</c>c&gt;. This
            enables attributes on that method to be found.
            </p>
            </remarks>
            <param name="method">method to be invoked, which may come from an interface</param>
            <param name="targetClass">
            The target <see cref="T:System.Type"/> for the current invocation. May be null or may
            not even implement the method.
            </param>
            <returns>
            The more specific method, or the original method if the <paramref name="targetClass"/>
            doesn't specialize it or implement it, or is null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> is <c>null</c> (<c>Nothing</c> in Visual Basic.NET).
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.ToInterfaceArray(System.String[])">
            <summary>
            Convenience method to convert a string array of interface names to a class array.
            </summary>
            <param name="interfaceNames">
            An array of valid interface names. Each name must include full interface name and
            assembly name.
            </param>
            <returns>An array of interface <see cref="T:System.Type"/>s.</returns>
            <exception cref="T:System.TypeLoadException">
            If any of the interfaces can't be loaded.
            </exception>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="interfaceNames"/> (or any of its elements ) is <c>null</c>
            (<c>Nothing</c> in Visual Basic.NET).
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.MethodIsOnOneOfTheseInterfaces(System.Reflection.MethodBase,System.Type[])">
            <summary>Is the given method declared on one of these interfaces?</summary>
            <param name="method">The method to check.</param>
            <param name="interfaces">The array of interfaces we want to check.</param>
            <returns>Whether the method is declared on one of these interfaces.</returns>
            <exception cref="T:System.ArgumentException">
            If any of the <see cref="T:System.Type"/>s specified is not an interface.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="method"/> or any of the specified interfaces is <c>null</c>
            (<c>Nothing</c> in Visual Basic.NET).
            </exception>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetDefaultValue(System.Type)">
            <summary>
            Returns default value for the specified <see cref="T:System.Type"/>
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to return default value for.
            </param>
            <returns>
            The default value for the specified <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.ParameterTypesMatch(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Checks that the parameter <see cref="T:System.Type"/>s of the supplied
            <paramref name="candidate"/> match the parameter <see cref="T:System.Type"/>s
            of the supplied <paramref name="parameterTypes"/>.
            </summary>
            <param name="candidate">The method to be checked.</param>
            <param name="parameterTypes"></param>
            <returns>True if the parameter <see cref="T:System.Type"/>s match.</returns>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.GetTypes(System.Object[])">
            <summary>
            Returns an array containing the <see cref="T:System.Type"/>s of the
            objects in the supplied array.
            </summary>
            <param name="args">
            The objects array for which the corresponding <see cref="T:System.Type"/>s
            are needed.
            </param>
            <returns>
            An array containing the <see cref="T:System.Type"/>s of the objects
            in the supplied array.
            </returns>
            <example>
            <p>
            [C#]<br/>
            Given an array containing the following objects,
            <code>[83, "Foo", new object ()]</code>, the <see cref="T:System.Type"/>
            array returned from this method call would consist of the following
            <see cref="T:System.Type"/> elements...
            <code>[Int32, String, Object]</code>.
            </p>
            </example>
        </member>
        <member name="M:Spring.Util.ReflectionUtils.HasAtLeastOneMethodWithName(System.Type,System.String)">
            <summary>
            Does the given <see cref="T:System.Type"/> or / and it's superclasses at least
            have one or more methods (with any argument types)?
            </summary>
            <remarks>
            <p>
            Includes non-public methods in the methods searched.
            </p>
            </remarks>
            <param name="type">
            The <see cref="T:System.Type"/> to be checked.
            </param>
            <param name="name">
            The name of the method to be searched for. Case inSenSItivE.
            </param>
            <returns>
            True if the given <see cref="T:System.Type"/> or / and it's superclasses at least
            have one or more methods (with any argument types)? False if not or either
            of the parameters is null.
            </returns>
        </member>
        <member name="T:Spring.Util.StringUtils">
            <summary>
            Miscellaneous <see cref="T:System.String"/> utility methods.
            Mainly for internal use within the framework.
            </summary>
            <author>Rod Johnson</author>
            <author>Juergen Hoeller</author>
            <author>Keith Donald</author>
            <author>Aleksandar Seovic (.NET)</author>
            <author>Mark Pollack (.NET)</author>
            <author>Rick Evans (.NET)</author>
            <version>$Id: StringUtils.cs,v 1.16 2005/03/30 17:01:41 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Util.StringUtils.AntExpressionPrefix">
            <summary>
            The string that signals the start of an Ant-style expression.
            </summary>
        </member>
        <member name="F:Spring.Util.StringUtils.AntExpressionSuffix">
            <summary>
            The string that signals the end of an Ant-style expression.
            </summary>
        </member>
        <member name="F:Spring.Util.StringUtils.EmptyStrings">
            <summary>
            An empty array of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:Spring.Util.StringUtils.CountOccurrencesOf(System.String,System.String)">
            <summary>
            Count the occurrences of the substring in <paramref name="target"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.String"/> to search in. Returns <b>0</b> if this is
            <see langword="null"/>.
            </param>
            <param name="substring">
            The <see cref="T:System.String"/> to search for. Returns <b>0</b> if this is
            <see langword="null"/>.
            </param>
            <returns>
            The number of times <paramref name="substring"/> occurs in string
            <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Delete(System.String,System.String)">
            <summary>
            Delete all occurrences of the given substring.
            </summary>
            <param name="target">
            The <see cref="T:System.String"/> to delete from.
            </param>
            <param name="pattern">
            The pattern to delete all occurrences of.
            </param>
            <returns>The modified <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.DeleteAny(System.String,System.String)">
            <summary>
            Delete any character in a given <see cref="T:System.String"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.String"/> to delete from.
            </param>
            <param name="chars">The characters to delete.</param>
            <example>
            az\n as the characters to delete will delete "a"s, "z"s and new lines.
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.Split(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tokenize the given <see cref="T:System.String"/> into a
            <see cref="T:System.String"/> array.
            </summary>
            <remarks>
            <p>
            If <paramref name="s"/> is <see langword="null"/>, returns an empty
            <see cref="T:System.String"/> array.
            </p>
            <p>
            If <paramref name="delimiters"/> is <see langword="null"/> or the empty
            <see cref="T:System.String"/>, returns a <see cref="T:System.String"/> array with one
            element: <paramref name="s"/> itself.
            </p>
            </remarks>
            <param name="s">The <see cref="T:System.String"/> to tokenize.</param>
            <param name="delimiters">
            The delimiter characters, assembled as a <see cref="T:System.String"/>.
            </param>
            <param name="trimTokens">
            Trim the tokens via <see cref="M:System.String.Trim(System.Char[])"/>.
            </param>
            <param name="ignoreEmptyTokens">
            Omit empty tokens from the result array.</param>
            <returns>An array of the tokens.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.AddStringToArray(System.String[],System.String)">
            <summary> 
            Append the given <see cref="T:System.String"/> to the given
            <see cref="T:System.String"/> array, returning a new array 
            consisting of the input array contents plus the given
            <see cref="T:System.String"/>.
            </summary>
            <param name="destination">The array to append to.</param>
            <param name="s">
            The <see cref="T:System.String"/> to append (may be <see langword="null"/>).
            </param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CommaDelimitedListToStringArray(System.String)">
            <summary>
            Convert a CSV list into an array of <see cref="T:System.String"/>s.
            </summary>
            <param name="s">A CSV list.</param>
            <returns>
            An array of <see cref="T:System.String"/>s, or the empty array
            if <paramref name="s"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.DelimitedListToStringArray(System.String,System.String)">
            <summary>
            Take a <see cref="T:System.String"/> which is a delimited list
            and convert it to a <see cref="T:System.String"/> array.
            </summary>
            <param name="s">
            The <see cref="T:System.String"/> to be parsed.
            </param>
            <param name="delimiter">
            The delimeter (this will not be returned).
            </param>
            <returns>
            An array of the tokens in the list.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CollectionToDelimitedString(System.Collections.ICollection,System.String)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a delimited
            (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="c">
            The <see cref="T:System.Collections.ICollection"/> to parse.
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.CollectionToCommaDelimitedString(System.Collections.ICollection)">
            <summary>
            Convenience method to return an
            <see cref="T:System.Collections.ICollection"/> as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="collection">
            The <see cref="T:System.Collections.ICollection"/> to display.
            </param>
            <returns>The delimited string representation.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.ArrayToCommaDelimitedString(System.Object[])">
            <summary>
            Convenience method to return an array as a CSV
            <see cref="T:System.String"/>.
            </summary>
            <param name="target">
            The array to parse. Elements may be of any type (ToString
            will be called on each element).
            </param>
        </member>
        <member name="M:Spring.Util.StringUtils.ArrayToDelimitedString(System.Object[],System.String)">
            <summary>
            Convenience method to return a <see cref="T:System.String"/>
            array as a delimited (e.g. CSV) <see cref="T:System.String"/>.
            </summary>
            <param name="source">
            The array to parse. Elements may be of any type (ToString
            will be called on each element).
            </param>
            <param name="delimiter">
            The delimiter to use (probably a ',').
            </param>
        </member>
        <member name="M:Spring.Util.StringUtils.HasLength(System.String)">
            <summary>Checks if a string has length.</summary>
            <param name="target">The string to check, may be <see langword="null"/>.</param>
            <returns>
            True if the string has length and is not <see langword="null"/>.
            </returns>
            <example>
            <code>
            StringUtils.HasLength(null) = false
            StringUtils.HasLength("") = false
            StringUtils.HasLength(" ") = true
            StringUtils.HasLength("Hello") = true
            </code>
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.HasText(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> has text.
            </summary>
            <remarks>
            <p>
            More specifically, returns <c>true</c> if the string is not
            <see langword="null"/>, it's <c>length is &gt; 0</c>, and it has at least
            one non-whitespace character.
            </p>
            </remarks>
            <param name="target">The string to check, may be <see langword="null"/>.</param>
            <returns>
            True if the <paramref name="target"/> is not <see langword="null"/>, length &gt; 0,
            and not whitespace only.
            </returns>
            <example>
            <code>
            StringUtils.HasText(null) = false
            StringUtils.HasText("") = false
            StringUtils.HasText(" ") = false
            StringUtils.HasText("12345") = true
            StringUtils.HasText(" 12345 ") = true
            </code>
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.Unqualify(System.String)">
            <summary>
            Unqualifies a string qualified by a '.' dot character. 
            </summary>
            <param name="qualifiedName">The qualified name.</param>
            <returns>The unqualified string.</returns>
            <example>
            "this.name.is.qualified", returns "qualified".
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.Unqualify(System.String,System.Char)">
            <summary>
            Unqualifies a string qualified by a separator character.
            </summary>
            <param name="qualifiedName">The qualified name.</param>
            <param name="separator">The separator character.</param>
            <example>
            "this:name:is:qualified" returns "qualified" if using a
            ':' separator.
            </example>
        </member>
        <member name="M:Spring.Util.StringUtils.Uncapitalize(System.String)">
            <summary>
            Uncapitalizes a string, changing the first letter to
            lower case. No other letters are changed.
            </summary>
            <param name="target">
            The string to uncapitalize, may be <see langword="null"/>.</param>
            <returns>
            The uncapitalized string, <see langword="null"/> if input string is
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Spring.Util.StringUtils.StripFirstAndLastCharacter(System.String)">
            <summary>
            Strips first and last character off the string.
            </summary>
            <param name="text">String to strip.</param>
            <returns>Stripped string.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.GetAntExpressions(System.String)">
            <summary>
            Returns a list of Ant-style expressions from the specified text.
            </summary>
            <param name="text">Text to inspect.</param>
            <returns>List of expressions that exist in the specified text.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.SetAntExpression(System.String,System.String,System.Object)">
            <summary>
            Replaces Ant-style expression placeholder with expression value.
            </summary>
            <param name="text">Text to set value in.</param>
            <param name="expression">Name of the expression to set.</param>
            <param name="expValue">Expression value.</param>
            <returns>String with expression value set.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Surround(System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string value of the supplied
            <paramref name="fix"/> to the supplied <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="fix">
            The pre<b>fix</b> and suf<b>fix</b> that respectively will be prepended and
            appended to the target <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="M:Spring.Util.StringUtils.Surround(System.Object,System.Object,System.Object)">
            <summary>
            Surrounds (prepends and appends) the string values of the supplied
            <paramref name="prefix"/> and <paramref name="suffix"/> to the supplied
            <paramref name="target"/>.
            </summary>
            <remarks>
            <p>
            The return value of this method call is always guaranteed to be non
            <see langword="null"/>. If every value passed as a parameter to this method is
            <see langword="null"/>, the <see cref="F:System.String.Empty"/> string will be returned.
            </p>
            </remarks>
            <param name="prefix">
            The value that will be prepended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="target">
            The target that is to be surrounded. If this value is not a
            <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <param name="suffix">
            The value that will be appended to the <paramref name="target"/>. If this value
            is not a <see cref="T:System.String"/> value, it's attendant
            <see cref="M:System.Object.ToString"/> value will be used.
            </param>
            <returns>The surrounded string.</returns>
        </member>
        <member name="T:Spring.Util.TypeAliasResolver">
            <summary>
            Provides (and resolves) alias' for the common types.
            </summary>
            <remarks>
            <p>
            It's really just syntactic sugar so that a type definition
            (in, say, a config file) can use 'int' instead of 'System.Int32'.
            </p>
            </remarks>
            <version>$Id: TypeAliasResolver.cs,v 1.6 2005/03/30 17:01:42 markpollack Exp $</version>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.Int32Alias">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.Int64Alias">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.Int16Alias">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.UInt32Alias">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.UInt64Alias">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.UInt16Alias">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.DateAlias">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.BoolAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:Spring.Util.TypeAliasResolver.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="M:Spring.Util.TypeAliasResolver.#cctor">
            <summary>
            Initialises the static properties of the TypeAliasResolver class.
            </summary>
        </member>
        <member name="M:Spring.Util.TypeAliasResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied type name.
            </summary>
            <remarks>
            <p>
            If the supplied type name is an alias, the fully resolved
            type name is returned. If no alias could be found that matches
            the supplied type name, then the type name will be returned as is.
            </p>
            </remarks>
            <param name="type">The supplied type name.</param>
            <returns>
            If the supplied type name is an alias, the fully resolved
            type name is returned. If no alias could be found that matches
            the supplied type name, then the type name will be returned as is.
            </returns>
        </member>
        <member name="P:Spring.Util.TypeAliasResolver.Aliases">
            <summary>
            The alias type instances managed by this object.
            </summary>
        </member>
        <member name="T:Spring.Objects.Support.TypeUtils">
            <summary>
            Utility class for type related operations
            </summary>
        </member>
        <member name="M:Spring.Objects.Support.TypeUtils.TypeOfAtRunTime(System.Object)">
            <summary>
            Sort of run-time typeof :-)
            </summary>
            <param name="source">a <see cref="T:System.Type"/> or <see cref="T:System.Object"/> instance</param>
            <returns>the argument if it is a <see cref="T:System.Type"/> or <see cref="M:System.Object.GetType"/> if it is an <see cref="T:System.Object"/></returns>
        </member>
    </members>
</doc>
