<!--

 Copyright 2006 The Apache Software Foundation.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 $Id$

-->


<project name="Shale Blank Starter App" default="compile" basedir=".">


  <!-- ===================== Initialize Property Values ==================== -->


  <!-- Initialize property values -->
  <property file="build.properties"/>
  <property file="default.properties"/>


  <!-- Search classpath for setting conditional processing flags -->
  <path id="search.classpath">
    <fileset                        dir="${lib.dir}"
                               includes="**/*.jar"/>
    <fileset                        dir="${shale.dir}/dist"
                               includes="**/*.jar"/>
  </path>


  <!-- Conditional Processing Flags -->
  <available                   property="jsfri.present"
                              classname="com.sun.faces.RIConstants"
                           classpathref="search.classpath"/>
  <available                   property="license.present"
                                   file="${basedir}/LICENSE.txt"/>
  <available                   property="myfaces.present"
                              classname="org.apache.myfaces.config.MyfacesConfig"
                           classpathref="search.classpath"/>
  <available                   property="notice.present"
                                   file="${basedir}/NOTICE.txt"/>
  <condition                   property="spring.present">
    <and>
      <available              classname="org.springframework.core.Constants"
                           classpathref="search.classpath"/>
      <available              classname="org.springframework.context.ApplicationContext"
                           classpathref="search.classpath"/>
      <available              classname="org.springframework.web.jsf.DelegatingVariableResolver"
                           classpathref="search.classpath"/>
    </and>
  </condition>
  <available                   property="tiger.present"
                              classname="java.net.Proxy"
                           classpathref="search.classpath"/>
  <available                   property="tiles.present"
                              classname="org.apache.tiles.servlets.TilesServlet"
                           classpathref="search.classpath"/>


  <!-- Compile Classpath -->
  <path id="compile.classpath">
    <fileset                        dir="${lib.dir}"
                               includes="**/*.jar">
      <exclude                     name="junit.jar"/>
      <exclude                     name="shale-spring.jar"
                                 unless="spring.present"/>
      <exclude                     name="shale-tiger.jar"
                                 unless="tiger.present"/>
      <exclude                     name="shale-tiles.jar"
                                 unless="tiles.present"/>
    </fileset>
    <fileset                        dir="${ext.dir}"
                               includes="**/*.jar"/>
    <fileset                        dir="${shale.dir}/dist"
                               includes="**/*.jar"
                               excludes="shale-test.jar"/>
  </path>


  <!-- Unit Test Classpath -->
  <path id="test.classpath">
    <path                         refid="compile.classpath"/>
    <fileset                        dir="${lib.dir}"
                               includes="**/junit.jar"/>
    <fileset                        dir="${ext.dir}"
                               includes="**/junit.jar"/>
    <path                      location="${build.web.dir}/WEB-INF/classes"/>
    <fileset                        dir="${shale.dir}/dist"
                               includes="shale-test.jar"/>
    <path                      location="${build.test.dir}"/>
  </path>


  <!-- ==================== Maintenance Targets ============================ -->


  <target     name="clean"
       description="Clean all build directories">
    <delete    dir="${build.dir}"/>
    <delete    dir="${dist.dir}"/>
  </target>


  <target     name="init">
    <echo  message="---------- ${project.name} ${project.version} -----------"/>
    <filter  token="implVendor"        value="${project.vendor}"/>
    <filter  token="implVendorId"      value="${project.vendor.id}"/>
    <filter  token="implVersion"       value="${project.version}"/>
    <filter  token="projectName"       value="${project.name}"/>
    <filter  token="projectPackage"    value="${project.package}"/>
    <filter  token="specVendor"        value="${project.spec.vendor}"/>
    <filter  token="specVersion"       value="${project.spec.version}"/>
    <filter  token="stateSaving"       value="${webapp.state.saving}"/>
    <echo  message="jsfri.present =    ${jsfri.present}"/>
    <echo  message="myfaces.present =  ${myfaces.present}"/>
    <echo  message="spring.present =   ${spring.present}"/>
    <echo  message="tiger.present =    ${tiger.present}"/>
    <echo  message="tiles.present =    ${tiles.present}"/>
  </target>


  <target     name="prepare" depends="init">
    <mkdir     dir="${build.dir}"/>
    <mkdir     dir="${build.web.dir}"/>
    <mkdir     dir="${build.web.dir}/META-INF"/>
    <mkdir     dir="${build.web.dir}/WEB-INF"/>
    <mkdir     dir="${build.web.dir}/WEB-INF/classes"/>
    <mkdir     dir="${build.web.dir}/WEB-INF/lib"/>
    <mkdir     dir="${dist.dir}"/>
    <mkdir     dir="${dist.dir}/docs"/>
    <mkdir     dir="${dist.dir}/docs/api"/>
  </target>


  <target     name="static" depends="prepare,static.license,static.notice">

    <!-- Copy and filter configuration files -->
    <copy    todir="${build.dir}/META-INF"
         filtering="on"
              file="${src.conf.dir}/MANIFEST.MF"/>

    <!-- Copy static web resources -->
    <copy    todir="${build.web.dir}"
         filtering="on">
      <fileset dir="${src.web.dir}"/>
    </copy>

    <!-- Copy libraries from "lib.dir" directory -->
    <copy    todir="${build.web.dir}/WEB-INF/lib"
           flatten="true">
      <fileset dir="${lib.dir}"
          includes="**/*.jar">
        <exclude name="**/commons-codec.jar"
               unless="myfaces.present"/>
        <exclude name="**/commons-el.jar"
               unless="myfaces.present"/>
        <exclude name="**/commons-fileupload.jar"
               unless="myfaces.present"/>
        <exclude name="**/jsf-api.jar"
                   if="myfaces.present"/>
        <exclude name="**/jsf-impl.jar"
                   if="myfaces.present"/>
        <exclude name="**/junit.jar"/>
        <exclude name="**/jsp-api.jar"/>
        <!-- Comment out following line if using MyFaces components -->
        <exclude name="**/myfaces-extensions.jar"/>
        <exclude name="**/portlet-api.jar"/>
        <exclude name="**/servlet-api.jar"/>
        <!-- Comment out the following lines for Spring components you need -->
        <exclude name="**/spring.jar"/>
        <exclude name="**/spring-aop.jar"/>
        <exclude name="**/spring-dao.jar"/>
        <exclude name="**/spring-hibernate.jar"/>
        <exclude name="**/spring-jdbc.jar"/>
        <exclude name="**/spring-mock.jar"/>
        <exclude name="**/spring-orm.jar"/>
        <exclude name="**/spring-remoting.jar"/>
        <exclude name="**/spring-support.jar"/>
        <exclude name="**/spring-webmvc.jar"/>
        <exclude name="**/struts-mailreader-dao.jar"/>
        <exclude name="**/taglibrarydoc.jar"/>
      </fileset>
    </copy>


    <!-- Copy libraries from Shale release -->
    <copy    todir="${build.web.dir}/WEB-INF/lib"
           flatten="true">
      <fileset dir="${shale.dir}/dist"
          includes="**/*.jar">
        <exclude name="shale-spring.jar"
               unless="spring.present"/>
        <exclude name="shale-test.jar"/>
        <exclude name="shale-tiger.jar"
               unless="tiger.present"/>
        <exclude name="shale-tiles.jar"
               unless="tiles.present"/>
      </fileset>
    </copy>


  </target>


  <target     name="static.license" if="license.present">
    <copy    todir="${build.web.dir}/META-INF"
              file="${basedir}/LICENSE.txt"/>
  </target>


  <target     name="static.notice" if="notice.present">
    <copy    todir="${build.web.dir}/META-INF"
              file="${basedir}/NOTICE.txt"/>
  </target>


  <!-- ================= Compile Application Components ==================== -->


  <target         name="compile" depends="static"
           description="Compile application components">

    <!-- Compile Java Sources -->
    <javac      srcdir="${src.java.dir}"
               destdir="${build.web.dir}/WEB-INF/classes"
                 debug="${compile.debug}"
           deprecation="${compile.deprecation}"
              optimize="${compile.optimize}"
                source="${project.source}"
                target="${project.target}">
      <classpath refid="compile.classpath" />
    </javac>

    <!-- Copy non-Java Sources -->
    <copy        todir="${build.web.dir}/WEB-INF/classes">
      <fileset     dir="${src.java.dir}">
        <exclude  name="**/*.java"/>
        <exclude  name="**/overview.html"/>
        <exclude  name="**/package.html"/>
      </fileset>
    </copy>

  </target>


  <!-- ===================== Generate Documentation ======================== -->


  <target         name="javadocs" depends="compile"
           description="Create JavaDocs">

    <mkdir         dir="${build.docs.dir}"/>

    <javadoc
            sourcepath="${src.java.dir}"
               destdir="${build.docs.dir}"
                author="false"
               private="true"
               version="true"
                source="${project.source}"
          packagenames="${project.package}.*"
           windowtitle="${project.name} (Version ${project.version})"
              doctitle="${project.name} (Version ${project.version})"
                bottom="${project.copyright}">
      <classpath refid="compile.classpath"/>
    </javadoc>

    <copy        todir="${build.docs.dir}">
      <fileset     dir="${src.java.dir}"
              includes="**/*.gif"/>
    </copy>

  </target>


  <!-- ==================== Create Binary Distribution ===================== -->


  <target name="dist" depends="javadocs"
   description="Create binary distribution">

    <mkdir     dir="${dist.dir}"/>

    <!-- Copy license and configuration files -->
    <copy    todir="${dist.dir}">
      <fileset dir="${basedir}" includes="*.txt build.* default.properties"
                                excludes="build.properties"/>
    </copy>

    <!-- Create a runnable web application archive -->
    <jar   jarfile="${dist.dir}/${project.path}-${project.version}.war"
           basedir="${build.web.dir}"
          manifest="${build.dir}/META-INF/MANIFEST.MF"/>

    <!-- Optional:  Copy the source directories -->
    <mkdir     dir="${dist.dir}/src"/>
    <copy    todir="${dist.dir}/src">
      <fileset dir="src" excludes="**/.svn/** **/CVS/**"/>
    </copy>

    <!-- Optional:  Create an IDE-friendly zip of the Java sources -->
    <zip    zipfile="${dist.dir}/${project.path}-${project.version}-src.zip"
            basedir="${src.java.dir}"/>

    <!-- Optional:  Copy unpacked javadocs -->
    <mkdir      dir="${dist.dir}/docs"/>
    <mkdir      dir="${dist.dir}/docs/api"/>
    <copy     todir="${dist.dir}/docs/api">
      <fileset  dir="${build.docs.dir}"/>
    </copy>

    <!-- Optional:  Create an IDE-friendly zip of the Javadocs -->
    <zip    zipfile="${dist.dir}/${project.path}-${project.version}-doc.zip"
            basedir="${build.docs.dir}"/>

  </target>


  <!-- ===================== Tomcat Integration ============================ -->


  <path id="catalina.classpath">
    <path                      location="${catalina.home}/server/lib/catalina-ant.jar"/>
  </path>


  <target    name="install" depends="compile"
      description="Install webapp on Tomcat">
    <taskdef name="install"
        classname="org.apache.catalina.ant.InstallTask"
     classpathref="catalina.classpath"/>
    <install  url="${catalina.manager}"
         username="${catalina.username}"
         password="${catalina.password}"
             path="/${project.path}"
              war="file://${build.web.dir}"/>
  </target>


  <target    name="list"
      description="List installed webapps on Tomcat">
    <taskdef name="list"
        classname="org.apache.catalina.ant.ListTask"
     classpathref="catalina.classpath"/>
    <list     url="${catalina.manager}"
         username="${catalina.username}"
         password="${catalina.password}"/>
  </target>


  <target    name="reload" depends="compile"
      description="Reload webapp on Tomcat">
    <taskdef name="reload"
        classname="org.apache.catalina.ant.ReloadTask"
     classpathref="catalina.classpath"/>
    <reload   url="${catalina.manager}"
         username="${catalina.username}"
         password="${catalina.password}"
             path="/${project.path}"/>
  </target>


  <target    name="remove"
      description="Remove webapp from Tomcat">
    <taskdef name="remove"
        classname="org.apache.catalina.ant.RemoveTask"
     classpathref="catalina.classpath"/>
    <remove   url="${catalina.manager}"
         username="${catalina.username}"
         password="${catalina.password}"
             path="/${project.path}"/>
  </target>


  <!-- ========================== Unit Tests =============================== -->


  <target         name="test.compile" depends="compile">

    <mkdir         dir="${build.test.dir}"/>

    <!-- Compile Java Sources -->
    <javac      srcdir="${src.test.dir}"
               destdir="${build.test.dir}"
                 debug="${compile.debug}"
           deprecation="${compile.deprecation}"
              optimize="${compile.optimize}"
                source="${project.source}"
                target="${project.target}">
      <classpath refid="test.classpath" />
    </javac>

    <!-- Copy non-Java Sources -->
    <copy        todir="${build.test.dir}">
      <fileset     dir="${src.test.dir}">
        <exclude  name="**/*.java"/>
      </fileset>
    </copy>

  </target>


  <target name="test" depends="test.compile"
   description="Execute unit tests">

    <mkdir          dir="${build.dir}/test-results"/>

    <echo       message="Running unit tests ..."/>
    <junit printSummary="no" fork="yes"
          haltonfailure="yes" haltonerror="yes">
      <classpath  refid="test.classpath"/>
      <formatter   type="plain"
                usefile="false"/>
      <formatter   type="xml"
                usefile="true"/>
      <batchtest todir="${build.dir}/test-results">
        <fileset    dir="${build.test.dir}"
               includes="**/*TestCase.class"/>
      </batchtest>
    </junit>

  </target>


</project>
